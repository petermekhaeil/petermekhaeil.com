"""An internal directive used by Netlify Graph"""
directive @netlify(
  """The docstring for this operation"""
  doc: String

  """The uuid of the operation (normally auto-generated)"""
  id: String!
) on QUERY | MUTATION | SUBSCRIPTION | FRAGMENT_DEFINITION

input GitHubStatusEventSubscriptionInput {
  """The owner of the repo, the `octocat` in `octocat/Hello-World`."""
  repoOwner: String!

  """The name of the repo, the `Hello-World` in `octocat/Hello-World`."""
  repoName: String!
}

"""The new state of the commit status."""
enum GitHubStatusEventSubscriptionStateEnum {
  PENDING
  SUCCESS
  FAILURE
  ERROR
}

type GitHubStatusEventSubscriptionPayload {
  """The commit that the status is on."""
  commit: GitHubCommit

  """The new state."""
  state: GitHubStatusEventSubscriptionStateEnum

  """The optional human-readable description added to the status."""
  description: String

  """The optional link added to the status."""
  targetUrl: String

  """
  An list of branches containing the status' SHA. Each branch contains the given SHA, but the SHA may or may not be the head of the branch. The list includes a maximum of 10 branches.
  """
  branches: [GitHubRef!]

  """The raw body of the event from GitHub in JSON format."""
  raw: JSON!

  """The repository for the event."""
  repository: GitHubRepository

  """The actor that triggered the event."""
  sender: GitHubActor
}

input GitHubStarEventSubscriptionInput {
  """The owner of the repo, the `octocat` in `octocat/Hello-World`."""
  repoOwner: String!

  """The name of the repo, the `Hello-World` in `octocat/Hello-World`."""
  repoName: String!
}

"""The action that was performed that triggered an star event."""
enum GitHubStarEventSubscriptionActionEnum {
  CREATED
  DELETED
}

type GitHubStarEventSubscriptionPayload {
  """The action that was performed."""
  action: GitHubStarEventSubscriptionActionEnum

  """
  The time the star was created. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Will be null for the deleted action.
  """
  starredAt: String

  """The raw body of the event from GitHub in JSON format."""
  raw: JSON!

  """The repository for the event."""
  repository: GitHubRepository

  """The actor that triggered the event."""
  sender: GitHubActor
}

input GitHubReleaseEventSubscriptionInput {
  """The owner of the repo, the `octocat` in `octocat/Hello-World`."""
  repoOwner: String!

  """The name of the repo, the `Hello-World` in `octocat/Hello-World`."""
  repoName: String!
}

"""
Shallow version of the release object when the release has been deleted.
"""
type GitHubReleaseEventSubscriptionDeletedRelease {
  """"""
  databaseId: Int!

  """"""
  id: ID!

  """"""
  url: String

  """"""
  body: String

  """"""
  name: String

  """"""
  tagName: String

  """"""
  createdAt: String

  """"""
  prerelease: Boolean

  """"""
  draft: Boolean

  """"""
  publishedAt: String
}

type GitHubReleaseEventSubscriptionBodyChanges {
  """The previous version of the body if the action was `EDITED`."""
  from: String
}

type GitHubReleaseEventSubscriptionChanges {
  """The changes to the body if the action was `EDITED`"""
  body: GitHubReleaseEventSubscriptionBodyChanges

  """The changes to the name if the action was `EDITED`"""
  name: GitHubReleaseEventSubscriptionBodyChanges
}

"""The action that was performed that triggered an release event."""
enum GitHubReleaseEventSubscriptionActionEnum {
  PUBLISHED
  UNPUBLISHED
  CREATED
  EDITED
  DELETED
  PRERELEASED
  RELEASED
}

type GitHubReleaseEventSubscriptionPayload {
  """The action that was performed."""
  action: GitHubReleaseEventSubscriptionActionEnum

  """The changes to the release if the action was `EDITED`."""
  changes: GitHubReleaseEventSubscriptionChanges

  """The release, if the action was not `DELETED`."""
  release: GitHubRelease

  """A shallow version of the release, if the release was deleted."""
  deletedRelease: GitHubReleaseEventSubscriptionDeletedRelease

  """The raw body of the event from GitHub in JSON format."""
  raw: JSON!

  """The repository for the event."""
  repository: GitHubRepository

  """The actor that triggered the event."""
  sender: GitHubActor
}

input GitHubPushEventSubscriptionInput {
  """The owner of the repo, the `octocat` in `octocat/Hello-World`."""
  repoOwner: String!

  """The name of the repo, the `Hello-World` in `octocat/Hello-World`."""
  repoName: String!
}

type GitHubPushEventSubscriptionPayload {
  """The full git ref that was pushed."""
  ref: GitHubRef

  """The most recent commit on the ref after the push."""
  head: GitHubCommit

  """The commit on the ref before the push."""
  before: GitHubCommit

  """A list of pushed comments. Includes a maxmimum of 20 commits."""
  commits: [GitHubCommit!]

  """The raw body of the event from GitHub in JSON format."""
  raw: JSON!

  """The repository for the event."""
  repository: GitHubRepository

  """The actor that triggered the event."""
  sender: GitHubActor
}

input GitHubPullRequestReviewEventSubscriptionInput {
  """The owner of the repo, the `octocat` in `octocat/Hello-World`."""
  repoOwner: String!

  """The name of the repo, the `Hello-World` in `octocat/Hello-World`."""
  repoName: String!
}

type GitHubPullRequestReviewEventSubscriptionChanges {
  """The changes to the body if the action was `EDITED`"""
  body: GitHubPullRequestEventSubscriptionBodyChanges
}

"""
The action that was performed that triggered an pull_request_review event.
"""
enum GitHubPullRequestReviewEventSubscriptionActionEnum {
  SUBMITTED
  EDITED
  DISMISSED
}

type GitHubPullRequestReviewEventSubscriptionPayload {
  """The action that was performed."""
  action: GitHubPullRequestReviewEventSubscriptionActionEnum

  """The changes to the pull request review if the action was `EDITED`."""
  changes: GitHubPullRequestReviewEventSubscriptionChanges

  """The pull request the review pertains to."""
  pullRequest: GitHubPullRequest

  """The review that was affected."""
  review: GitHubPullRequestReview

  """The raw body of the event from GitHub in JSON format."""
  raw: JSON!

  """The repository for the event."""
  repository: GitHubRepository

  """The actor that triggered the event."""
  sender: GitHubActor
}

input GitHubPullRequestReviewCommentEventSubscriptionInput {
  """The owner of the repo, the `octocat` in `octocat/Hello-World`."""
  repoOwner: String!

  """The name of the repo, the `Hello-World` in `octocat/Hello-World`."""
  repoName: String!
}

"""
Shallow version of the pull request review comment object when the comment has been deleted.
"""
type GitHubPullRequestReviewCommentEventSubscriptionDeletedPullRequestReviewComment {
  """"""
  databaseId: Int!

  """"""
  id: ID!

  """"""
  url: String

  """"""
  path: String

  """"""
  diffHunk: String

  """"""
  body: String

  """"""
  position: Int

  """"""
  originalPosition: Int

  """"""
  createdAt: String

  """"""
  updatedAt: String
}

type GitHubPullRequestReviewCommentEventSubscriptionChanges {
  """The changes to the body if the action was `EDITED`"""
  body: GitHubPullRequestEventSubscriptionBodyChanges
}

"""
The action that was performed that triggered an pull_request_review_comment event.
"""
enum GitHubPullRequestReviewCommentEventSubscriptionActionEnum {
  CREATED
  EDITED
  DELETED
}

type GitHubPullRequestReviewCommentEventSubscriptionPayload {
  """The action that was performed."""
  action: GitHubPullRequestReviewCommentEventSubscriptionActionEnum

  """
  The changes to the pull request review comment if the action was `EDITED`.
  """
  changes: GitHubPullRequestReviewCommentEventSubscriptionChanges

  """The pull request review comment, if the action was not `DELETED`."""
  comment: GitHubPullRequestReviewComment

  """
  A shallow version of the pull request review comment, if the comment was deleted.
  """
  deletedComment: GitHubPullRequestReviewCommentEventSubscriptionDeletedPullRequestReviewComment

  """The raw body of the event from GitHub in JSON format."""
  raw: JSON!

  """The repository for the event."""
  repository: GitHubRepository

  """The actor that triggered the event."""
  sender: GitHubActor
}

input GitHubPullRequestEventSubscriptionInput {
  """The owner of the repo, the `octocat` in `octocat/Hello-World`."""
  repoOwner: String!

  """The name of the repo, the `Hello-World` in `octocat/Hello-World`."""
  repoName: String!
}

"""
Shallow version of the pull request object when the pull request has been deleted.
"""
type GitHubPullRequestEventSubscriptionDeletedPullRequest {
  """"""
  databaseId: Int!

  """"""
  id: ID!

  """"""
  url: String

  """"""
  number: Int

  """"""
  locked: Boolean

  """"""
  title: String

  """"""
  body: String

  """"""
  closedAt: String

  """"""
  mergedAt: String

  """"""
  createdAt: String

  """"""
  updatedAt: String
}

type GitHubPullRequestEventSubscriptionBodyChanges {
  """The previous version of the body if the action was `EDITED`."""
  from: String
}

type GitHubPullRequestEventSubscriptionTitleChanges {
  """The previous version of the title if the action was `EDITED`."""
  from: String
}

type GitHubPullRequestEventSubscriptionChanges {
  """The changes to the title if the action was `EDITED`"""
  title: GitHubPullRequestEventSubscriptionTitleChanges

  """The changes to the body if the action was `EDITED`"""
  body: GitHubPullRequestEventSubscriptionBodyChanges
}

"""The action that was performed that triggered an pull_request event."""
enum GitHubPullRequestEventSubscriptionActionEnum {
  ASSIGNED
  UNASSIGNED
  REVIEW_REQUESTED
  REVIEW_REQUEST_REMOVED
  LABELED
  UNLABELED
  OPENED
  EDITED
  CLOSED
  READY_FOR_REVIEW
  LOCKED
  UNLOCKED
  REOPENED
}

type GitHubPullRequestEventSubscriptionPayload {
  """The action that was performed."""
  action: GitHubPullRequestEventSubscriptionActionEnum

  """The changes to the pull request if the action was `EDITED`."""
  changes: GitHubPullRequestEventSubscriptionChanges

  """The pull request, if the action was not `DELETED`."""
  pullRequest: GitHubPullRequest

  """
  A shallow version of the pull request, if the pull request was deleted.
  """
  deletedPullRequest: GitHubPullRequestEventSubscriptionDeletedPullRequest

  """The raw body of the event from GitHub in JSON format."""
  raw: JSON!

  """The repository for the event."""
  repository: GitHubRepository

  """The actor that triggered the event."""
  sender: GitHubActor
}

input GitHubProjectEventSubscriptionInput {
  """The owner of the repo, the `octocat` in `octocat/Hello-World`."""
  repoOwner: String!

  """The name of the repo, the `Hello-World` in `octocat/Hello-World`."""
  repoName: String!
}

"""
Shallow version of the project object when the project has been deleted.
"""
type GitHubProjectEventSubscriptionDeletedProject {
  """"""
  databaseId: Int!

  """"""
  id: ID!

  """"""
  url: String

  """"""
  name: String

  """"""
  body: String

  """"""
  number: Int

  """"""
  createdAt: String

  """"""
  updatedAt: String
}

type GitHubProjectEventSubscriptionBodyChanges {
  """The previous version of the body if the action was `EDITED`."""
  from: String
}

type GitHubProjectEventSubscriptionNameChanges {
  """The previous version of the name if the action was `EDITED`."""
  from: String
}

type GitHubProjectEventSubscriptionChanges {
  """The changes to the name if the action was `EDITED`"""
  name: GitHubProjectEventSubscriptionNameChanges

  """The changes to the body if the action was `EDITED`"""
  body: GitHubProjectEventSubscriptionBodyChanges
}

"""The action that was performed that triggered an project event."""
enum GitHubProjectEventSubscriptionActionEnum {
  CREATED
  UPDATED
  CLOSED
  REOPENED
  DELETED
}

type GitHubProjectEventSubscriptionPayload {
  """The action that was performed."""
  action: GitHubProjectEventSubscriptionActionEnum

  """The changes to the project if the action was `EDITED`."""
  changes: GitHubProjectEventSubscriptionChanges

  """The project, if the action was not `DELETED`."""
  project: GitHubProject

  """A shallow version of the project, if the column was deleted."""
  deletedProject: GitHubProjectEventSubscriptionDeletedProject

  """The raw body of the event from GitHub in JSON format."""
  raw: JSON!

  """The repository for the event."""
  repository: GitHubRepository

  """The actor that triggered the event."""
  sender: GitHubActor
}

input GitHubProjectColumnEventSubscriptionInput {
  """The owner of the repo, the `octocat` in `octocat/Hello-World`."""
  repoOwner: String!

  """The name of the repo, the `Hello-World` in `octocat/Hello-World`."""
  repoName: String!
}

"""
Shallow version of the project column object when the column has been deleted.
"""
type GitHubProjectColumnEventSubscriptionDeletedProjectColumn {
  """"""
  databaseId: Int!

  """"""
  id: ID!

  """"""
  url: String

  """"""
  name: String

  """"""
  createdAt: String

  """"""
  updatedAt: String
}

type GitHubProjectColumnEventSubscriptionNameChanges {
  """The previous version of the name if the action was `EDITED`."""
  from: String
}

type GitHubProjectColumnEventSubscriptionChanges {
  """The changes to the name if the action was `EDITED`"""
  name: GitHubProjectColumnEventSubscriptionNameChanges
}

"""The action that was performed that triggered an project_column event."""
enum GitHubProjectColumnEventSubscriptionActionEnum {
  CREATED
  EDITED
  MOVED
  DELETED
}

type GitHubProjectColumnEventSubscriptionPayload {
  """The action that was performed."""
  action: GitHubProjectColumnEventSubscriptionActionEnum

  """The changes to the project column if the action was `EDITED`."""
  changes: GitHubProjectColumnEventSubscriptionChanges

  """The project column, if the action was not `DELETED`."""
  projectColumn: GitHubProjectColumn

  """A shallow version of the project column, if the column was deleted."""
  deletedProjectColumn: GitHubProjectColumnEventSubscriptionDeletedProjectColumn

  """The raw body of the event from GitHub in JSON format."""
  raw: JSON!

  """The repository for the event."""
  repository: GitHubRepository

  """The actor that triggered the event."""
  sender: GitHubActor
}

input GitHubProjectCardEventSubscriptionInput {
  """The owner of the repo, the `octocat` in `octocat/Hello-World`."""
  repoOwner: String!

  """The name of the repo, the `Hello-World` in `octocat/Hello-World`."""
  repoName: String!
}

"""
Shallow version of the project card object when the card has been deleted.
"""
type GitHubProjectCardEventSubscriptionDeletedProjectCard {
  """"""
  databaseId: Int!

  """"""
  id: ID!

  """"""
  url: String

  """"""
  note: String

  """"""
  archived: Boolean

  """"""
  createdAt: String

  """"""
  updatedAt: String
}

type GitHubProjectCardEventSubscriptionNoteChanges {
  """The previous version of the note if the action was `EDITED`."""
  from: String
}

type GitHubProjectCardEventSubscriptionChanges {
  """The changes to the note if the action was `EDITED`"""
  note: GitHubProjectCardEventSubscriptionNoteChanges
}

"""The action that was performed that triggered an project_card event."""
enum GitHubProjectCardEventSubscriptionActionEnum {
  CREATED
  EDITED
  MOVED
  CONVERTED
  DELETED
}

type GitHubProjectCardEventSubscriptionPayload {
  """The action that was performed."""
  action: GitHubProjectCardEventSubscriptionActionEnum

  """The changes to the project card if the action was `EDITED`."""
  changes: GitHubProjectCardEventSubscriptionChanges

  """The project card, if the action was not `DELETED`."""
  projectCard: GitHubProjectCard

  """A shallow version of the project card, if the card was deleted."""
  deletedProjectCard: GitHubProjectCardEventSubscriptionDeletedProjectCard

  """The raw body of the event from GitHub in JSON format."""
  raw: JSON!

  """The repository for the event."""
  repository: GitHubRepository

  """The actor that triggered the event."""
  sender: GitHubActor
}

input GitHubMilestoneEventSubscriptionInput {
  """The owner of the repo, the `octocat` in `octocat/Hello-World`."""
  repoOwner: String!

  """The name of the repo, the `Hello-World` in `octocat/Hello-World`."""
  repoName: String!
}

"""
Shallow version of the milestone object when the milestone has been deleted.
"""
type GitHubMilestoneEventSubscriptionDeletedMilestone {
  """"""
  databaseId: Int!

  """"""
  id: ID!

  """"""
  url: String

  """"""
  number: Int

  """"""
  title: String

  """"""
  description: String

  """"""
  dueOn: String
}

type GitHubMilestoneEventSubscriptionTitleChanges {
  """The previous version of the title if the action was `EDITED`."""
  from: String
}

type GitHubMilestoneEventSubscriptionDueOnChanges {
  """The previous version of the dueOn if the action was `EDITED`."""
  from: String
}

type GitHubMilestoneEventSubscriptionDescriptionChanges {
  """The previous version of the description if the action was `EDITED`."""
  from: String
}

type GitHubMilestoneEventSubscriptionChanges {
  """The changes to the description if the action was `EDITED`"""
  description: GitHubMilestoneEventSubscriptionDescriptionChanges

  """The changes to the dueOn if the action was `EDITED`"""
  dueOn: GitHubMilestoneEventSubscriptionDueOnChanges

  """The changes to the title if the action was `EDITED`"""
  title: GitHubMilestoneEventSubscriptionTitleChanges
}

"""The action that was performed that triggered an milestone event."""
enum GitHubMilestoneEventSubscriptionActionEnum {
  CREATED
  CLOSED
  OPENED
  EDITED
  DELETED
}

type GitHubMilestoneEventSubscriptionPayload {
  """The action that was performed."""
  action: GitHubMilestoneEventSubscriptionActionEnum

  """The changes to the milestone if the action was `EDITED`."""
  changes: GitHubMilestoneEventSubscriptionChanges

  """The milestone, if the action was not `DELETED`."""
  milestone: GitHubMilestone

  """A shallow version of the milestone, if the milestone was deleted."""
  deletedMilestone: GitHubMilestoneEventSubscriptionDeletedMilestone

  """The raw body of the event from GitHub in JSON format."""
  raw: JSON!

  """The repository for the event."""
  repository: GitHubRepository

  """The actor that triggered the event."""
  sender: GitHubActor
}

input GitHubLabelEventSubscriptionInput {
  """The owner of the repo, the `octocat` in `octocat/Hello-World`."""
  repoOwner: String!

  """The name of the repo, the `Hello-World` in `octocat/Hello-World`."""
  repoName: String!
}

"""Shallow version of the label object when the label has been deleted."""
type GitHubLabelEventSubscriptionDeletedLabel {
  """"""
  databaseId: Int!

  """"""
  id: ID!

  """"""
  url: String

  """"""
  name: String

  """"""
  color: String

  """"""
  default: Boolean
}

type GitHubLabelEventSubscriptionColorChanges {
  """The previous version of the color if the action was `EDITED`."""
  from: String
}

type GitHubLabelEventSubscriptionNameChanges {
  """The previous version of the name if the action was `EDITED`."""
  from: String
}

type GitHubLabelEventSubscriptionChanges {
  """The changes to the name if the action was `EDITED`"""
  name: GitHubLabelEventSubscriptionNameChanges

  """The changes to the color if the action was `EDITED`"""
  color: GitHubLabelEventSubscriptionColorChanges
}

"""The action that was performed that triggered an label event."""
enum GitHubLabelEventSubscriptionActionEnum {
  CREATED
  EDITED
  DELETED
}

type GitHubLabelEventSubscriptionPayload {
  """The action that was performed."""
  action: GitHubLabelEventSubscriptionActionEnum

  """The changes to the label if the action was `EDITED`."""
  changes: GitHubLabelEventSubscriptionChanges

  """The label that was created or updated."""
  label: GitHubLabel

  """A shallow version of the label, if the label was deleted."""
  deletedLabel: GitHubLabelEventSubscriptionDeletedLabel

  """The raw body of the event from GitHub in JSON format."""
  raw: JSON!

  """The repository for the event."""
  repository: GitHubRepository

  """The actor that triggered the event."""
  sender: GitHubActor
}

input GitHubIssuesEventSubscriptionInput {
  """The owner of the repo, the `octocat` in `octocat/Hello-World`."""
  repoOwner: String!

  """The name of the repo, the `Hello-World` in `octocat/Hello-World`."""
  repoName: String!
}

"""Shallow version of the issue object when the issue has been deleted."""
type GitHubIssuesEventSubscriptionDeletedIssue {
  """"""
  url: String

  """"""
  repositoryUrl: String

  """"""
  databaseId: Int!

  """"""
  id: ID!

  """"""
  number: Int!

  """"""
  title: String

  """"""
  state: String

  """"""
  locked: Boolean

  """"""
  createdAt: String

  """"""
  updatedAt: String

  """"""
  closedAt: String

  """"""
  authorAssociation: String

  """"""
  body: String
}

type GitHubIssuesEventSubscriptionTitleChanges {
  """The previous version of the title if the action was `EDITED`."""
  from: String
}

type GitHubIssuesEventSubscriptionChanges {
  """The changes to the title if the action was `EDITED`"""
  title: GitHubIssuesEventSubscriptionTitleChanges

  """The changes to the body if the action was `EDITED`"""
  body: GitHubIssuesEventSubscriptionBodyChanges
}

"""The action that was performed that triggered an issues event."""
enum GitHubIssuesEventSubscriptionActionEnum {
  OPENED
  EDITED
  DELETED
  PINNED
  UNPINNED
  CLOSED
  REOPENED
  ASSIGNED
  UNASSIGNED
  LABELED
  UNLABELED
  LOCKED
  UNLOCKED
  TRANSFERRED
  MILESTONED
  DEMILESTONED
}

type GitHubIssuesEventSubscriptionPayload {
  """The action that was performed."""
  action: GitHubIssuesEventSubscriptionActionEnum

  """The changes to the issue if the action was `EDITED`."""
  changes: GitHubIssuesEventSubscriptionChanges

  """The optional user who was assigned or unassigned from the issue."""
  assignee: GitHubUser

  """The optional label that was added or removed from the issue."""
  label: GitHubLabel

  """The issue itself."""
  issue: GitHubIssue

  """A shallow version of the issue, if the issue was deleted."""
  deletedIssue: GitHubIssuesEventSubscriptionDeletedIssue

  """The raw body of the event from GitHub in JSON format."""
  raw: JSON!

  """The repository for the event."""
  repository: GitHubRepository

  """The actor that triggered the event."""
  sender: GitHubActor
}

input GitHubIssueCommentEventSubscriptionInput {
  """The owner of the repo, the `octocat` in `octocat/Hello-World`."""
  repoOwner: String!

  """The name of the repo, the `Hello-World` in `octocat/Hello-World`."""
  repoName: String!
}

"""
Shallow version of the comment object when the comment has been deleted.
"""
type GitHubIssuesEventSubscriptionDeletedIssueComment {
  """"""
  databaseId: Int!

  """"""
  id: ID!

  """"""
  createdAt: String

  """"""
  updatedAt: String

  """"""
  authorAssociation: String

  """"""
  body: String
}

type GitHubIssuesEventSubscriptionBodyChanges {
  """The previous version of the body if the action was `EDITED`."""
  from: String
}

type GitHubIssueCommentEventSubscriptionChanges {
  """The changes to the body if the action was `EDITED`"""
  body: GitHubIssuesEventSubscriptionBodyChanges
}

"""The action that was performed that triggered an issue_comment event."""
enum GitHubIssueCommentEventSubscriptionActionEnum {
  CREATED
  EDITED
  DELETED
}

type GitHubIssueCommentEventSubscriptionPayload {
  """The action that was performed."""
  action: GitHubIssueCommentEventSubscriptionActionEnum

  """The changes to the issue if the action was `EDITED`."""
  changes: GitHubIssueCommentEventSubscriptionChanges

  """The issue the comment belongs to."""
  issue: GitHubIssue

  """
  The pull request the comment belongs to, if this is a comment on a pull request
  """
  pullRequest: GitHubPullRequest

  """The comment itself."""
  comment: GitHubIssueComment

  """A shallow version of the comment, if the issue was deleted."""
  deletedComment: GitHubIssuesEventSubscriptionDeletedIssueComment

  """The raw body of the event from GitHub in JSON format."""
  raw: JSON!

  """The repository for the event."""
  repository: GitHubRepository

  """The actor that triggered the event."""
  sender: GitHubActor
}

input GitHubForkEventSubscriptionInput {
  """The owner of the repo, the `octocat` in `octocat/Hello-World`."""
  repoOwner: String!

  """The name of the repo, the `Hello-World` in `octocat/Hello-World`."""
  repoName: String!
}

type GitHubForkEventSubscriptionPayload {
  """The created repository."""
  forkee: GitHubRepository

  """The raw body of the event from GitHub in JSON format."""
  raw: JSON!

  """The repository for the event."""
  repository: GitHubRepository

  """The actor that triggered the event."""
  sender: GitHubActor
}

input GitHubDeploymentStatusEventSubscriptionInput {
  """The owner of the repo, the `octocat` in `octocat/Hello-World`."""
  repoOwner: String!

  """The name of the repo, the `Hello-World` in `octocat/Hello-World`."""
  repoName: String!
}

type GitHubDeploymentStatusEventSubscriptionPayload {
  """The deployment status."""
  deploymentStatus: GitHubDeploymentStatus

  """The deployment that the status is associated with."""
  deployment: GitHubDeployment

  """The raw body of the event from GitHub in JSON format."""
  raw: JSON!

  """The repository for the event."""
  repository: GitHubRepository

  """The actor that triggered the event."""
  sender: GitHubActor
}

input GitHubDeploymentEventSubscriptionInput {
  """The owner of the repo, the `octocat` in `octocat/Hello-World`."""
  repoOwner: String!

  """The name of the repo, the `Hello-World` in `octocat/Hello-World`."""
  repoName: String!
}

type GitHubDeploymentEventSubscriptionPayload {
  """The deployment."""
  deployment: GitHubDeployment

  """The raw body of the event from GitHub in JSON format."""
  raw: JSON!

  """The repository for the event."""
  repository: GitHubRepository

  """The actor that triggered the event."""
  sender: GitHubActor
}

input GitHubDeleteEventSubscriptionInput {
  """The owner of the repo, the `octocat` in `octocat/Hello-World`."""
  repoOwner: String!

  """The name of the repo, the `Hello-World` in `octocat/Hello-World`."""
  repoName: String!
}

type GitHubDeleteEventSubscriptionPayload {
  """The fully-qualified name of the git ref that was deleted"""
  ref: String

  """The object that was deleted. Can be `branch` or `tag`."""
  refType: String

  """The raw body of the event from GitHub in JSON format."""
  raw: JSON!

  """The repository for the event."""
  repository: GitHubRepository

  """The actor that triggered the event."""
  sender: GitHubActor
}

input GitHubCreateEventSubscriptionInput {
  """The owner of the repo, the `octocat` in `octocat/Hello-World`."""
  repoOwner: String!

  """The name of the repo, the `Hello-World` in `octocat/Hello-World`."""
  repoName: String!
}

type GitHubCreateEventSubscriptionPayload {
  """The git ref that was created."""
  ref: GitHubRef

  """The raw body of the event from GitHub in JSON format."""
  raw: JSON!

  """The repository for the event."""
  repository: GitHubRepository

  """The actor that triggered the event."""
  sender: GitHubActor
}

input GitHubCommitCommentEventSubscriptionInput {
  """The owner of the repo, the `octocat` in `octocat/Hello-World`."""
  repoOwner: String!

  """The name of the repo, the `Hello-World` in `octocat/Hello-World`."""
  repoName: String!
}

type GitHubCommitCommentEventSubscriptionPayload {
  """The comment itself."""
  comment: GitHubCommitComment

  """The raw body of the event from GitHub in JSON format."""
  raw: JSON!

  """The repository for the event."""
  repository: GitHubRepository

  """The actor that triggered the event."""
  sender: GitHubActor
}

"""Namespace for GitHub subscriptions."""
type GithubSubscriptionRoot {
  """Subscribe to commit comments on a repository."""
  commitCommentEvent(input: GitHubCommitCommentEventSubscriptionInput!): GitHubCommitCommentEventSubscriptionPayload!

  """
  Subscribe to new branches or tags on a repository.
  
  Note: You will not receive a payload for this event when you push more than three tags at once.
  
  """
  createEvent(input: GitHubCreateEventSubscriptionInput!): GitHubCreateEventSubscriptionPayload!

  """
  Triggers when a branch or tag is deleted from a repository.
  
  Note: You will not receive a payload for this event when you delete more than three tags at once.
  
  """
  deleteEvent(input: GitHubDeleteEventSubscriptionInput!): GitHubDeleteEventSubscriptionPayload!

  """Subscribe to new deployments."""
  deploymentEvent(input: GitHubDeploymentEventSubscriptionInput!): GitHubDeploymentEventSubscriptionPayload!

  """Subscribe to new deployment statuses."""
  deploymentStatusEvent(input: GitHubDeploymentStatusEventSubscriptionInput!): GitHubDeploymentStatusEventSubscriptionPayload!

  """Triggers when a user forks the repository."""
  forkEvent(input: GitHubForkEventSubscriptionInput!): GitHubForkEventSubscriptionPayload!

  """Subscribe to issue comments on a repository."""
  issueCommentEvent(input: GitHubIssueCommentEventSubscriptionInput!): GitHubIssueCommentEventSubscriptionPayload!

  """Subscribe to issues on a repository."""
  issuesEvent(input: GitHubIssuesEventSubscriptionInput!): GitHubIssuesEventSubscriptionPayload!

  """
  Subscribe to labels on a repository. Triggered when a label is created, updated, or deleted.
  """
  labelEvent(input: GitHubLabelEventSubscriptionInput!): GitHubLabelEventSubscriptionPayload!

  """
  Subscribe to milestones on a repository. Triggered when a milestone is created, closed, opened, edited, or deleted.
  """
  milestoneEvent(input: GitHubMilestoneEventSubscriptionInput!): GitHubMilestoneEventSubscriptionPayload!

  """
  Subscribe to project cards on a repository. Triggered when a project card is created, edited, moved, converted to an issue, or deleted.
  """
  projectCardEvent(input: GitHubProjectCardEventSubscriptionInput!): GitHubProjectCardEventSubscriptionPayload!

  """
  Subscribe to project columns on a repository. Triggered when a project column is created, updated, moved, or deleted.
  """
  projectColumnEvent(input: GitHubProjectColumnEventSubscriptionInput!): GitHubProjectColumnEventSubscriptionPayload!

  """
  Subscribe to projects on a repository. Triggered when a project is created, updated, closed, reopened, or deleted.
  """
  projectEvent(input: GitHubProjectEventSubscriptionInput!): GitHubProjectEventSubscriptionPayload!

  """
  Subscribe to pull requests on a repository. Triggered when a pull request is assigned, unassigned, labeled, unlabeled, opened, edited, closed, reopened, synchronize, ready_for_review, locked, unlocked or when a pull request review is requested or removed.
  """
  pullRequestEvent(input: GitHubPullRequestEventSubscriptionInput!): GitHubPullRequestEventSubscriptionPayload!

  """
  Subscribe to pull request review comments on a repository. Triggered when a pull request review comment is created, edited, or deleted.
  """
  pullRequestReviewCommentEvent(input: GitHubPullRequestReviewCommentEventSubscriptionInput!): GitHubPullRequestReviewCommentEventSubscriptionPayload!

  """
  Subscribe to pull request reviews on a repository. Triggered when a pull request review is submitted, edited, or dismissed.
  """
  pullRequestReviewEvent(input: GitHubPullRequestReviewEventSubscriptionInput!): GitHubPullRequestReviewEventSubscriptionPayload!

  """
  Subscribe to pushes to a repository. Branch pushes and repository tag pushes also trigger the subscription.
  """
  pushEvent(input: GitHubPushEventSubscriptionInput!): GitHubPushEventSubscriptionPayload!

  """
  Subscribe to releases from a repository. Triggered when a release is published, unpublished, created, edited, deleted, released, or prereleased.
  """
  releaseEvent(input: GitHubReleaseEventSubscriptionInput!): GitHubReleaseEventSubscriptionPayload!

  """
  Subscribe to stars on a repository. Triggered when a star is created or deleted.
  """
  starEvent(input: GitHubStarEventSubscriptionInput!): GitHubStarEventSubscriptionPayload!

  """Subscribe to a commit's status."""
  statusEvent(input: GitHubStatusEventSubscriptionInput!): GitHubStatusEventSubscriptionPayload!
}

"""
Whether to include information about the API requests that OneGraph made to fulfill the query in the `extensions` field.
"""
enum OneGraphSubscriptionShowMetricsEnum {
  """Don't include any info"""
  NONE

  """Include summary info."""
  SUMMARY

  """Include summary metrics and full requests."""
  FULL_REQUESTS
}

input OneGraphSubscriptionPollScheduleRepeatInput {
  """How many minutes to wait before re-running the underlying query"""
  minutes: Int!
}

input OneGraphSubscriptionPollScheduleInput {
  """"""
  every: OneGraphSubscriptionPollScheduleRepeatInput!
}

"""

Optional authentication for making requests to the Gmail API if you want
to use a custom gmail app instead of OneGraph's built-in app.

Subscriptions are long-lived, so a refresh token must also be provided.

If you use this arg, make sure you've updated OneGraph to use your OAuth credentials in the dashboard.

"""
input OneGraphSubscriptionGmailAuthArg {
  refreshToken: String!
  accessToken: String!
}

"""Optional auth arg if not using OneGraph's built-in authentication"""
input OneGraphSubscriptionAuthArg {
  twilio: OneGraphTwilioAuth

  """
  
  Optional authentication for making requests to the Gmail API if you want
  to use a custom gmail app instead of OneGraph's built-in app.
  
  Subscriptions are long-lived, so a refresh token must also be provided.
  
  If you use this arg, make sure you've updated OneGraph to use your OAuth credentials in the dashboard.
  
  """
  gmail: OneGraphSubscriptionGmailAuthArg
}

type OneGraphSubscriptionPollingQueryDiffPrevious {
  payload: JSON
  createdAt: String
}

type OneGraphSubscriptionPollingQueryDiff {
  previous: OneGraphSubscriptionPollingQueryDiffPrevious
}

type PollingQuery {
  query: Query!
  diff: OneGraphSubscriptionPollingQueryDiff!
}

type Subscription {
  poll(
    """
    Whether to include information about the API requests that OneGraph made to fulfill the query in the `extensions` field.
    """
    showMetrics: OneGraphSubscriptionShowMetricsEnum

    """
    When set, OneGraph will run the query on the specified schedule, but will only deliver new payloads when the underlying query result has changed from the previous result. Use this when you only want to react to changes.
    
    When unset, OneGraph will run the query on the specified schedule, and will deliver a new payload regardless of whether it has changed from the previous runs. Use this when you want to reliably drive a process at a regular interval or monitor a value over time.
    """
    onlyTriggerWhenPayloadChanged: Boolean = true
    schedule: OneGraphSubscriptionPollScheduleInput!
    secret: OneGraphSubscriptionSecretInput
    auth: OneGraphSubscriptionAuthArg

    """
    Set to true to have OneGraph store payloads for this subscription. They payloads are available on the OneGraph dashboard from the app's `Subscription` page. Use this field when creating a subscription over a websocket that should only be retained and not sent over the websocket or a webhook.
    """
    retainedOnly: Boolean
    retainPayloads: Boolean

    """
    Webhook URL that will receive a POST request every time there is new data for the subscription. The endpoint should return a 200 within 30 seconds to be considered successful. If the request does not succeed, it will be retried.
    """
    webhookUrl: String
  ): PollingQuery!
  github(
    """
    Whether to include information about the API requests that OneGraph made to fulfill the query in the `extensions` field.
    """
    showMetrics: OneGraphSubscriptionShowMetricsEnum
    secret: OneGraphSubscriptionSecretInput
    auth: OneGraphSubscriptionAuthArg

    """
    Set to true when creating a subscription over a websocket that should only be retained and not sent over the websocket or a webhook. If set to true, `retainPayloads` must not be set to false.
    """
    retainedOnly: Boolean

    """
    Set to true to have OneGraph store payloads for this subscription. They payloads are available on the OneGraph dashboard from the app's `Subscription` page.
    """
    retainPayloads: Boolean

    """
    Webhook URL that will receive a POST request every time there is new data for the subscription. The endpoint should return a 200 within 30 seconds to be considered successful. If the request does not succeed, it will be retried.
    """
    webhookUrl: String
  ): GithubSubscriptionRoot!
}

input GitHubCreateRepositoryTempInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The description of the repository."""
  description: String

  """The name of the repository."""
  repoName: String!
}

type GitHubCreateRepositoryTempResponsePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  repository: GitHubRepository!
}

input GitHubCreateIssueTempInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """
  Logins for Users to assign to this issue. NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise.
  """
  assignees: [String!]

  """
  Labels to associate with this issue. NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise.
  """
  labels: [String!]

  """
  The number of the milestone to associate this issue with. NOTE: Only users with push access can set the milestone for new issues. The milestone is silently dropped otherwise.
  """
  milestone: Int

  """The contents of the issue."""
  body: String

  """The title of the issue."""
  title: String!

  """The name of the repository."""
  repoName: String!

  """The login field of a user or organization."""
  repoOwner: String!
}

type GitHubCreateIssueTempResponsePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  issue: GitHubIssue!
}

input GitHubCreateMilestone_oneGraphInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """
  The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
  """
  dueOn: String

  """A description of the milestone."""
  description: String

  """
  The state of the milestone. Either `OPEN` or `CLOSED`. Default: OPEN
  
  """
  state: GitHubMilestoneState_oneGraph = OPEN

  """The title of the milestone."""
  title: String!

  """The name of the repository."""
  repoName: String!

  """The login field of a user or organization."""
  repoOwner: String!
}

type GitHubCreateMilestone_oneGraphResponsePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  milestone: GitHubMilestone!
}

"""Identifies the state of the milestone."""
enum GitHubMilestoneState_oneGraph {
  """A milestone that is still open."""
  OPEN

  """A milestone that has been closed."""
  CLOSED
}

input GitHubUpdateMilestone_oneGraphInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """
  The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
  """
  dueOn: String

  """A description of the milestone."""
  description: String

  """
  The state of the milestone. Either `OPEN` or `CLOSED`. Default: OPEN
  
  """
  state: GitHubMilestoneState_oneGraph

  """The title of the milestone."""
  title: String

  """The ID of the milestone to update."""
  milestoneId: String!
}

type GitHubUpdateMilestone_oneGraphResponsePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  milestone: GitHubMilestone!
}

input GitHubDeleteMilestone_oneGraphInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The ID of the milestone to delete."""
  milestoneId: String!
}

type GitHubDeleteMilestone_oneGraphResponsePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  repository: GitHubRepository!
}

input GitHubCreateBranch_oneGraphInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """
  The sha of the commit to create the branch from. If omitted, will default to the current sha of the `master` branch
  """
  sha: String

  """The name of the branch to create."""
  branchName: String!

  """
  The existing branch to create the new branch from, defaults to `master`.
  """
  from: String = "master"

  """The name of the repository."""
  repoName: String!

  """The login field of a user or organization."""
  repoOwner: String!
}

type GitHubCreateBranch_oneGraphResponsePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  ref: GitHubRef!
}

input GitHubCreateOrUpdateFileContent_oneGraphCommitterInput {
  """The name of the author or committer of the commit."""
  name: String

  """The email of the author or committer of the commit."""
  email: String
}

input GitHubCreateOrUpdateFileContent_oneGraphInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The commit author."""
  author: GitHubCreateOrUpdateFileContent_oneGraphCommitterInput

  """
  The updated content encoded in base64 of the file. This argument cannot be used with `plainContent`.
  """
  base64Content: String

  """
  The updated content in plain-text of the file. This argument cannot be used with `base64Content`.
  """
  plainContent: String

  """The commit message to use when updating this file."""
  message: String!

  """
  The sha of the file to be updated (if updating a file). If this doesn't match, the update mutation will be rejected to prevent updating the wrong version of the file.
  """
  existingFileSha: String

  """The name of the branch to update the file on, must already exist."""
  branchName: String = "master"

  """
  The path to the file to create or update (without a leading slash), e.g. `README.md`.
  """
  path: String!

  """The name of the repository."""
  repoName: String!

  """The login field of a user or organization."""
  repoOwner: String!
}

type GitHubCreateOrUpdateFileContent_oneGraphResponsePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  commit: GitHubCommit!
}

input GitHubCreatePullRequest_oneGraphInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """Indicates whether maintainers can modify the pull request."""
  maintainerCanModify: Boolean

  """The contents of the pull request."""
  body: String

  """
  The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository.
  """
  destinationBranch: String = "master"

  """
  The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`.
  """
  sourceBranch: String!

  """The title of the pull request."""
  title: String!

  """The name of the repository."""
  repoName: String!

  """The login field of a user or organization."""
  repoOwner: String!
}

type GitHubCreatePullRequest_oneGraphResponsePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  pullRequest: GitHubPullRequest!
}

input GitHubCreateFork_oneGraphInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """
  Optional parameter to specify the organization name if forking into an organization. By default a fork will be created under the currently authenticated user.
  """
  organization: String

  """The name of the repository."""
  repoName: String!

  """The login field of a user or organization."""
  repoOwner: String!
}

type GitHubCreateFork_oneGraphResponsePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  repository: GitHubRepository!
}

input GitHubMergePullRequest_oneGraphInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """
  Merge method to use. Possible values are merge, squash or rebase. Default is merge
  """
  mergeMethod: String = "merge"

  """
  SHA that pull request head must match to allow merge. You can find the sha under the `headRef.oid` field of the Pull Request
  """
  sha: String!

  """Extra detail to append to automatic commit message."""
  commitMessage: String

  """Title for the automatic commit message."""
  commitTitle: String!

  """The pull request number to merge"""
  number: Int!

  """The name of the repository."""
  repoName: String!

  """The login field of a user or organization."""
  repoOwner: String!
}

type GitHubMergePullRequest_oneGraphResponsePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  pullRequest: GitHubPullRequest!
}

input GitHubUpdateAuthenticatedUser_oneGraphInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The new Twitter username of the user."""
  twitterUsername: String

  """The new short biography of the user."""
  bio: String

  """The new hiring availability of the user."""
  hireable: Boolean

  """The new location of the user."""
  location: String

  """The new company of the user."""
  company: String

  """The new blog URL of the user."""
  blog: String

  """The publicly visible email address of the user."""
  email: String

  """The new name of the user."""
  name: String
}

type GitHubUpdateAuthenticatedUser_oneGraphResponsePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  updatedUser: GitHubUser
}

"""
Make a REST API call to the GitHub API.

OneGraph will inject the auth params for the API call.

Use this as an escape hatch if OneGraph does not yet support functionality of the underlying API.
"""
type GithubPassthroughMutation {
  """
  Make a POST request to the GitHub API. Use this as an escape hatch if OneGraph does not yet support functionality of the underlying API.
  """
  post(
    """The body to send. Only provide one of body or jsonBody."""
    body: String

    """
    The JSON-encoded body to send. This will automatically set the Content-Type header to `application/json`. Only provide one of body or jsonBody.
    """
    jsonBody: JSON

    """The Accept header to set in the API."""
    accept: String = "application/json"

    """The Content-Type header to set in the API."""
    contentType: String = "application/json"

    """
    Whether to send an unauthenticated request to the API. Defaults to false.
    """
    allowUnauthenticated: Boolean = false

    """
    The query for the URL as a percent-encoded string, e.g. `first=10&sort=popular`
    """
    queryString: String

    """
    The query for the URL, as a list of key-value pairs, e.g. `[["first", "10"], ["sort", "popular"]]`
    """
    query: [[String!]!]

    """The path of the URL, e.g. `/posts`."""
    path: String!
  ): PassthroughResult!

  """
  Make a PUT request to the GitHub API. Use this as an escape hatch if OneGraph does not yet support functionality of the underlying API.
  """
  put(
    """The body to send. Only provide one of body or jsonBody."""
    body: String

    """
    The JSON-encoded body to send. This will automatically set the Content-Type header to `application/json`. Only provide one of body or jsonBody.
    """
    jsonBody: JSON

    """The Accept header to set in the API."""
    accept: String = "application/json"

    """The Content-Type header to set in the API."""
    contentType: String = "application/json"

    """
    Whether to send an unauthenticated request to the API. Defaults to false.
    """
    allowUnauthenticated: Boolean = false

    """
    The query for the URL as a percent-encoded string, e.g. `first=10&sort=popular`
    """
    queryString: String

    """
    The query for the URL, as a list of key-value pairs, e.g. `[["first", "10"], ["sort", "popular"]]`
    """
    query: [[String!]!]

    """The path of the URL, e.g. `/posts`."""
    path: String!
  ): PassthroughResult!

  """
  Make a PATCH request to the GitHub API. Use this as an escape hatch if OneGraph does not yet support functionality of the underlying API.
  """
  patch(
    """The body to send. Only provide one of body or jsonBody."""
    body: String

    """
    The JSON-encoded body to send. This will automatically set the Content-Type header to `application/json`. Only provide one of body or jsonBody.
    """
    jsonBody: JSON

    """The Accept header to set in the API."""
    accept: String = "application/json"

    """The Content-Type header to set in the API."""
    contentType: String = "application/json"

    """
    Whether to send an unauthenticated request to the API. Defaults to false.
    """
    allowUnauthenticated: Boolean = false

    """
    The query for the URL as a percent-encoded string, e.g. `first=10&sort=popular`
    """
    queryString: String

    """
    The query for the URL, as a list of key-value pairs, e.g. `[["first", "10"], ["sort", "popular"]]`
    """
    query: [[String!]!]

    """The path of the URL, e.g. `/posts`."""
    path: String!
  ): PassthroughResult!

  """
  Make a DELETE request to the GitHub API. Use this as an escape hatch if OneGraph does not yet support functionality of the underlying API.
  """
  delete(
    """The body to send. Only provide one of body or jsonBody."""
    body: String

    """
    The JSON-encoded body to send. This will automatically set the Content-Type header to `application/json`. Only provide one of body or jsonBody.
    """
    jsonBody: JSON

    """The Accept header to set in the API."""
    accept: String = "application/json"

    """The Content-Type header to set in the API."""
    contentType: String = "application/json"

    """
    Whether to send an unauthenticated request to the API. Defaults to false.
    """
    allowUnauthenticated: Boolean = false

    """
    The query for the URL as a percent-encoded string, e.g. `first=10&sort=popular`
    """
    queryString: String

    """
    The query for the URL, as a list of key-value pairs, e.g. `[["first", "10"], ["sort", "popular"]]`
    """
    query: [[String!]!]

    """The path of the URL, e.g. `/posts`."""
    path: String!
  ): PassthroughResult!
}

"""Autogenerated input type of VerifyVerifiableDomain"""
input GitHubVerifyVerifiableDomainInput {
  """The ID of the verifiable domain to verify."""
  id: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of VerifyVerifiableDomain"""
type GitHubVerifyVerifiableDomainPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The verifiable domain that was verified."""
  domain: GitHubVerifiableDomain
}

"""Autogenerated input type of UpdateTopics"""
input GitHubUpdateTopicsInput {
  """The Node ID of the repository."""
  repositoryId: ID!

  """An array of topic names."""
  topicNames: [String!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateTopics"""
type GitHubUpdateTopicsPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """Names of the provided topics that are not valid."""
  invalidTopicNames: [String!]

  """The updated repository."""
  repository: GitHubRepository
}

"""Autogenerated input type of UpdateTeamDiscussionComment"""
input GitHubUpdateTeamDiscussionCommentInput {
  """The ID of the comment to modify."""
  id: ID!

  """The updated text of the comment."""
  body: String!

  """The current version of the body content."""
  bodyVersion: String

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateTeamDiscussionComment"""
type GitHubUpdateTeamDiscussionCommentPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The updated comment."""
  teamDiscussionComment: GitHubTeamDiscussionComment
}

"""Autogenerated input type of UpdateTeamDiscussion"""
input GitHubUpdateTeamDiscussionInput {
  """The Node ID of the discussion to modify."""
  id: ID!

  """The updated title of the discussion."""
  title: String

  """The updated text of the discussion."""
  body: String

  """
  The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
  """
  bodyVersion: String

  """If provided, sets the pinned state of the updated discussion."""
  pinned: Boolean

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateTeamDiscussion"""
type GitHubUpdateTeamDiscussionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The updated discussion."""
  teamDiscussion: GitHubTeamDiscussion
}

"""Autogenerated input type of UpdateSubscription"""
input GitHubUpdateSubscriptionInput {
  """The Node ID of the subscribable object to modify."""
  subscribableId: ID!

  """The new state of the subscription."""
  state: GitHubSubscriptionState!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateSubscription"""
type GitHubUpdateSubscriptionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The input subscribable entity."""
  subscribable: GitHubSubscribable
}

"""Autogenerated input type of UpdateRepository"""
input GitHubUpdateRepositoryInput {
  """The ID of the repository to update."""
  repositoryId: ID!

  """The new name of the repository."""
  name: String

  """
  A new description for the repository. Pass an empty string to erase the existing description.
  """
  description: String

  """
  Whether this repository should be marked as a template such that anyone who can access it can create new repositories with the same files and directory structure.
  """
  template: Boolean

  """
  The URL for a web page about this repository. Pass an empty string to erase the existing URL.
  """
  homepageUrl: GitHubURI

  """Indicates if the repository should have the wiki feature enabled."""
  hasWikiEnabled: Boolean

  """Indicates if the repository should have the issues feature enabled."""
  hasIssuesEnabled: Boolean

  """
  Indicates if the repository should have the project boards feature enabled.
  """
  hasProjectsEnabled: Boolean

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateRepository"""
type GitHubUpdateRepositoryPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The updated repository."""
  repository: GitHubRepository
}

"""Autogenerated input type of UpdateRef"""
input GitHubUpdateRefInput {
  """The Node ID of the Ref to be updated."""
  refId: ID!

  """The GitObjectID that the Ref shall be updated to target."""
  oid: GitHubGitObjectID!

  """Permit updates of branch Refs that are not fast-forwards?"""
  force: Boolean = false

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateRef"""
type GitHubUpdateRefPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The updated Ref."""
  ref: GitHubRef
}

"""Autogenerated input type of UpdatePullRequestReviewComment"""
input GitHubUpdatePullRequestReviewCommentInput {
  """The Node ID of the comment to modify."""
  pullRequestReviewCommentId: ID!

  """The text of the comment."""
  body: String!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdatePullRequestReviewComment"""
type GitHubUpdatePullRequestReviewCommentPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The updated comment."""
  pullRequestReviewComment: GitHubPullRequestReviewComment
}

"""Autogenerated input type of UpdatePullRequestReview"""
input GitHubUpdatePullRequestReviewInput {
  """The Node ID of the pull request review to modify."""
  pullRequestReviewId: ID!

  """The contents of the pull request review body."""
  body: String!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdatePullRequestReview"""
type GitHubUpdatePullRequestReviewPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The updated pull request review."""
  pullRequestReview: GitHubPullRequestReview
}

enum GitHubPullRequestUpdateState {
  """A pull request that is still open."""
  OPEN

  """A pull request that has been closed without being merged."""
  CLOSED
}

"""Autogenerated input type of UpdatePullRequest"""
input GitHubUpdatePullRequestInput {
  """The Node ID of the pull request."""
  pullRequestId: ID!

  """
  The name of the branch you want your changes pulled into. This should be an existing branch
  on the current repository.
  
  """
  baseRefName: String

  """The title of the pull request."""
  title: String

  """The contents of the pull request."""
  body: String

  """The target state of the pull request."""
  state: GitHubPullRequestUpdateState

  """Indicates whether maintainers can modify the pull request."""
  maintainerCanModify: Boolean

  """An array of Node IDs of users for this pull request."""
  assigneeIds: [ID!]

  """The Node ID of the milestone for this pull request."""
  milestoneId: ID

  """An array of Node IDs of labels for this pull request."""
  labelIds: [ID!]

  """An array of Node IDs for projects associated with this pull request."""
  projectIds: [ID!]

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdatePullRequest"""
type GitHubUpdatePullRequestPayload {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The updated pull request."""
  pullRequest: GitHubPullRequest
}

"""Autogenerated input type of UpdateProjectColumn"""
input GitHubUpdateProjectColumnInput {
  """The ProjectColumn ID to update."""
  projectColumnId: ID!

  """The name of project column."""
  name: String!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateProjectColumn"""
type GitHubUpdateProjectColumnPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The updated project column."""
  projectColumn: GitHubProjectColumn
}

"""Autogenerated input type of UpdateProjectCard"""
input GitHubUpdateProjectCardInput {
  """The ProjectCard ID to update."""
  projectCardId: ID!

  """Whether or not the ProjectCard should be archived"""
  isArchived: Boolean

  """The note of ProjectCard."""
  note: String

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateProjectCard"""
type GitHubUpdateProjectCardPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The updated ProjectCard."""
  projectCard: GitHubProjectCard
}

"""Autogenerated input type of UpdateProject"""
input GitHubUpdateProjectInput {
  """The Project ID to update."""
  projectId: ID!

  """The name of project."""
  name: String

  """The description of project."""
  body: String

  """Whether the project is open or closed."""
  state: GitHubProjectState

  """Whether the project is public or not."""
  public: Boolean

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateProject"""
type GitHubUpdateProjectPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The updated project."""
  project: GitHubProject
}

"""Autogenerated input type of UpdateNotificationRestrictionSetting"""
input GitHubUpdateNotificationRestrictionSettingInput {
  """
  The ID of the owner on which to set the restrict notifications setting.
  """
  ownerId: ID!

  """The value for the restrict notifications setting."""
  settingValue: GitHubNotificationRestrictionSettingValue!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateNotificationRestrictionSetting"""
type GitHubUpdateNotificationRestrictionSettingPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The owner on which the setting was updated."""
  owner: GitHubVerifiableDomainOwner
}

"""Autogenerated input type of UpdateIssueComment"""
input GitHubUpdateIssueCommentInput {
  """The ID of the IssueComment to modify."""
  id: ID!

  """The updated text of the comment."""
  body: String!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateIssueComment"""
type GitHubUpdateIssueCommentPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The updated comment."""
  issueComment: GitHubIssueComment
}

"""Autogenerated input type of UpdateIssue"""
input GitHubUpdateIssueInput {
  """The ID of the Issue to modify."""
  id: ID!

  """The title for the issue."""
  title: String

  """The body for the issue description."""
  body: String

  """An array of Node IDs of users for this issue."""
  assigneeIds: [ID!]

  """The Node ID of the milestone for this issue."""
  milestoneId: ID

  """An array of Node IDs of labels for this issue."""
  labelIds: [ID!]

  """The desired issue state."""
  state: GitHubIssueState

  """An array of Node IDs for projects associated with this issue."""
  projectIds: [ID!]

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateIssue"""
type GitHubUpdateIssuePayload {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The issue."""
  issue: GitHubIssue
}

"""Autogenerated input type of UpdateIpAllowListEntry"""
input GitHubUpdateIpAllowListEntryInput {
  """The ID of the IP allow list entry to update."""
  ipAllowListEntryId: ID!

  """An IP address or range of addresses in CIDR notation."""
  allowListValue: String!

  """An optional name for the IP allow list entry."""
  name: String

  """
  Whether the IP allow list entry is active when an IP allow list is enabled.
  """
  isActive: Boolean!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateIpAllowListEntry"""
type GitHubUpdateIpAllowListEntryPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The IP allow list entry that was updated."""
  ipAllowListEntry: GitHubIpAllowListEntry
}

"""Autogenerated input type of UpdateIpAllowListEnabledSetting"""
input GitHubUpdateIpAllowListEnabledSettingInput {
  """The ID of the owner on which to set the IP allow list enabled setting."""
  ownerId: ID!

  """The value for the IP allow list enabled setting."""
  settingValue: GitHubIpAllowListEnabledSettingValue!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateIpAllowListEnabledSetting"""
type GitHubUpdateIpAllowListEnabledSettingPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The IP allow list owner on which the setting was updated."""
  owner: GitHubIpAllowListOwner
}

"""
Autogenerated input type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting
"""
input GitHubUpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput {
  """
  The ID of the enterprise on which to set the two factor authentication required setting.
  """
  enterpriseId: ID!

  """
  The value for the two factor authentication required setting on the enterprise.
  """
  settingValue: GitHubEnterpriseEnabledSettingValue!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""
Autogenerated return type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting
"""
type GitHubUpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """
  The enterprise with the updated two factor authentication required setting.
  """
  enterprise: GitHubEnterprise

  """
  A message confirming the result of updating the two factor authentication required setting.
  """
  message: String
}

"""Autogenerated input type of UpdateEnterpriseTeamDiscussionsSetting"""
input GitHubUpdateEnterpriseTeamDiscussionsSettingInput {
  """The ID of the enterprise on which to set the team discussions setting."""
  enterpriseId: ID!

  """The value for the team discussions setting on the enterprise."""
  settingValue: GitHubEnterpriseEnabledDisabledSettingValue!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateEnterpriseTeamDiscussionsSetting"""
type GitHubUpdateEnterpriseTeamDiscussionsSettingPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The enterprise with the updated team discussions setting."""
  enterprise: GitHubEnterprise

  """
  A message confirming the result of updating the team discussions setting.
  """
  message: String
}

"""Autogenerated input type of UpdateEnterpriseRepositoryProjectsSetting"""
input GitHubUpdateEnterpriseRepositoryProjectsSettingInput {
  """
  The ID of the enterprise on which to set the repository projects setting.
  """
  enterpriseId: ID!

  """The value for the repository projects setting on the enterprise."""
  settingValue: GitHubEnterpriseEnabledDisabledSettingValue!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateEnterpriseRepositoryProjectsSetting"""
type GitHubUpdateEnterpriseRepositoryProjectsSettingPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The enterprise with the updated repository projects setting."""
  enterprise: GitHubEnterprise

  """
  A message confirming the result of updating the repository projects setting.
  """
  message: String
}

"""Autogenerated input type of UpdateEnterpriseProfile"""
input GitHubUpdateEnterpriseProfileInput {
  """The Enterprise ID to update."""
  enterpriseId: ID!

  """The name of the enterprise."""
  name: String

  """The description of the enterprise."""
  description: String

  """The URL of the enterprise's website."""
  websiteUrl: String

  """The location of the enterprise."""
  location: String

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateEnterpriseProfile"""
type GitHubUpdateEnterpriseProfilePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The updated enterprise."""
  enterprise: GitHubEnterprise
}

"""
Autogenerated input type of UpdateEnterpriseOrganizationProjectsSetting
"""
input GitHubUpdateEnterpriseOrganizationProjectsSettingInput {
  """
  The ID of the enterprise on which to set the organization projects setting.
  """
  enterpriseId: ID!

  """The value for the organization projects setting on the enterprise."""
  settingValue: GitHubEnterpriseEnabledDisabledSettingValue!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""
Autogenerated return type of UpdateEnterpriseOrganizationProjectsSetting
"""
type GitHubUpdateEnterpriseOrganizationProjectsSettingPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The enterprise with the updated organization projects setting."""
  enterprise: GitHubEnterprise

  """
  A message confirming the result of updating the organization projects setting.
  """
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting
"""
input GitHubUpdateEnterpriseMembersCanViewDependencyInsightsSettingInput {
  """
  The ID of the enterprise on which to set the members can view dependency insights setting.
  """
  enterpriseId: ID!

  """
  The value for the members can view dependency insights setting on the enterprise.
  """
  settingValue: GitHubEnterpriseEnabledDisabledSettingValue!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""
Autogenerated return type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting
"""
type GitHubUpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """
  The enterprise with the updated members can view dependency insights setting.
  """
  enterprise: GitHubEnterprise

  """
  A message confirming the result of updating the members can view dependency insights setting.
  """
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting
"""
input GitHubUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput {
  """
  The ID of the enterprise on which to set the members can update protected branches setting.
  """
  enterpriseId: ID!

  """
  The value for the members can update protected branches setting on the enterprise.
  """
  settingValue: GitHubEnterpriseEnabledDisabledSettingValue!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""
Autogenerated return type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting
"""
type GitHubUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """
  The enterprise with the updated members can update protected branches setting.
  """
  enterprise: GitHubEnterprise

  """
  A message confirming the result of updating the members can update protected branches setting.
  """
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseMembersCanMakePurchasesSetting
"""
input GitHubUpdateEnterpriseMembersCanMakePurchasesSettingInput {
  """
  The ID of the enterprise on which to set the members can make purchases setting.
  """
  enterpriseId: ID!

  """
  The value for the members can make purchases setting on the enterprise.
  """
  settingValue: GitHubEnterpriseMembersCanMakePurchasesSettingValue!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""
Autogenerated return type of UpdateEnterpriseMembersCanMakePurchasesSetting
"""
type GitHubUpdateEnterpriseMembersCanMakePurchasesSettingPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The enterprise with the updated members can make purchases setting."""
  enterprise: GitHubEnterprise

  """
  A message confirming the result of updating the members can make purchases setting.
  """
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting
"""
input GitHubUpdateEnterpriseMembersCanInviteCollaboratorsSettingInput {
  """
  The ID of the enterprise on which to set the members can invite collaborators setting.
  """
  enterpriseId: ID!

  """
  The value for the members can invite collaborators setting on the enterprise.
  """
  settingValue: GitHubEnterpriseEnabledDisabledSettingValue!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""
Autogenerated return type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting
"""
type GitHubUpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """
  The enterprise with the updated members can invite collaborators setting.
  """
  enterprise: GitHubEnterprise

  """
  A message confirming the result of updating the members can invite collaborators setting.
  """
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting
"""
input GitHubUpdateEnterpriseMembersCanDeleteRepositoriesSettingInput {
  """
  The ID of the enterprise on which to set the members can delete repositories setting.
  """
  enterpriseId: ID!

  """
  The value for the members can delete repositories setting on the enterprise.
  """
  settingValue: GitHubEnterpriseEnabledDisabledSettingValue!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""
Autogenerated return type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting
"""
type GitHubUpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """
  The enterprise with the updated members can delete repositories setting.
  """
  enterprise: GitHubEnterprise

  """
  A message confirming the result of updating the members can delete repositories setting.
  """
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseMembersCanDeleteIssuesSetting
"""
input GitHubUpdateEnterpriseMembersCanDeleteIssuesSettingInput {
  """
  The ID of the enterprise on which to set the members can delete issues setting.
  """
  enterpriseId: ID!

  """The value for the members can delete issues setting on the enterprise."""
  settingValue: GitHubEnterpriseEnabledDisabledSettingValue!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""
Autogenerated return type of UpdateEnterpriseMembersCanDeleteIssuesSetting
"""
type GitHubUpdateEnterpriseMembersCanDeleteIssuesSettingPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The enterprise with the updated members can delete issues setting."""
  enterprise: GitHubEnterprise

  """
  A message confirming the result of updating the members can delete issues setting.
  """
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseMembersCanCreateRepositoriesSetting
"""
input GitHubUpdateEnterpriseMembersCanCreateRepositoriesSettingInput {
  """
  The ID of the enterprise on which to set the members can create repositories setting.
  """
  enterpriseId: ID!

  """
  Value for the members can create repositories setting on the enterprise. This or the granular public/private/internal allowed fields (but not both) must be provided.
  """
  settingValue: GitHubEnterpriseMembersCanCreateRepositoriesSettingValue

  """
  When false, allow member organizations to set their own repository creation member privileges.
  """
  membersCanCreateRepositoriesPolicyEnabled: Boolean

  """
  Allow members to create public repositories. Defaults to current value.
  """
  membersCanCreatePublicRepositories: Boolean

  """
  Allow members to create private repositories. Defaults to current value.
  """
  membersCanCreatePrivateRepositories: Boolean

  """
  Allow members to create internal repositories. Defaults to current value.
  """
  membersCanCreateInternalRepositories: Boolean

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""
Autogenerated return type of UpdateEnterpriseMembersCanCreateRepositoriesSetting
"""
type GitHubUpdateEnterpriseMembersCanCreateRepositoriesSettingPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """
  The enterprise with the updated members can create repositories setting.
  """
  enterprise: GitHubEnterprise

  """
  A message confirming the result of updating the members can create repositories setting.
  """
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting
"""
input GitHubUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput {
  """
  The ID of the enterprise on which to set the members can change repository visibility setting.
  """
  enterpriseId: ID!

  """
  The value for the members can change repository visibility setting on the enterprise.
  """
  settingValue: GitHubEnterpriseEnabledDisabledSettingValue!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""
Autogenerated return type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting
"""
type GitHubUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """
  The enterprise with the updated members can change repository visibility setting.
  """
  enterprise: GitHubEnterprise

  """
  A message confirming the result of updating the members can change repository visibility setting.
  """
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseDefaultRepositoryPermissionSetting
"""
input GitHubUpdateEnterpriseDefaultRepositoryPermissionSettingInput {
  """
  The ID of the enterprise on which to set the default repository permission setting.
  """
  enterpriseId: ID!

  """
  The value for the default repository permission setting on the enterprise.
  """
  settingValue: GitHubEnterpriseDefaultRepositoryPermissionSettingValue!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""
Autogenerated return type of UpdateEnterpriseDefaultRepositoryPermissionSetting
"""
type GitHubUpdateEnterpriseDefaultRepositoryPermissionSettingPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The enterprise with the updated default repository permission setting."""
  enterprise: GitHubEnterprise

  """
  A message confirming the result of updating the default repository permission setting.
  """
  message: String
}

"""
Autogenerated input type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting
"""
input GitHubUpdateEnterpriseAllowPrivateRepositoryForkingSettingInput {
  """
  The ID of the enterprise on which to set the allow private repository forking setting.
  """
  enterpriseId: ID!

  """
  The value for the allow private repository forking setting on the enterprise.
  """
  settingValue: GitHubEnterpriseEnabledDisabledSettingValue!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""
Autogenerated return type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting
"""
type GitHubUpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """
  The enterprise with the updated allow private repository forking setting.
  """
  enterprise: GitHubEnterprise

  """
  A message confirming the result of updating the allow private repository forking setting.
  """
  message: String
}

"""Autogenerated input type of UpdateEnterpriseAdministratorRole"""
input GitHubUpdateEnterpriseAdministratorRoleInput {
  """The ID of the Enterprise which the admin belongs to."""
  enterpriseId: ID!

  """The login of a administrator whose role is being changed."""
  login: String!

  """The new role for the Enterprise administrator."""
  role: GitHubEnterpriseAdministratorRole!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateEnterpriseAdministratorRole"""
type GitHubUpdateEnterpriseAdministratorRolePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """A message confirming the result of changing the administrator's role."""
  message: String
}

"""Autogenerated input type of UpdateDiscussionComment"""
input GitHubUpdateDiscussionCommentInput {
  """The Node ID of the discussion comment to update."""
  commentId: ID!

  """The new contents of the comment body."""
  body: String!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateDiscussionComment"""
type GitHubUpdateDiscussionCommentPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The modified discussion comment."""
  comment: GitHubDiscussionComment
}

"""Autogenerated input type of UpdateDiscussion"""
input GitHubUpdateDiscussionInput {
  """The Node ID of the discussion to update."""
  discussionId: ID!

  """The new discussion title."""
  title: String

  """The new contents of the discussion body."""
  body: String

  """
  The Node ID of a discussion category within the same repository to change this discussion to.
  """
  categoryId: ID

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateDiscussion"""
type GitHubUpdateDiscussionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The modified discussion."""
  discussion: GitHubDiscussion
}

"""The auto-trigger preferences that are available for check suites."""
input GitHubCheckSuiteAutoTriggerPreference {
  """The node ID of the application that owns the check suite."""
  appId: ID!

  """
  Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository.
  """
  setting: Boolean!
}

"""Autogenerated input type of UpdateCheckSuitePreferences"""
input GitHubUpdateCheckSuitePreferencesInput {
  """The Node ID of the repository."""
  repositoryId: ID!

  """The check suite preferences to modify."""
  autoTriggerPreferences: [GitHubCheckSuiteAutoTriggerPreference!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateCheckSuitePreferences"""
type GitHubUpdateCheckSuitePreferencesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The updated repository."""
  repository: GitHubRepository
}

"""Autogenerated input type of UpdateCheckRun"""
input GitHubUpdateCheckRunInput {
  """The node ID of the repository."""
  repositoryId: ID!

  """The node of the check."""
  checkRunId: ID!

  """The name of the check."""
  name: String

  """
  The URL of the integrator's site that has the full details of the check.
  """
  detailsUrl: GitHubURI

  """A reference for the run on the integrator's system."""
  externalId: String

  """The current status."""
  status: GitHubRequestableCheckStatusState

  """The time that the check run began."""
  startedAt: GitHubDateTime

  """The final conclusion of the check."""
  conclusion: GitHubCheckConclusionState

  """The time that the check run finished."""
  completedAt: GitHubDateTime

  """Descriptive details about the run."""
  output: GitHubCheckRunOutput

  """
  Possible further actions the integrator can perform, which a user may trigger.
  """
  actions: [GitHubCheckRunAction!]

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateCheckRun"""
type GitHubUpdateCheckRunPayload {
  """The updated check run."""
  checkRun: GitHubCheckRun

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of UpdateBranchProtectionRule"""
input GitHubUpdateBranchProtectionRuleInput {
  """The global relay id of the branch protection rule to be updated."""
  branchProtectionRuleId: ID!

  """The glob-like pattern used to determine matching branches."""
  pattern: String

  """Are approving reviews required to update matching branches."""
  requiresApprovingReviews: Boolean

  """Number of approving reviews required to update matching branches."""
  requiredApprovingReviewCount: Int

  """Are commits required to be signed."""
  requiresCommitSignatures: Boolean

  """Are merge commits prohibited from being pushed to this branch."""
  requiresLinearHistory: Boolean

  """Are force pushes allowed on this branch."""
  allowsForcePushes: Boolean

  """Can this branch be deleted."""
  allowsDeletions: Boolean

  """Can admins overwrite branch protection."""
  isAdminEnforced: Boolean

  """Are status checks required to update matching branches."""
  requiresStatusChecks: Boolean

  """Are branches required to be up to date before merging."""
  requiresStrictStatusChecks: Boolean

  """Are reviews from code owners required to update matching branches."""
  requiresCodeOwnerReviews: Boolean

  """
  Will new commits pushed to matching branches dismiss pull request review approvals.
  """
  dismissesStaleReviews: Boolean

  """Is dismissal of pull request reviews restricted."""
  restrictsReviewDismissals: Boolean

  """
  A list of User or Team IDs allowed to dismiss reviews on pull requests targeting matching branches.
  """
  reviewDismissalActorIds: [ID!]

  """Is pushing to matching branches restricted."""
  restrictsPushes: Boolean

  """A list of User, Team or App IDs allowed to push to matching branches."""
  pushActorIds: [ID!]

  """
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  """
  requiredStatusCheckContexts: [String!]

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateBranchProtectionRule"""
type GitHubUpdateBranchProtectionRulePayload {
  """The newly created BranchProtectionRule."""
  branchProtectionRule: GitHubBranchProtectionRule

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of UnresolveReviewThread"""
input GitHubUnresolveReviewThreadInput {
  """The ID of the thread to unresolve"""
  threadId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UnresolveReviewThread"""
type GitHubUnresolveReviewThreadPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The thread to resolve."""
  thread: GitHubPullRequestReviewThread
}

"""Autogenerated input type of UnpinIssue"""
input GitHubUnpinIssueInput {
  """The ID of the issue to be unpinned"""
  issueId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UnpinIssue"""
type GitHubUnpinIssuePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The issue that was unpinned"""
  issue: GitHubIssue
}

"""Autogenerated input type of UnminimizeComment"""
input GitHubUnminimizeCommentInput {
  """The Node ID of the subject to modify."""
  subjectId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UnminimizeComment"""
type GitHubUnminimizeCommentPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The comment that was unminimized."""
  unminimizedComment: GitHubMinimizable
}

"""Autogenerated input type of UnmarkIssueAsDuplicate"""
input GitHubUnmarkIssueAsDuplicateInput {
  """ID of the issue or pull request currently marked as a duplicate."""
  duplicateId: ID!

  """
  ID of the issue or pull request currently considered canonical/authoritative/original.
  """
  canonicalId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UnmarkIssueAsDuplicate"""
type GitHubUnmarkIssueAsDuplicatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The issue or pull request that was marked as a duplicate."""
  duplicate: GitHubIssueOrPullRequest
}

"""Autogenerated input type of UnmarkFileAsViewed"""
input GitHubUnmarkFileAsViewedInput {
  """The Node ID of the pull request."""
  pullRequestId: ID!

  """The path of the file to mark as unviewed"""
  path: String!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UnmarkFileAsViewed"""
type GitHubUnmarkFileAsViewedPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The updated pull request."""
  pullRequest: GitHubPullRequest
}

"""Autogenerated input type of UnmarkDiscussionCommentAsAnswer"""
input GitHubUnmarkDiscussionCommentAsAnswerInput {
  """The Node ID of the discussion comment to unmark as an answer."""
  id: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UnmarkDiscussionCommentAsAnswer"""
type GitHubUnmarkDiscussionCommentAsAnswerPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The discussion that includes the comment."""
  discussion: GitHubDiscussion
}

"""Autogenerated input type of UnlockLockable"""
input GitHubUnlockLockableInput {
  """ID of the item to be unlocked."""
  lockableId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UnlockLockable"""
type GitHubUnlockLockablePayload {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The item that was unlocked."""
  unlockedRecord: GitHubLockable
}

"""Autogenerated input type of UnlinkRepositoryFromProject"""
input GitHubUnlinkRepositoryFromProjectInput {
  """The ID of the Project linked to the Repository."""
  projectId: ID!

  """The ID of the Repository linked to the Project."""
  repositoryId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UnlinkRepositoryFromProject"""
type GitHubUnlinkRepositoryFromProjectPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The linked Project."""
  project: GitHubProject

  """The linked Repository."""
  repository: GitHubRepository
}

"""Autogenerated input type of UnfollowUser"""
input GitHubUnfollowUserInput {
  """ID of the user to unfollow."""
  userId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UnfollowUser"""
type GitHubUnfollowUserPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The user that was unfollowed."""
  user: GitHubUser
}

"""Autogenerated input type of UnarchiveRepository"""
input GitHubUnarchiveRepositoryInput {
  """The ID of the repository to unarchive."""
  repositoryId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UnarchiveRepository"""
type GitHubUnarchiveRepositoryPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The repository that was unarchived."""
  repository: GitHubRepository
}

"""Autogenerated input type of TransferIssue"""
input GitHubTransferIssueInput {
  """The Node ID of the issue to be transferred"""
  issueId: ID!

  """The Node ID of the repository the issue should be transferred to"""
  repositoryId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of TransferIssue"""
type GitHubTransferIssuePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The issue that was transferred"""
  issue: GitHubIssue
}

"""Autogenerated input type of SubmitPullRequestReview"""
input GitHubSubmitPullRequestReviewInput {
  """The Pull Request ID to submit any pending reviews."""
  pullRequestId: ID

  """The Pull Request Review ID to submit."""
  pullRequestReviewId: ID

  """The event to send to the Pull Request Review."""
  event: GitHubPullRequestReviewEvent!

  """The text field to set on the Pull Request Review."""
  body: String

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of SubmitPullRequestReview"""
type GitHubSubmitPullRequestReviewPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The submitted pull request review."""
  pullRequestReview: GitHubPullRequestReview
}

"""Autogenerated input type of SetUserInteractionLimit"""
input GitHubSetUserInteractionLimitInput {
  """The ID of the user to set a limit for."""
  userId: ID!

  """The limit to set."""
  limit: GitHubRepositoryInteractionLimit!

  """When this limit should expire."""
  expiry: GitHubRepositoryInteractionLimitExpiry

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of SetUserInteractionLimit"""
type GitHubSetUserInteractionLimitPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The user that the interaction limit was set for."""
  user: GitHubUser
}

"""Autogenerated input type of SetRepositoryInteractionLimit"""
input GitHubSetRepositoryInteractionLimitInput {
  """The ID of the repository to set a limit for."""
  repositoryId: ID!

  """The limit to set."""
  limit: GitHubRepositoryInteractionLimit!

  """When this limit should expire."""
  expiry: GitHubRepositoryInteractionLimitExpiry

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of SetRepositoryInteractionLimit"""
type GitHubSetRepositoryInteractionLimitPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The repository that the interaction limit was set for."""
  repository: GitHubRepository
}

enum GitHubRepositoryInteractionLimitExpiry {
  """The interaction limit will expire after 1 day."""
  ONE_DAY

  """The interaction limit will expire after 3 days."""
  THREE_DAYS

  """The interaction limit will expire after 1 week."""
  ONE_WEEK

  """The interaction limit will expire after 1 month."""
  ONE_MONTH

  """The interaction limit will expire after 6 months."""
  SIX_MONTHS
}

"""Autogenerated input type of SetOrganizationInteractionLimit"""
input GitHubSetOrganizationInteractionLimitInput {
  """The ID of the organization to set a limit for."""
  organizationId: ID!

  """The limit to set."""
  limit: GitHubRepositoryInteractionLimit!

  """When this limit should expire."""
  expiry: GitHubRepositoryInteractionLimitExpiry

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of SetOrganizationInteractionLimit"""
type GitHubSetOrganizationInteractionLimitPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The organization that the interaction limit was set for."""
  organization: GitHubOrganization
}

"""Autogenerated input type of SetEnterpriseIdentityProvider"""
input GitHubSetEnterpriseIdentityProviderInput {
  """The ID of the enterprise on which to set an identity provider."""
  enterpriseId: ID!

  """The URL endpoint for the identity provider's SAML SSO."""
  ssoUrl: GitHubURI!

  """The Issuer Entity ID for the SAML identity provider"""
  issuer: String

  """
  The x509 certificate used by the identity provider to sign assertions and responses.
  """
  idpCertificate: String!

  """
  The signature algorithm used to sign SAML requests for the identity provider.
  """
  signatureMethod: GitHubSamlSignatureAlgorithm!

  """
  The digest algorithm used to sign SAML requests for the identity provider.
  """
  digestMethod: GitHubSamlDigestAlgorithm!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of SetEnterpriseIdentityProvider"""
type GitHubSetEnterpriseIdentityProviderPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The identity provider for the enterprise."""
  identityProvider: GitHubEnterpriseIdentityProvider
}

"""Autogenerated input type of ResolveReviewThread"""
input GitHubResolveReviewThreadInput {
  """The ID of the thread to resolve"""
  threadId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of ResolveReviewThread"""
type GitHubResolveReviewThreadPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The thread to resolve."""
  thread: GitHubPullRequestReviewThread
}

"""Autogenerated input type of RerequestCheckSuite"""
input GitHubRerequestCheckSuiteInput {
  """The Node ID of the repository."""
  repositoryId: ID!

  """The Node ID of the check suite."""
  checkSuiteId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of RerequestCheckSuite"""
type GitHubRerequestCheckSuitePayload {
  """The requested check suite."""
  checkSuite: GitHubCheckSuite

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of RequestReviews"""
input GitHubRequestReviewsInput {
  """The Node ID of the pull request to modify."""
  pullRequestId: ID!

  """The Node IDs of the user to request."""
  userIds: [ID!]

  """The Node IDs of the team to request."""
  teamIds: [ID!]

  """Add users to the set rather than replace."""
  union: Boolean

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of RequestReviews"""
type GitHubRequestReviewsPayload {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The pull request that is getting requests."""
  pullRequest: GitHubPullRequest

  """The edge from the pull request to the requested reviewers."""
  requestedReviewersEdge: GitHubUserEdge
}

"""Autogenerated input type of ReopenPullRequest"""
input GitHubReopenPullRequestInput {
  """ID of the pull request to be reopened."""
  pullRequestId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of ReopenPullRequest"""
type GitHubReopenPullRequestPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The pull request that was reopened."""
  pullRequest: GitHubPullRequest
}

"""Autogenerated input type of ReopenIssue"""
input GitHubReopenIssueInput {
  """ID of the issue to be opened."""
  issueId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of ReopenIssue"""
type GitHubReopenIssuePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The issue that was opened."""
  issue: GitHubIssue
}

"""Autogenerated input type of RemoveUpvote"""
input GitHubRemoveUpvoteInput {
  """The Node ID of the discussion or comment to remove upvote."""
  subjectId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of RemoveUpvote"""
type GitHubRemoveUpvotePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The votable subject."""
  subject: GitHubVotable
}

"""Autogenerated input type of RemoveStar"""
input GitHubRemoveStarInput {
  """The Starrable ID to unstar."""
  starrableId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of RemoveStar"""
type GitHubRemoveStarPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The starrable."""
  starrable: GitHubStarrable
}

"""Autogenerated input type of RemoveReaction"""
input GitHubRemoveReactionInput {
  """The Node ID of the subject to modify."""
  subjectId: ID!

  """The name of the emoji reaction to remove."""
  content: GitHubReactionContent!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of RemoveReaction"""
type GitHubRemoveReactionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The reaction object."""
  reaction: GitHubReaction

  """The reactable subject."""
  subject: GitHubReactable
}

"""Autogenerated input type of RemoveOutsideCollaborator"""
input GitHubRemoveOutsideCollaboratorInput {
  """The ID of the outside collaborator to remove."""
  userId: ID!

  """The ID of the organization to remove the outside collaborator from."""
  organizationId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of RemoveOutsideCollaborator"""
type GitHubRemoveOutsideCollaboratorPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The user that was removed as an outside collaborator."""
  removedUser: GitHubUser
}

"""Autogenerated input type of RemoveLabelsFromLabelable"""
input GitHubRemoveLabelsFromLabelableInput {
  """The id of the Labelable to remove labels from."""
  labelableId: ID!

  """The ids of labels to remove."""
  labelIds: [ID!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of RemoveLabelsFromLabelable"""
type GitHubRemoveLabelsFromLabelablePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The Labelable the labels were removed from."""
  labelable: GitHubLabelable
}

"""Autogenerated input type of RemoveEnterpriseSupportEntitlement"""
input GitHubRemoveEnterpriseSupportEntitlementInput {
  """The ID of the Enterprise which the admin belongs to."""
  enterpriseId: ID!

  """The login of a member who will lose the support entitlement."""
  login: String!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of RemoveEnterpriseSupportEntitlement"""
type GitHubRemoveEnterpriseSupportEntitlementPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """A message confirming the result of removing the support entitlement."""
  message: String
}

"""Autogenerated input type of RemoveEnterpriseOrganization"""
input GitHubRemoveEnterpriseOrganizationInput {
  """
  The ID of the enterprise from which the organization should be removed.
  """
  enterpriseId: ID!

  """The ID of the organization to remove from the enterprise."""
  organizationId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of RemoveEnterpriseOrganization"""
type GitHubRemoveEnterpriseOrganizationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The updated enterprise."""
  enterprise: GitHubEnterprise

  """The organization that was removed from the enterprise."""
  organization: GitHubOrganization

  """The viewer performing the mutation."""
  viewer: GitHubUser
}

"""Autogenerated input type of RemoveEnterpriseIdentityProvider"""
input GitHubRemoveEnterpriseIdentityProviderInput {
  """The ID of the enterprise from which to remove the identity provider."""
  enterpriseId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of RemoveEnterpriseIdentityProvider"""
type GitHubRemoveEnterpriseIdentityProviderPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The identity provider that was removed from the enterprise."""
  identityProvider: GitHubEnterpriseIdentityProvider
}

"""Autogenerated input type of RemoveEnterpriseAdmin"""
input GitHubRemoveEnterpriseAdminInput {
  """The Enterprise ID from which to remove the administrator."""
  enterpriseId: ID!

  """The login of the user to remove as an administrator."""
  login: String!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of RemoveEnterpriseAdmin"""
type GitHubRemoveEnterpriseAdminPayload {
  """The user who was removed as an administrator."""
  admin: GitHubUser

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The updated enterprise."""
  enterprise: GitHubEnterprise

  """A message confirming the result of removing an administrator."""
  message: String

  """The viewer performing the mutation."""
  viewer: GitHubUser
}

"""Autogenerated input type of RemoveAssigneesFromAssignable"""
input GitHubRemoveAssigneesFromAssignableInput {
  """The id of the assignable object to remove assignees from."""
  assignableId: ID!

  """The id of users to remove as assignees."""
  assigneeIds: [ID!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of RemoveAssigneesFromAssignable"""
type GitHubRemoveAssigneesFromAssignablePayload {
  """The item that was unassigned."""
  assignable: GitHubAssignable

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of RegenerateVerifiableDomainToken"""
input GitHubRegenerateVerifiableDomainTokenInput {
  """
  The ID of the verifiable domain to regenerate the verification token of.
  """
  id: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of RegenerateVerifiableDomainToken"""
type GitHubRegenerateVerifiableDomainTokenPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The verification token that was generated."""
  verificationToken: String
}

"""
Autogenerated input type of RegenerateEnterpriseIdentityProviderRecoveryCodes
"""
input GitHubRegenerateEnterpriseIdentityProviderRecoveryCodesInput {
  """The ID of the enterprise on which to set an identity provider."""
  enterpriseId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""
Autogenerated return type of RegenerateEnterpriseIdentityProviderRecoveryCodes
"""
type GitHubRegenerateEnterpriseIdentityProviderRecoveryCodesPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The identity provider for the enterprise."""
  identityProvider: GitHubEnterpriseIdentityProvider
}

"""Autogenerated input type of PinIssue"""
input GitHubPinIssueInput {
  """The ID of the issue to be pinned"""
  issueId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of PinIssue"""
type GitHubPinIssuePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The issue that was pinned"""
  issue: GitHubIssue
}

"""Autogenerated input type of MoveProjectColumn"""
input GitHubMoveProjectColumnInput {
  """The id of the column to move."""
  columnId: ID!

  """
  Place the new column after the column with this id. Pass null to place it at the front.
  """
  afterColumnId: ID

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of MoveProjectColumn"""
type GitHubMoveProjectColumnPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The new edge of the moved column."""
  columnEdge: GitHubProjectColumnEdge
}

"""Autogenerated input type of MoveProjectCard"""
input GitHubMoveProjectCardInput {
  """The id of the card to move."""
  cardId: ID!

  """The id of the column to move it into."""
  columnId: ID!

  """
  Place the new card after the card with this id. Pass null to place it at the top.
  """
  afterCardId: ID

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of MoveProjectCard"""
type GitHubMoveProjectCardPayload {
  """The new edge of the moved card."""
  cardEdge: GitHubProjectCardEdge

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

enum GitHubReportedContentClassifiers {
  """A spammy piece of content"""
  SPAM

  """An abusive or harassing piece of content"""
  ABUSE

  """An irrelevant piece of content"""
  OFF_TOPIC

  """An outdated piece of content"""
  OUTDATED

  """A duplicated piece of content"""
  DUPLICATE

  """The content has been resolved"""
  RESOLVED
}

"""Autogenerated input type of MinimizeComment"""
input GitHubMinimizeCommentInput {
  """The Node ID of the subject to modify."""
  subjectId: ID!

  """The classification of comment"""
  classifier: GitHubReportedContentClassifiers!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of MinimizeComment"""
type GitHubMinimizeCommentPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The comment that was minimized."""
  minimizedComment: GitHubMinimizable
}

"""Autogenerated input type of MergePullRequest"""
input GitHubMergePullRequestInput {
  """ID of the pull request to be merged."""
  pullRequestId: ID!

  """
  Commit headline to use for the merge commit; if omitted, a default message will be used.
  """
  commitHeadline: String

  """
  Commit body to use for the merge commit; if omitted, a default message will be used
  """
  commitBody: String

  """
  OID that the pull request head ref must match to allow merge; if omitted, no check is performed.
  """
  expectedHeadOid: GitHubGitObjectID

  """The merge method to use. If omitted, defaults to 'MERGE'"""
  mergeMethod: GitHubPullRequestMergeMethod = MERGE

  """The email address to associate with this merge."""
  authorEmail: String

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of MergePullRequest"""
type GitHubMergePullRequestPayload {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The pull request that was merged."""
  pullRequest: GitHubPullRequest
}

"""Autogenerated input type of MergeBranch"""
input GitHubMergeBranchInput {
  """
  The Node ID of the Repository containing the base branch that will be modified.
  """
  repositoryId: ID!

  """
  The name of the base branch that the provided head will be merged into.
  """
  base: String!

  """
  The head to merge into the base branch. This can be a branch name or a commit GitObjectID.
  """
  head: String!

  """
  Message to use for the merge commit. If omitted, a default will be used.
  """
  commitMessage: String

  """The email address to associate with this commit."""
  authorEmail: String

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of MergeBranch"""
type GitHubMergeBranchPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The resulting merge Commit."""
  mergeCommit: GitHubCommit
}

"""Autogenerated input type of MarkPullRequestReadyForReview"""
input GitHubMarkPullRequestReadyForReviewInput {
  """ID of the pull request to be marked as ready for review."""
  pullRequestId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of MarkPullRequestReadyForReview"""
type GitHubMarkPullRequestReadyForReviewPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The pull request that is ready for review."""
  pullRequest: GitHubPullRequest
}

"""Autogenerated input type of MarkFileAsViewed"""
input GitHubMarkFileAsViewedInput {
  """The Node ID of the pull request."""
  pullRequestId: ID!

  """The path of the file to mark as viewed"""
  path: String!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of MarkFileAsViewed"""
type GitHubMarkFileAsViewedPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The updated pull request."""
  pullRequest: GitHubPullRequest
}

"""Autogenerated input type of MarkDiscussionCommentAsAnswer"""
input GitHubMarkDiscussionCommentAsAnswerInput {
  """The Node ID of the discussion comment to mark as an answer."""
  id: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of MarkDiscussionCommentAsAnswer"""
type GitHubMarkDiscussionCommentAsAnswerPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The discussion that includes the chosen comment."""
  discussion: GitHubDiscussion
}

"""Autogenerated input type of LockLockable"""
input GitHubLockLockableInput {
  """ID of the item to be locked."""
  lockableId: ID!

  """A reason for why the item will be locked."""
  lockReason: GitHubLockReason

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of LockLockable"""
type GitHubLockLockablePayload {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The item that was locked."""
  lockedRecord: GitHubLockable
}

"""Autogenerated input type of LinkRepositoryToProject"""
input GitHubLinkRepositoryToProjectInput {
  """The ID of the Project to link to a Repository"""
  projectId: ID!

  """The ID of the Repository to link to a Project."""
  repositoryId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of LinkRepositoryToProject"""
type GitHubLinkRepositoryToProjectPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The linked Project."""
  project: GitHubProject

  """The linked Repository."""
  repository: GitHubRepository
}

"""Autogenerated input type of InviteEnterpriseAdmin"""
input GitHubInviteEnterpriseAdminInput {
  """The ID of the enterprise to which you want to invite an administrator."""
  enterpriseId: ID!

  """The login of a user to invite as an administrator."""
  invitee: String

  """The email of the person to invite as an administrator."""
  email: String

  """The role of the administrator."""
  role: GitHubEnterpriseAdministratorRole

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of InviteEnterpriseAdmin"""
type GitHubInviteEnterpriseAdminPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The created enterprise administrator invitation."""
  invitation: GitHubEnterpriseAdministratorInvitation
}

"""Autogenerated input type of FollowUser"""
input GitHubFollowUserInput {
  """ID of the user to follow."""
  userId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of FollowUser"""
type GitHubFollowUserPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The user that was followed."""
  user: GitHubUser
}

"""Autogenerated input type of EnablePullRequestAutoMerge"""
input GitHubEnablePullRequestAutoMergeInput {
  """ID of the pull request to enable auto-merge on."""
  pullRequestId: ID!

  """
  Commit headline to use for the commit when the PR is mergable; if omitted, a default message will be used.
  """
  commitHeadline: String

  """
  Commit body to use for the commit when the PR is mergable; if omitted, a default message will be used.
  """
  commitBody: String

  """The merge method to use. If omitted, defaults to 'MERGE'"""
  mergeMethod: GitHubPullRequestMergeMethod = MERGE

  """The email address to associate with this merge."""
  authorEmail: String

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of EnablePullRequestAutoMerge"""
type GitHubEnablePullRequestAutoMergePayload {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The pull request auto-merge was enabled on."""
  pullRequest: GitHubPullRequest
}

"""Autogenerated input type of DismissPullRequestReview"""
input GitHubDismissPullRequestReviewInput {
  """The Node ID of the pull request review to modify."""
  pullRequestReviewId: ID!

  """The contents of the pull request review dismissal message."""
  message: String!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DismissPullRequestReview"""
type GitHubDismissPullRequestReviewPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The dismissed pull request review."""
  pullRequestReview: GitHubPullRequestReview
}

"""Autogenerated input type of DisablePullRequestAutoMerge"""
input GitHubDisablePullRequestAutoMergeInput {
  """ID of the pull request to disable auto merge on."""
  pullRequestId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DisablePullRequestAutoMerge"""
type GitHubDisablePullRequestAutoMergePayload {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The pull request auto merge was disabled on."""
  pullRequest: GitHubPullRequest
}

"""Autogenerated input type of DeleteVerifiableDomain"""
input GitHubDeleteVerifiableDomainInput {
  """The ID of the verifiable domain to delete."""
  id: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeleteVerifiableDomain"""
type GitHubDeleteVerifiableDomainPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The owning account from which the domain was deleted."""
  owner: GitHubVerifiableDomainOwner
}

"""Autogenerated input type of DeleteTeamDiscussionComment"""
input GitHubDeleteTeamDiscussionCommentInput {
  """The ID of the comment to delete."""
  id: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeleteTeamDiscussionComment"""
type GitHubDeleteTeamDiscussionCommentPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of DeleteTeamDiscussion"""
input GitHubDeleteTeamDiscussionInput {
  """The discussion ID to delete."""
  id: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeleteTeamDiscussion"""
type GitHubDeleteTeamDiscussionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of DeleteRef"""
input GitHubDeleteRefInput {
  """The Node ID of the Ref to be deleted."""
  refId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeleteRef"""
type GitHubDeleteRefPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of DeletePullRequestReviewComment"""
input GitHubDeletePullRequestReviewCommentInput {
  """The ID of the comment to delete."""
  id: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeletePullRequestReviewComment"""
type GitHubDeletePullRequestReviewCommentPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The pull request review the deleted comment belonged to."""
  pullRequestReview: GitHubPullRequestReview
}

"""Autogenerated input type of DeletePullRequestReview"""
input GitHubDeletePullRequestReviewInput {
  """The Node ID of the pull request review to delete."""
  pullRequestReviewId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeletePullRequestReview"""
type GitHubDeletePullRequestReviewPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The deleted pull request review."""
  pullRequestReview: GitHubPullRequestReview
}

"""Autogenerated input type of DeleteProjectColumn"""
input GitHubDeleteProjectColumnInput {
  """The id of the column to delete."""
  columnId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeleteProjectColumn"""
type GitHubDeleteProjectColumnPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The deleted column ID."""
  deletedColumnId: ID

  """The project the deleted column was in."""
  project: GitHubProject
}

"""Autogenerated input type of DeleteProjectCard"""
input GitHubDeleteProjectCardInput {
  """The id of the card to delete."""
  cardId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeleteProjectCard"""
type GitHubDeleteProjectCardPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The column the deleted card was in."""
  column: GitHubProjectColumn

  """The deleted card ID."""
  deletedCardId: ID
}

"""Autogenerated input type of DeleteProject"""
input GitHubDeleteProjectInput {
  """The Project ID to update."""
  projectId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeleteProject"""
type GitHubDeleteProjectPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The repository or organization the project was removed from."""
  owner: GitHubProjectOwner
}

"""Autogenerated input type of DeleteIssueComment"""
input GitHubDeleteIssueCommentInput {
  """The ID of the comment to delete."""
  id: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeleteIssueComment"""
type GitHubDeleteIssueCommentPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of DeleteIssue"""
input GitHubDeleteIssueInput {
  """The ID of the issue to delete."""
  issueId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeleteIssue"""
type GitHubDeleteIssuePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The repository the issue belonged to"""
  repository: GitHubRepository
}

"""Autogenerated input type of DeleteIpAllowListEntry"""
input GitHubDeleteIpAllowListEntryInput {
  """The ID of the IP allow list entry to delete."""
  ipAllowListEntryId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeleteIpAllowListEntry"""
type GitHubDeleteIpAllowListEntryPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The IP allow list entry that was deleted."""
  ipAllowListEntry: GitHubIpAllowListEntry
}

"""Autogenerated input type of DeleteDiscussionComment"""
input GitHubDeleteDiscussionCommentInput {
  """The Node id of the discussion comment to delete."""
  id: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeleteDiscussionComment"""
type GitHubDeleteDiscussionCommentPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The discussion comment that was just deleted."""
  comment: GitHubDiscussionComment
}

"""Autogenerated input type of DeleteDiscussion"""
input GitHubDeleteDiscussionInput {
  """The id of the discussion to delete."""
  id: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeleteDiscussion"""
type GitHubDeleteDiscussionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The discussion that was just deleted."""
  discussion: GitHubDiscussion
}

"""Autogenerated input type of DeleteDeployment"""
input GitHubDeleteDeploymentInput {
  """The Node ID of the deployment to be deleted."""
  id: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeleteDeployment"""
type GitHubDeleteDeploymentPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of DeleteBranchProtectionRule"""
input GitHubDeleteBranchProtectionRuleInput {
  """The global relay id of the branch protection rule to be deleted."""
  branchProtectionRuleId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeleteBranchProtectionRule"""
type GitHubDeleteBranchProtectionRulePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

enum GitHubTopicSuggestionDeclineReason {
  """The suggested topic is not relevant to the repository."""
  NOT_RELEVANT

  """
  The suggested topic is too specific for the repository (e.g. #ruby-on-rails-version-4-2-1).
  """
  TOO_SPECIFIC

  """The viewer does not like the suggested topic."""
  PERSONAL_PREFERENCE

  """The suggested topic is too general for the repository."""
  TOO_GENERAL
}

"""Autogenerated input type of DeclineTopicSuggestion"""
input GitHubDeclineTopicSuggestionInput {
  """The Node ID of the repository."""
  repositoryId: ID!

  """The name of the suggested topic."""
  name: String!

  """The reason why the suggested topic is declined."""
  reason: GitHubTopicSuggestionDeclineReason!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeclineTopicSuggestion"""
type GitHubDeclineTopicSuggestionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The declined topic."""
  topic: GitHubTopic
}

"""Autogenerated input type of CreateTeamDiscussionComment"""
input GitHubCreateTeamDiscussionCommentInput {
  """The ID of the discussion to which the comment belongs."""
  discussionId: ID!

  """The content of the comment."""
  body: String!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateTeamDiscussionComment"""
type GitHubCreateTeamDiscussionCommentPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The new comment."""
  teamDiscussionComment: GitHubTeamDiscussionComment
}

"""Autogenerated input type of CreateTeamDiscussion"""
input GitHubCreateTeamDiscussionInput {
  """The ID of the team to which the discussion belongs."""
  teamId: ID!

  """The title of the discussion."""
  title: String!

  """The content of the discussion."""
  body: String!

  """
  If true, restricts the visibility of this discussion to team members and organization admins. If false or not specified, allows any organization member to view this discussion.
  """
  private: Boolean

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateTeamDiscussion"""
type GitHubCreateTeamDiscussionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The new discussion."""
  teamDiscussion: GitHubTeamDiscussion
}

"""Autogenerated input type of CreateRepository"""
input GitHubCreateRepositoryInput {
  """The name of the new repository."""
  name: String!

  """The ID of the owner for the new repository."""
  ownerId: ID

  """A short description of the new repository."""
  description: String

  """Indicates the repository's visibility level."""
  visibility: GitHubRepositoryVisibility!

  """
  Whether this repository should be marked as a template such that anyone who can access it can create new repositories with the same files and directory structure.
  """
  template: Boolean = false

  """The URL for a web page about this repository."""
  homepageUrl: GitHubURI

  """Indicates if the repository should have the wiki feature enabled."""
  hasWikiEnabled: Boolean = false

  """Indicates if the repository should have the issues feature enabled."""
  hasIssuesEnabled: Boolean = true

  """
  When an organization is specified as the owner, this ID identifies the team that should be granted access to the new repository.
  """
  teamId: ID

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateRepository"""
type GitHubCreateRepositoryPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The new repository."""
  repository: GitHubRepository
}

"""Autogenerated input type of CreateRef"""
input GitHubCreateRefInput {
  """The Node ID of the Repository to create the Ref in."""
  repositoryId: ID!

  """
  The fully qualified name of the new Ref (ie: `refs/heads/my_new_branch`).
  """
  name: String!

  """The GitObjectID that the new Ref shall target. Must point to a commit."""
  oid: GitHubGitObjectID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateRef"""
type GitHubCreateRefPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The newly created ref."""
  ref: GitHubRef
}

"""Autogenerated input type of CreatePullRequest"""
input GitHubCreatePullRequestInput {
  """The Node ID of the repository."""
  repositoryId: ID!

  """
  The name of the branch you want your changes pulled into. This should be an existing branch
  on the current repository. You cannot update the base branch on a pull request to point
  to another repository.
  
  """
  baseRefName: String!

  """
  The name of the branch where your changes are implemented. For cross-repository pull requests
  in the same network, namespace `head_ref_name` with a user like this: `username:branch`.
  
  """
  headRefName: String!

  """The title of the pull request."""
  title: String!

  """The contents of the pull request."""
  body: String

  """Indicates whether maintainers can modify the pull request."""
  maintainerCanModify: Boolean = true

  """Indicates whether this pull request should be a draft."""
  draft: Boolean = false

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreatePullRequest"""
type GitHubCreatePullRequestPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The new pull request."""
  pullRequest: GitHubPullRequest
}

enum GitHubProjectTemplate {
  """Create a board with columns for To do, In progress and Done."""
  BASIC_KANBAN

  """
  Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  """
  AUTOMATED_KANBAN_V2

  """
  Create a board with triggers to automatically move cards across columns with review automation.
  """
  AUTOMATED_REVIEWS_KANBAN

  """
  Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  """
  BUG_TRIAGE
}

"""Autogenerated input type of CreateProject"""
input GitHubCreateProjectInput {
  """The owner ID to create the project under."""
  ownerId: ID!

  """The name of project."""
  name: String!

  """The description of project."""
  body: String

  """The name of the GitHub-provided template."""
  template: GitHubProjectTemplate

  """
  A list of repository IDs to create as linked repositories for the project
  """
  repositoryIds: [ID!]

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateProject"""
type GitHubCreateProjectPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The new project."""
  project: GitHubProject
}

"""Autogenerated input type of CreateIssue"""
input GitHubCreateIssueInput {
  """The Node ID of the repository."""
  repositoryId: ID!

  """The title for the issue."""
  title: String!

  """The body for the issue description."""
  body: String

  """The Node ID for the user assignee for this issue."""
  assigneeIds: [ID!]

  """The Node ID of the milestone for this issue."""
  milestoneId: ID

  """An array of Node IDs of labels for this issue."""
  labelIds: [ID!]

  """An array of Node IDs for projects associated with this issue."""
  projectIds: [ID!]

  """
  The name of an issue template in the repository, assigns labels and assignees from the template to the issue
  """
  issueTemplate: String

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateIssue"""
type GitHubCreateIssuePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The new issue."""
  issue: GitHubIssue
}

"""Autogenerated input type of CreateIpAllowListEntry"""
input GitHubCreateIpAllowListEntryInput {
  """The ID of the owner for which to create the new IP allow list entry."""
  ownerId: ID!

  """An IP address or range of addresses in CIDR notation."""
  allowListValue: String!

  """An optional name for the IP allow list entry."""
  name: String

  """
  Whether the IP allow list entry is active when an IP allow list is enabled.
  """
  isActive: Boolean!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateIpAllowListEntry"""
type GitHubCreateIpAllowListEntryPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The IP allow list entry that was created."""
  ipAllowListEntry: GitHubIpAllowListEntry
}

"""Autogenerated input type of CreateEnterpriseOrganization"""
input GitHubCreateEnterpriseOrganizationInput {
  """The ID of the enterprise owning the new organization."""
  enterpriseId: ID!

  """The login of the new organization."""
  login: String!

  """The profile name of the new organization."""
  profileName: String!

  """The email used for sending billing receipts."""
  billingEmail: String!

  """The logins for the administrators of the new organization."""
  adminLogins: [String!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateEnterpriseOrganization"""
type GitHubCreateEnterpriseOrganizationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The enterprise that owns the created organization."""
  enterprise: GitHubEnterprise

  """The organization that was created."""
  organization: GitHubOrganization
}

"""Autogenerated input type of CreateDiscussion"""
input GitHubCreateDiscussionInput {
  """The id of the repository on which to create the discussion."""
  repositoryId: ID!

  """The title of the discussion."""
  title: String!

  """The body of the discussion."""
  body: String!

  """The id of the discussion category to associate with this discussion."""
  categoryId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateDiscussion"""
type GitHubCreateDiscussionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The discussion that was just created."""
  discussion: GitHubDiscussion
}

"""Autogenerated input type of CreateCheckSuite"""
input GitHubCreateCheckSuiteInput {
  """The Node ID of the repository."""
  repositoryId: ID!

  """The SHA of the head commit."""
  headSha: GitHubGitObjectID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateCheckSuite"""
type GitHubCreateCheckSuitePayload {
  """The newly created check suite."""
  checkSuite: GitHubCheckSuite

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

enum GitHubRequestableCheckStatusState {
  """The check suite or run has been queued."""
  QUEUED

  """The check suite or run is in progress."""
  IN_PROGRESS

  """The check suite or run has been completed."""
  COMPLETED

  """The check suite or run is in waiting state."""
  WAITING
}

"""Information from a check run analysis to specific lines of code."""
input GitHubCheckAnnotationRange {
  """The starting line of the range."""
  startLine: Int!

  """The starting column of the range."""
  startColumn: Int

  """The ending line of the range."""
  endLine: Int!

  """The ending column of the range."""
  endColumn: Int
}

"""Information from a check run analysis to specific lines of code."""
input GitHubCheckAnnotationData {
  """The path of the file to add an annotation to."""
  path: String!

  """The location of the annotation"""
  location: GitHubCheckAnnotationRange!

  """Represents an annotation's information level"""
  annotationLevel: GitHubCheckAnnotationLevel!

  """A short description of the feedback for these lines of code."""
  message: String!

  """The title that represents the annotation."""
  title: String

  """Details about this annotation."""
  rawDetails: String
}

"""
Images attached to the check run output displayed in the GitHub pull request UI.
"""
input GitHubCheckRunOutputImage {
  """The alternative text for the image."""
  alt: String!

  """The full URL of the image."""
  imageUrl: GitHubURI!

  """A short image description."""
  caption: String
}

"""Descriptive details about the check run."""
input GitHubCheckRunOutput {
  """A title to provide for this check run."""
  title: String!

  """The summary of the check run (supports Commonmark)."""
  summary: String!

  """The details of the check run (supports Commonmark)."""
  text: String

  """The annotations that are made as part of the check run."""
  annotations: [GitHubCheckAnnotationData!]

  """
  Images attached to the check run output displayed in the GitHub pull request UI.
  """
  images: [GitHubCheckRunOutputImage!]
}

"""Possible further actions the integrator can perform."""
input GitHubCheckRunAction {
  """The text to be displayed on a button in the web UI."""
  label: String!

  """A short explanation of what this action would do."""
  description: String!

  """A reference for the action on the integrator's system. """
  identifier: String!
}

"""Autogenerated input type of CreateCheckRun"""
input GitHubCreateCheckRunInput {
  """The node ID of the repository."""
  repositoryId: ID!

  """The name of the check."""
  name: String!

  """The SHA of the head commit."""
  headSha: GitHubGitObjectID!

  """
  The URL of the integrator's site that has the full details of the check.
  """
  detailsUrl: GitHubURI

  """A reference for the run on the integrator's system."""
  externalId: String

  """The current status."""
  status: GitHubRequestableCheckStatusState

  """The time that the check run began."""
  startedAt: GitHubDateTime

  """The final conclusion of the check."""
  conclusion: GitHubCheckConclusionState

  """The time that the check run finished."""
  completedAt: GitHubDateTime

  """Descriptive details about the run."""
  output: GitHubCheckRunOutput

  """
  Possible further actions the integrator can perform, which a user may trigger.
  """
  actions: [GitHubCheckRunAction!]

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateCheckRun"""
type GitHubCreateCheckRunPayload {
  """The newly created check run."""
  checkRun: GitHubCheckRun

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of CreateBranchProtectionRule"""
input GitHubCreateBranchProtectionRuleInput {
  """
  The global relay id of the repository in which a new branch protection rule should be created in.
  """
  repositoryId: ID!

  """The glob-like pattern used to determine matching branches."""
  pattern: String!

  """Are approving reviews required to update matching branches."""
  requiresApprovingReviews: Boolean

  """Number of approving reviews required to update matching branches."""
  requiredApprovingReviewCount: Int

  """Are commits required to be signed."""
  requiresCommitSignatures: Boolean

  """Are merge commits prohibited from being pushed to this branch."""
  requiresLinearHistory: Boolean

  """Are force pushes allowed on this branch."""
  allowsForcePushes: Boolean

  """Can this branch be deleted."""
  allowsDeletions: Boolean

  """Can admins overwrite branch protection."""
  isAdminEnforced: Boolean

  """Are status checks required to update matching branches."""
  requiresStatusChecks: Boolean

  """Are branches required to be up to date before merging."""
  requiresStrictStatusChecks: Boolean

  """Are reviews from code owners required to update matching branches."""
  requiresCodeOwnerReviews: Boolean

  """
  Will new commits pushed to matching branches dismiss pull request review approvals.
  """
  dismissesStaleReviews: Boolean

  """Is dismissal of pull request reviews restricted."""
  restrictsReviewDismissals: Boolean

  """
  A list of User or Team IDs allowed to dismiss reviews on pull requests targeting matching branches.
  """
  reviewDismissalActorIds: [ID!]

  """Is pushing to matching branches restricted."""
  restrictsPushes: Boolean

  """A list of User, Team or App IDs allowed to push to matching branches."""
  pushActorIds: [ID!]

  """
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  """
  requiredStatusCheckContexts: [String!]

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateBranchProtectionRule"""
type GitHubCreateBranchProtectionRulePayload {
  """The newly created BranchProtectionRule."""
  branchProtectionRule: GitHubBranchProtectionRule

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of ConvertProjectCardNoteToIssue"""
input GitHubConvertProjectCardNoteToIssueInput {
  """The ProjectCard ID to convert."""
  projectCardId: ID!

  """The ID of the repository to create the issue in."""
  repositoryId: ID!

  """
  The title of the newly created issue. Defaults to the card's note text.
  """
  title: String

  """The body of the newly created issue."""
  body: String

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of ConvertProjectCardNoteToIssue"""
type GitHubConvertProjectCardNoteToIssuePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The updated ProjectCard."""
  projectCard: GitHubProjectCard
}

"""Autogenerated input type of ClosePullRequest"""
input GitHubClosePullRequestInput {
  """ID of the pull request to be closed."""
  pullRequestId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of ClosePullRequest"""
type GitHubClosePullRequestPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The pull request that was closed."""
  pullRequest: GitHubPullRequest
}

"""Autogenerated input type of CloseIssue"""
input GitHubCloseIssueInput {
  """ID of the issue to be closed."""
  issueId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CloseIssue"""
type GitHubCloseIssuePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The issue that was closed."""
  issue: GitHubIssue
}

"""Autogenerated input type of CloneTemplateRepository"""
input GitHubCloneTemplateRepositoryInput {
  """The Node ID of the template repository."""
  repositoryId: ID!

  """The name of the new repository."""
  name: String!

  """The ID of the owner for the new repository."""
  ownerId: ID!

  """A short description of the new repository."""
  description: String

  """Indicates the repository's visibility level."""
  visibility: GitHubRepositoryVisibility!

  """
  Whether to copy all branches from the template to the new repository. Defaults to copying only the default branch of the template.
  """
  includeAllBranches: Boolean = false

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CloneTemplateRepository"""
type GitHubCloneTemplateRepositoryPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The new repository."""
  repository: GitHubRepository
}

"""Autogenerated input type of CloneProject"""
input GitHubCloneProjectInput {
  """The owner ID to create the project under."""
  targetOwnerId: ID!

  """The source project to clone."""
  sourceId: ID!

  """Whether or not to clone the source project's workflows."""
  includeWorkflows: Boolean!

  """The name of the project."""
  name: String!

  """The description of the project."""
  body: String

  """The visibility of the project, defaults to false (private)."""
  public: Boolean

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CloneProject"""
type GitHubCloneProjectPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The id of the JobStatus for populating cloned fields."""
  jobStatusId: String

  """The new cloned project."""
  project: GitHubProject
}

"""Autogenerated input type of ClearLabelsFromLabelable"""
input GitHubClearLabelsFromLabelableInput {
  """The id of the labelable object to clear the labels from."""
  labelableId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of ClearLabelsFromLabelable"""
type GitHubClearLabelsFromLabelablePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The item that was unlabeled."""
  labelable: GitHubLabelable
}

"""Autogenerated input type of ChangeUserStatus"""
input GitHubChangeUserStatusInput {
  """
  The emoji to represent your status. Can either be a native Unicode emoji or an emoji name with colons, e.g., :grinning:.
  """
  emoji: String

  """A short description of your current status."""
  message: String

  """
  The ID of the organization whose members will be allowed to see the status. If omitted, the status will be publicly visible.
  """
  organizationId: ID

  """
  Whether this status should indicate you are not fully available on GitHub, e.g., you are away.
  """
  limitedAvailability: Boolean = false

  """If set, the user status will not be shown after this date."""
  expiresAt: GitHubDateTime

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of ChangeUserStatus"""
type GitHubChangeUserStatusPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """Your updated status."""
  status: GitHubUserStatus
}

"""Autogenerated input type of CancelEnterpriseAdminInvitation"""
input GitHubCancelEnterpriseAdminInvitationInput {
  """The Node ID of the pending enterprise administrator invitation."""
  invitationId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CancelEnterpriseAdminInvitation"""
type GitHubCancelEnterpriseAdminInvitationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The invitation that was canceled."""
  invitation: GitHubEnterpriseAdministratorInvitation

  """
  A message confirming the result of canceling an administrator invitation.
  """
  message: String
}

"""Autogenerated input type of ArchiveRepository"""
input GitHubArchiveRepositoryInput {
  """The ID of the repository to mark as archived."""
  repositoryId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of ArchiveRepository"""
type GitHubArchiveRepositoryPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The repository that was marked as archived."""
  repository: GitHubRepository
}

"""Autogenerated input type of ApproveVerifiableDomain"""
input GitHubApproveVerifiableDomainInput {
  """The ID of the verifiable domain to approve."""
  id: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of ApproveVerifiableDomain"""
type GitHubApproveVerifiableDomainPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The verifiable domain that was approved."""
  domain: GitHubVerifiableDomain
}

"""Autogenerated input type of AddVerifiableDomain"""
input GitHubAddVerifiableDomainInput {
  """The ID of the owner to add the domain to"""
  ownerId: ID!

  """The URL of the domain"""
  domain: GitHubURI!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of AddVerifiableDomain"""
type GitHubAddVerifiableDomainPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The verifiable domain that was added."""
  domain: GitHubVerifiableDomain
}

"""Autogenerated input type of AddUpvote"""
input GitHubAddUpvoteInput {
  """The Node ID of the discussion or comment to upvote."""
  subjectId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of AddUpvote"""
type GitHubAddUpvotePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The votable subject."""
  subject: GitHubVotable
}

"""Autogenerated input type of AddStar"""
input GitHubAddStarInput {
  """The Starrable ID to star."""
  starrableId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of AddStar"""
type GitHubAddStarPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The starrable."""
  starrable: GitHubStarrable
}

"""Autogenerated input type of AddReaction"""
input GitHubAddReactionInput {
  """The Node ID of the subject to modify."""
  subjectId: ID!

  """The name of the emoji to react with."""
  content: GitHubReactionContent!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of AddReaction"""
type GitHubAddReactionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The reaction object."""
  reaction: GitHubReaction

  """The reactable subject."""
  subject: GitHubReactable
}

"""Autogenerated input type of AddPullRequestReviewThread"""
input GitHubAddPullRequestReviewThreadInput {
  """Path to the file being commented on."""
  path: String!

  """Body of the thread's first comment."""
  body: String!

  """The node ID of the pull request reviewing"""
  pullRequestId: ID

  """The Node ID of the review to modify."""
  pullRequestReviewId: ID

  """
  The line of the blob to which the thread refers. The end of the line range for multi-line comments.
  """
  line: Int!

  """
  The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range.
  """
  side: GitHubDiffSide = RIGHT

  """The first line of the range to which the comment refers."""
  startLine: Int

  """The side of the diff on which the start line resides."""
  startSide: GitHubDiffSide = RIGHT

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of AddPullRequestReviewThread"""
type GitHubAddPullRequestReviewThreadPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The newly created thread."""
  thread: GitHubPullRequestReviewThread
}

"""Autogenerated input type of AddPullRequestReviewComment"""
input GitHubAddPullRequestReviewCommentInput {
  """The node ID of the pull request reviewing"""
  pullRequestId: ID

  """The Node ID of the review to modify."""
  pullRequestReviewId: ID

  """The SHA of the commit to comment on."""
  commitOID: GitHubGitObjectID

  """The text of the comment."""
  body: String!

  """The relative path of the file to comment on."""
  path: String

  """The line index in the diff to comment on."""
  position: Int

  """The comment id to reply to."""
  inReplyTo: ID

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of AddPullRequestReviewComment"""
type GitHubAddPullRequestReviewCommentPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The newly created comment."""
  comment: GitHubPullRequestReviewComment

  """The edge from the review's comment connection."""
  commentEdge: GitHubPullRequestReviewCommentEdge
}

enum GitHubPullRequestReviewEvent {
  """Submit general feedback without explicit approval."""
  COMMENT

  """Submit feedback and approve merging these changes."""
  APPROVE

  """Submit feedback that must be addressed before merging."""
  REQUEST_CHANGES

  """Dismiss review so it now longer effects merging."""
  DISMISS
}

"""Specifies a review comment to be left with a Pull Request Review."""
input GitHubDraftPullRequestReviewComment {
  """Path to the file being commented on."""
  path: String!

  """Position in the file to leave a comment on."""
  position: Int!

  """Body of the comment to leave."""
  body: String!
}

"""
Specifies a review comment thread to be left with a Pull Request Review.
"""
input GitHubDraftPullRequestReviewThread {
  """Path to the file being commented on."""
  path: String!

  """
  The line of the blob to which the thread refers. The end of the line range for multi-line comments.
  """
  line: Int!

  """
  The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range.
  """
  side: GitHubDiffSide = RIGHT

  """The first line of the range to which the comment refers."""
  startLine: Int

  """The side of the diff on which the start line resides."""
  startSide: GitHubDiffSide = RIGHT

  """Body of the comment to leave."""
  body: String!
}

"""Autogenerated input type of AddPullRequestReview"""
input GitHubAddPullRequestReviewInput {
  """The Node ID of the pull request to modify."""
  pullRequestId: ID!

  """The commit OID the review pertains to."""
  commitOID: GitHubGitObjectID

  """The contents of the review body comment."""
  body: String

  """The event to perform on the pull request review."""
  event: GitHubPullRequestReviewEvent

  """The review line comments."""
  comments: [GitHubDraftPullRequestReviewComment]

  """The review line comment threads."""
  threads: [GitHubDraftPullRequestReviewThread]

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of AddPullRequestReview"""
type GitHubAddPullRequestReviewPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The newly created pull request review."""
  pullRequestReview: GitHubPullRequestReview

  """The edge from the pull request's review connection."""
  reviewEdge: GitHubPullRequestReviewEdge
}

"""Autogenerated input type of AddProjectColumn"""
input GitHubAddProjectColumnInput {
  """The Node ID of the project."""
  projectId: ID!

  """The name of the column."""
  name: String!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of AddProjectColumn"""
type GitHubAddProjectColumnPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The edge from the project's column connection."""
  columnEdge: GitHubProjectColumnEdge

  """The project"""
  project: GitHubProject
}

"""Autogenerated input type of AddProjectCard"""
input GitHubAddProjectCardInput {
  """The Node ID of the ProjectColumn."""
  projectColumnId: ID!

  """The content of the card. Must be a member of the ProjectCardItem union"""
  contentId: ID

  """The note on the card."""
  note: String

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of AddProjectCard"""
type GitHubAddProjectCardPayload {
  """The edge from the ProjectColumn's card connection."""
  cardEdge: GitHubProjectCardEdge

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The ProjectColumn"""
  projectColumn: GitHubProjectColumn
}

"""Autogenerated input type of AddLabelsToLabelable"""
input GitHubAddLabelsToLabelableInput {
  """The id of the labelable object to add labels to."""
  labelableId: ID!

  """The ids of the labels to add."""
  labelIds: [ID!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of AddLabelsToLabelable"""
type GitHubAddLabelsToLabelablePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The item that was labeled."""
  labelable: GitHubLabelable
}

"""Autogenerated input type of AddEnterpriseSupportEntitlement"""
input GitHubAddEnterpriseSupportEntitlementInput {
  """The ID of the Enterprise which the admin belongs to."""
  enterpriseId: ID!

  """The login of a member who will receive the support entitlement."""
  login: String!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of AddEnterpriseSupportEntitlement"""
type GitHubAddEnterpriseSupportEntitlementPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """A message confirming the result of adding the support entitlement."""
  message: String
}

"""Autogenerated input type of AddDiscussionComment"""
input GitHubAddDiscussionCommentInput {
  """The Node ID of the discussion to comment on."""
  discussionId: ID!

  """
  The Node ID of the discussion comment within this discussion to reply to.
  """
  replyToId: ID

  """The contents of the comment."""
  body: String!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of AddDiscussionComment"""
type GitHubAddDiscussionCommentPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The newly created discussion comment."""
  comment: GitHubDiscussionComment
}

"""Autogenerated input type of AddComment"""
input GitHubAddCommentInput {
  """The Node ID of the subject to modify."""
  subjectId: ID!

  """The contents of the comment."""
  body: String!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of AddComment"""
type GitHubAddCommentPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The edge from the subject's comment connection."""
  commentEdge: GitHubIssueCommentEdge

  """The subject"""
  subject: GitHubNode

  """The edge from the subject's timeline connection."""
  timelineEdge: GitHubIssueTimelineItemEdge
}

"""Autogenerated input type of AddAssigneesToAssignable"""
input GitHubAddAssigneesToAssignableInput {
  """The id of the assignable object to add assignees to."""
  assignableId: ID!

  """The id of users to add as assignees."""
  assigneeIds: [ID!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of AddAssigneesToAssignable"""
type GitHubAddAssigneesToAssignablePayload {
  """The item that was assigned."""
  assignable: GitHubAssignable

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of AcceptTopicSuggestion"""
input GitHubAcceptTopicSuggestionInput {
  """The Node ID of the repository."""
  repositoryId: ID!

  """The name of the suggested topic."""
  name: String!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of AcceptTopicSuggestion"""
type GitHubAcceptTopicSuggestionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The accepted topic."""
  topic: GitHubTopic
}

"""Autogenerated input type of AcceptEnterpriseAdministratorInvitation"""
input GitHubAcceptEnterpriseAdministratorInvitationInput {
  """The id of the invitation being accepted"""
  invitationId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of AcceptEnterpriseAdministratorInvitation"""
type GitHubAcceptEnterpriseAdministratorInvitationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The invitation that was accepted."""
  invitation: GitHubEnterpriseAdministratorInvitation

  """
  A message confirming the result of accepting an administrator invitation.
  """
  message: String
}

"""The root query for implementing GraphQL mutations."""
type GitHubMutation {
  """
  Accepts a pending invitation for a user to become an administrator of an enterprise.
  """
  acceptEnterpriseAdministratorInvitation(
    """Parameters for AcceptEnterpriseAdministratorInvitation"""
    input: GitHubAcceptEnterpriseAdministratorInvitationInput!
  ): GitHubAcceptEnterpriseAdministratorInvitationPayload

  """Applies a suggested topic to the repository."""
  acceptTopicSuggestion(
    """Parameters for AcceptTopicSuggestion"""
    input: GitHubAcceptTopicSuggestionInput!
  ): GitHubAcceptTopicSuggestionPayload

  """Adds assignees to an assignable object."""
  addAssigneesToAssignable(
    """Parameters for AddAssigneesToAssignable"""
    input: GitHubAddAssigneesToAssignableInput!
  ): GitHubAddAssigneesToAssignablePayload

  """Adds a comment to an Issue or Pull Request."""
  addComment(
    """Parameters for AddComment"""
    input: GitHubAddCommentInput!
  ): GitHubAddCommentPayload

  """
  Adds a comment to a Discussion, possibly as a reply to another comment.
  """
  addDiscussionComment(
    """Parameters for AddDiscussionComment"""
    input: GitHubAddDiscussionCommentInput!
  ): GitHubAddDiscussionCommentPayload

  """Adds a support entitlement to an enterprise member."""
  addEnterpriseSupportEntitlement(
    """Parameters for AddEnterpriseSupportEntitlement"""
    input: GitHubAddEnterpriseSupportEntitlementInput!
  ): GitHubAddEnterpriseSupportEntitlementPayload

  """Adds labels to a labelable object."""
  addLabelsToLabelable(
    """Parameters for AddLabelsToLabelable"""
    input: GitHubAddLabelsToLabelableInput!
  ): GitHubAddLabelsToLabelablePayload

  """
  Adds a card to a ProjectColumn. Either `contentId` or `note` must be provided but **not** both.
  """
  addProjectCard(
    """Parameters for AddProjectCard"""
    input: GitHubAddProjectCardInput!
  ): GitHubAddProjectCardPayload

  """Adds a column to a Project."""
  addProjectColumn(
    """Parameters for AddProjectColumn"""
    input: GitHubAddProjectColumnInput!
  ): GitHubAddProjectColumnPayload

  """Adds a review to a Pull Request."""
  addPullRequestReview(
    """Parameters for AddPullRequestReview"""
    input: GitHubAddPullRequestReviewInput!
  ): GitHubAddPullRequestReviewPayload

  """Adds a comment to a review."""
  addPullRequestReviewComment(
    """Parameters for AddPullRequestReviewComment"""
    input: GitHubAddPullRequestReviewCommentInput!
  ): GitHubAddPullRequestReviewCommentPayload

  """Adds a new thread to a pending Pull Request Review."""
  addPullRequestReviewThread(
    """Parameters for AddPullRequestReviewThread"""
    input: GitHubAddPullRequestReviewThreadInput!
  ): GitHubAddPullRequestReviewThreadPayload

  """Adds a reaction to a subject."""
  addReaction(
    """Parameters for AddReaction"""
    input: GitHubAddReactionInput!
  ): GitHubAddReactionPayload

  """Adds a star to a Starrable."""
  addStar(
    """Parameters for AddStar"""
    input: GitHubAddStarInput!
  ): GitHubAddStarPayload

  """Add an upvote to a discussion or discussion comment."""
  addUpvote(
    """Parameters for AddUpvote"""
    input: GitHubAddUpvoteInput!
  ): GitHubAddUpvotePayload

  """Adds a verifiable domain to an owning account."""
  addVerifiableDomain(
    """Parameters for AddVerifiableDomain"""
    input: GitHubAddVerifiableDomainInput!
  ): GitHubAddVerifiableDomainPayload

  """Approve a verifiable domain for notification delivery."""
  approveVerifiableDomain(
    """Parameters for ApproveVerifiableDomain"""
    input: GitHubApproveVerifiableDomainInput!
  ): GitHubApproveVerifiableDomainPayload

  """Marks a repository as archived."""
  archiveRepository(
    """Parameters for ArchiveRepository"""
    input: GitHubArchiveRepositoryInput!
  ): GitHubArchiveRepositoryPayload

  """
  Cancels a pending invitation for an administrator to join an enterprise.
  """
  cancelEnterpriseAdminInvitation(
    """Parameters for CancelEnterpriseAdminInvitation"""
    input: GitHubCancelEnterpriseAdminInvitationInput!
  ): GitHubCancelEnterpriseAdminInvitationPayload

  """Update your status on GitHub."""
  changeUserStatus(
    """Parameters for ChangeUserStatus"""
    input: GitHubChangeUserStatusInput!
  ): GitHubChangeUserStatusPayload

  """Clears all labels from a labelable object."""
  clearLabelsFromLabelable(
    """Parameters for ClearLabelsFromLabelable"""
    input: GitHubClearLabelsFromLabelableInput!
  ): GitHubClearLabelsFromLabelablePayload

  """
  Creates a new project by cloning configuration from an existing project.
  """
  cloneProject(
    """Parameters for CloneProject"""
    input: GitHubCloneProjectInput!
  ): GitHubCloneProjectPayload

  """
  Create a new repository with the same files and directory structure as a template repository.
  """
  cloneTemplateRepository(
    """Parameters for CloneTemplateRepository"""
    input: GitHubCloneTemplateRepositoryInput!
  ): GitHubCloneTemplateRepositoryPayload

  """Close an issue."""
  closeIssue(
    """Parameters for CloseIssue"""
    input: GitHubCloseIssueInput!
  ): GitHubCloseIssuePayload

  """Close a pull request."""
  closePullRequest(
    """Parameters for ClosePullRequest"""
    input: GitHubClosePullRequestInput!
  ): GitHubClosePullRequestPayload

  """
  Convert a project note card to one associated with a newly created issue.
  """
  convertProjectCardNoteToIssue(
    """Parameters for ConvertProjectCardNoteToIssue"""
    input: GitHubConvertProjectCardNoteToIssueInput!
  ): GitHubConvertProjectCardNoteToIssuePayload

  """Create a new branch protection rule"""
  createBranchProtectionRule(
    """Parameters for CreateBranchProtectionRule"""
    input: GitHubCreateBranchProtectionRuleInput!
  ): GitHubCreateBranchProtectionRulePayload

  """Create a check run."""
  createCheckRun(
    """Parameters for CreateCheckRun"""
    input: GitHubCreateCheckRunInput!
  ): GitHubCreateCheckRunPayload

  """Create a check suite"""
  createCheckSuite(
    """Parameters for CreateCheckSuite"""
    input: GitHubCreateCheckSuiteInput!
  ): GitHubCreateCheckSuitePayload

  """Create a discussion."""
  createDiscussion(
    """Parameters for CreateDiscussion"""
    input: GitHubCreateDiscussionInput!
  ): GitHubCreateDiscussionPayload

  """Creates an organization as part of an enterprise account."""
  createEnterpriseOrganization(
    """Parameters for CreateEnterpriseOrganization"""
    input: GitHubCreateEnterpriseOrganizationInput!
  ): GitHubCreateEnterpriseOrganizationPayload

  """Creates a new IP allow list entry."""
  createIpAllowListEntry(
    """Parameters for CreateIpAllowListEntry"""
    input: GitHubCreateIpAllowListEntryInput!
  ): GitHubCreateIpAllowListEntryPayload

  """Creates a new issue."""
  createIssue(
    """Parameters for CreateIssue"""
    input: GitHubCreateIssueInput!
  ): GitHubCreateIssuePayload

  """Creates a new project."""
  createProject(
    """Parameters for CreateProject"""
    input: GitHubCreateProjectInput!
  ): GitHubCreateProjectPayload

  """Create a new pull request"""
  createPullRequest(
    """Parameters for CreatePullRequest"""
    input: GitHubCreatePullRequestInput!
  ): GitHubCreatePullRequestPayload

  """Create a new Git Ref."""
  createRef(
    """Parameters for CreateRef"""
    input: GitHubCreateRefInput!
  ): GitHubCreateRefPayload

  """Create a new repository."""
  createRepository(
    """Parameters for CreateRepository"""
    input: GitHubCreateRepositoryInput!
  ): GitHubCreateRepositoryPayload

  """Creates a new team discussion."""
  createTeamDiscussion(
    """Parameters for CreateTeamDiscussion"""
    input: GitHubCreateTeamDiscussionInput!
  ): GitHubCreateTeamDiscussionPayload

  """Creates a new team discussion comment."""
  createTeamDiscussionComment(
    """Parameters for CreateTeamDiscussionComment"""
    input: GitHubCreateTeamDiscussionCommentInput!
  ): GitHubCreateTeamDiscussionCommentPayload

  """Rejects a suggested topic for the repository."""
  declineTopicSuggestion(
    """Parameters for DeclineTopicSuggestion"""
    input: GitHubDeclineTopicSuggestionInput!
  ): GitHubDeclineTopicSuggestionPayload

  """Delete a branch protection rule"""
  deleteBranchProtectionRule(
    """Parameters for DeleteBranchProtectionRule"""
    input: GitHubDeleteBranchProtectionRuleInput!
  ): GitHubDeleteBranchProtectionRulePayload

  """Deletes a deployment."""
  deleteDeployment(
    """Parameters for DeleteDeployment"""
    input: GitHubDeleteDeploymentInput!
  ): GitHubDeleteDeploymentPayload

  """Delete a discussion and all of its replies."""
  deleteDiscussion(
    """Parameters for DeleteDiscussion"""
    input: GitHubDeleteDiscussionInput!
  ): GitHubDeleteDiscussionPayload

  """Delete a discussion comment. If it has replies, wipe it instead."""
  deleteDiscussionComment(
    """Parameters for DeleteDiscussionComment"""
    input: GitHubDeleteDiscussionCommentInput!
  ): GitHubDeleteDiscussionCommentPayload

  """Deletes an IP allow list entry."""
  deleteIpAllowListEntry(
    """Parameters for DeleteIpAllowListEntry"""
    input: GitHubDeleteIpAllowListEntryInput!
  ): GitHubDeleteIpAllowListEntryPayload

  """Deletes an Issue object."""
  deleteIssue(
    """Parameters for DeleteIssue"""
    input: GitHubDeleteIssueInput!
  ): GitHubDeleteIssuePayload

  """Deletes an IssueComment object."""
  deleteIssueComment(
    """Parameters for DeleteIssueComment"""
    input: GitHubDeleteIssueCommentInput!
  ): GitHubDeleteIssueCommentPayload

  """Deletes a project."""
  deleteProject(
    """Parameters for DeleteProject"""
    input: GitHubDeleteProjectInput!
  ): GitHubDeleteProjectPayload

  """Deletes a project card."""
  deleteProjectCard(
    """Parameters for DeleteProjectCard"""
    input: GitHubDeleteProjectCardInput!
  ): GitHubDeleteProjectCardPayload

  """Deletes a project column."""
  deleteProjectColumn(
    """Parameters for DeleteProjectColumn"""
    input: GitHubDeleteProjectColumnInput!
  ): GitHubDeleteProjectColumnPayload

  """Deletes a pull request review."""
  deletePullRequestReview(
    """Parameters for DeletePullRequestReview"""
    input: GitHubDeletePullRequestReviewInput!
  ): GitHubDeletePullRequestReviewPayload

  """Deletes a pull request review comment."""
  deletePullRequestReviewComment(
    """Parameters for DeletePullRequestReviewComment"""
    input: GitHubDeletePullRequestReviewCommentInput!
  ): GitHubDeletePullRequestReviewCommentPayload

  """Delete a Git Ref."""
  deleteRef(
    """Parameters for DeleteRef"""
    input: GitHubDeleteRefInput!
  ): GitHubDeleteRefPayload

  """Deletes a team discussion."""
  deleteTeamDiscussion(
    """Parameters for DeleteTeamDiscussion"""
    input: GitHubDeleteTeamDiscussionInput!
  ): GitHubDeleteTeamDiscussionPayload

  """Deletes a team discussion comment."""
  deleteTeamDiscussionComment(
    """Parameters for DeleteTeamDiscussionComment"""
    input: GitHubDeleteTeamDiscussionCommentInput!
  ): GitHubDeleteTeamDiscussionCommentPayload

  """Deletes a verifiable domain."""
  deleteVerifiableDomain(
    """Parameters for DeleteVerifiableDomain"""
    input: GitHubDeleteVerifiableDomainInput!
  ): GitHubDeleteVerifiableDomainPayload

  """Disable auto merge on the given pull request"""
  disablePullRequestAutoMerge(
    """Parameters for DisablePullRequestAutoMerge"""
    input: GitHubDisablePullRequestAutoMergeInput!
  ): GitHubDisablePullRequestAutoMergePayload

  """Dismisses an approved or rejected pull request review."""
  dismissPullRequestReview(
    """Parameters for DismissPullRequestReview"""
    input: GitHubDismissPullRequestReviewInput!
  ): GitHubDismissPullRequestReviewPayload

  """Enable the default auto-merge on a pull request."""
  enablePullRequestAutoMerge(
    """Parameters for EnablePullRequestAutoMerge"""
    input: GitHubEnablePullRequestAutoMergeInput!
  ): GitHubEnablePullRequestAutoMergePayload

  """Follow a user."""
  followUser(
    """Parameters for FollowUser"""
    input: GitHubFollowUserInput!
  ): GitHubFollowUserPayload

  """Invite someone to become an administrator of the enterprise."""
  inviteEnterpriseAdmin(
    """Parameters for InviteEnterpriseAdmin"""
    input: GitHubInviteEnterpriseAdminInput!
  ): GitHubInviteEnterpriseAdminPayload

  """Creates a repository link for a project."""
  linkRepositoryToProject(
    """Parameters for LinkRepositoryToProject"""
    input: GitHubLinkRepositoryToProjectInput!
  ): GitHubLinkRepositoryToProjectPayload

  """Lock a lockable object"""
  lockLockable(
    """Parameters for LockLockable"""
    input: GitHubLockLockableInput!
  ): GitHubLockLockablePayload

  """
  Mark a discussion comment as the chosen answer for discussions in an answerable category.
  """
  markDiscussionCommentAsAnswer(
    """Parameters for MarkDiscussionCommentAsAnswer"""
    input: GitHubMarkDiscussionCommentAsAnswerInput!
  ): GitHubMarkDiscussionCommentAsAnswerPayload

  """Mark a pull request file as viewed"""
  markFileAsViewed(
    """Parameters for MarkFileAsViewed"""
    input: GitHubMarkFileAsViewedInput!
  ): GitHubMarkFileAsViewedPayload

  """Marks a pull request ready for review."""
  markPullRequestReadyForReview(
    """Parameters for MarkPullRequestReadyForReview"""
    input: GitHubMarkPullRequestReadyForReviewInput!
  ): GitHubMarkPullRequestReadyForReviewPayload

  """Merge a head into a branch."""
  mergeBranch(
    """Parameters for MergeBranch"""
    input: GitHubMergeBranchInput!
  ): GitHubMergeBranchPayload

  """Merge a pull request."""
  mergePullRequest(
    """Parameters for MergePullRequest"""
    input: GitHubMergePullRequestInput!
  ): GitHubMergePullRequestPayload

  """Minimizes a comment on an Issue, Commit, Pull Request, or Gist"""
  minimizeComment(
    """Parameters for MinimizeComment"""
    input: GitHubMinimizeCommentInput!
  ): GitHubMinimizeCommentPayload

  """Moves a project card to another place."""
  moveProjectCard(
    """Parameters for MoveProjectCard"""
    input: GitHubMoveProjectCardInput!
  ): GitHubMoveProjectCardPayload

  """Moves a project column to another place."""
  moveProjectColumn(
    """Parameters for MoveProjectColumn"""
    input: GitHubMoveProjectColumnInput!
  ): GitHubMoveProjectColumnPayload

  """Pin an issue to a repository"""
  pinIssue(
    """Parameters for PinIssue"""
    input: GitHubPinIssueInput!
  ): GitHubPinIssuePayload

  """Regenerates the identity provider recovery codes for an enterprise"""
  regenerateEnterpriseIdentityProviderRecoveryCodes(
    """Parameters for RegenerateEnterpriseIdentityProviderRecoveryCodes"""
    input: GitHubRegenerateEnterpriseIdentityProviderRecoveryCodesInput!
  ): GitHubRegenerateEnterpriseIdentityProviderRecoveryCodesPayload

  """Regenerates a verifiable domain's verification token."""
  regenerateVerifiableDomainToken(
    """Parameters for RegenerateVerifiableDomainToken"""
    input: GitHubRegenerateVerifiableDomainTokenInput!
  ): GitHubRegenerateVerifiableDomainTokenPayload

  """Removes assignees from an assignable object."""
  removeAssigneesFromAssignable(
    """Parameters for RemoveAssigneesFromAssignable"""
    input: GitHubRemoveAssigneesFromAssignableInput!
  ): GitHubRemoveAssigneesFromAssignablePayload

  """Removes an administrator from the enterprise."""
  removeEnterpriseAdmin(
    """Parameters for RemoveEnterpriseAdmin"""
    input: GitHubRemoveEnterpriseAdminInput!
  ): GitHubRemoveEnterpriseAdminPayload

  """Removes the identity provider from an enterprise"""
  removeEnterpriseIdentityProvider(
    """Parameters for RemoveEnterpriseIdentityProvider"""
    input: GitHubRemoveEnterpriseIdentityProviderInput!
  ): GitHubRemoveEnterpriseIdentityProviderPayload

  """Removes an organization from the enterprise"""
  removeEnterpriseOrganization(
    """Parameters for RemoveEnterpriseOrganization"""
    input: GitHubRemoveEnterpriseOrganizationInput!
  ): GitHubRemoveEnterpriseOrganizationPayload

  """Removes a support entitlement from an enterprise member."""
  removeEnterpriseSupportEntitlement(
    """Parameters for RemoveEnterpriseSupportEntitlement"""
    input: GitHubRemoveEnterpriseSupportEntitlementInput!
  ): GitHubRemoveEnterpriseSupportEntitlementPayload

  """Removes labels from a Labelable object."""
  removeLabelsFromLabelable(
    """Parameters for RemoveLabelsFromLabelable"""
    input: GitHubRemoveLabelsFromLabelableInput!
  ): GitHubRemoveLabelsFromLabelablePayload

  """Removes outside collaborator from all repositories in an organization."""
  removeOutsideCollaborator(
    """Parameters for RemoveOutsideCollaborator"""
    input: GitHubRemoveOutsideCollaboratorInput!
  ): GitHubRemoveOutsideCollaboratorPayload

  """Removes a reaction from a subject."""
  removeReaction(
    """Parameters for RemoveReaction"""
    input: GitHubRemoveReactionInput!
  ): GitHubRemoveReactionPayload

  """Removes a star from a Starrable."""
  removeStar(
    """Parameters for RemoveStar"""
    input: GitHubRemoveStarInput!
  ): GitHubRemoveStarPayload

  """Remove an upvote to a discussion or discussion comment."""
  removeUpvote(
    """Parameters for RemoveUpvote"""
    input: GitHubRemoveUpvoteInput!
  ): GitHubRemoveUpvotePayload

  """Reopen a issue."""
  reopenIssue(
    """Parameters for ReopenIssue"""
    input: GitHubReopenIssueInput!
  ): GitHubReopenIssuePayload

  """Reopen a pull request."""
  reopenPullRequest(
    """Parameters for ReopenPullRequest"""
    input: GitHubReopenPullRequestInput!
  ): GitHubReopenPullRequestPayload

  """Set review requests on a pull request."""
  requestReviews(
    """Parameters for RequestReviews"""
    input: GitHubRequestReviewsInput!
  ): GitHubRequestReviewsPayload

  """Rerequests an existing check suite."""
  rerequestCheckSuite(
    """Parameters for RerequestCheckSuite"""
    input: GitHubRerequestCheckSuiteInput!
  ): GitHubRerequestCheckSuitePayload

  """Marks a review thread as resolved."""
  resolveReviewThread(
    """Parameters for ResolveReviewThread"""
    input: GitHubResolveReviewThreadInput!
  ): GitHubResolveReviewThreadPayload

  """Creates or updates the identity provider for an enterprise."""
  setEnterpriseIdentityProvider(
    """Parameters for SetEnterpriseIdentityProvider"""
    input: GitHubSetEnterpriseIdentityProviderInput!
  ): GitHubSetEnterpriseIdentityProviderPayload

  """
  Set an organization level interaction limit for an organization's public repositories.
  """
  setOrganizationInteractionLimit(
    """Parameters for SetOrganizationInteractionLimit"""
    input: GitHubSetOrganizationInteractionLimitInput!
  ): GitHubSetOrganizationInteractionLimitPayload

  """Sets an interaction limit setting for a repository."""
  setRepositoryInteractionLimit(
    """Parameters for SetRepositoryInteractionLimit"""
    input: GitHubSetRepositoryInteractionLimitInput!
  ): GitHubSetRepositoryInteractionLimitPayload

  """Set a user level interaction limit for an user's public repositories."""
  setUserInteractionLimit(
    """Parameters for SetUserInteractionLimit"""
    input: GitHubSetUserInteractionLimitInput!
  ): GitHubSetUserInteractionLimitPayload

  """Submits a pending pull request review."""
  submitPullRequestReview(
    """Parameters for SubmitPullRequestReview"""
    input: GitHubSubmitPullRequestReviewInput!
  ): GitHubSubmitPullRequestReviewPayload

  """Transfer an issue to a different repository"""
  transferIssue(
    """Parameters for TransferIssue"""
    input: GitHubTransferIssueInput!
  ): GitHubTransferIssuePayload

  """Unarchives a repository."""
  unarchiveRepository(
    """Parameters for UnarchiveRepository"""
    input: GitHubUnarchiveRepositoryInput!
  ): GitHubUnarchiveRepositoryPayload

  """Unfollow a user."""
  unfollowUser(
    """Parameters for UnfollowUser"""
    input: GitHubUnfollowUserInput!
  ): GitHubUnfollowUserPayload

  """Deletes a repository link from a project."""
  unlinkRepositoryFromProject(
    """Parameters for UnlinkRepositoryFromProject"""
    input: GitHubUnlinkRepositoryFromProjectInput!
  ): GitHubUnlinkRepositoryFromProjectPayload

  """Unlock a lockable object"""
  unlockLockable(
    """Parameters for UnlockLockable"""
    input: GitHubUnlockLockableInput!
  ): GitHubUnlockLockablePayload

  """
  Unmark a discussion comment as the chosen answer for discussions in an answerable category.
  """
  unmarkDiscussionCommentAsAnswer(
    """Parameters for UnmarkDiscussionCommentAsAnswer"""
    input: GitHubUnmarkDiscussionCommentAsAnswerInput!
  ): GitHubUnmarkDiscussionCommentAsAnswerPayload

  """Unmark a pull request file as viewed"""
  unmarkFileAsViewed(
    """Parameters for UnmarkFileAsViewed"""
    input: GitHubUnmarkFileAsViewedInput!
  ): GitHubUnmarkFileAsViewedPayload

  """Unmark an issue as a duplicate of another issue."""
  unmarkIssueAsDuplicate(
    """Parameters for UnmarkIssueAsDuplicate"""
    input: GitHubUnmarkIssueAsDuplicateInput!
  ): GitHubUnmarkIssueAsDuplicatePayload

  """Unminimizes a comment on an Issue, Commit, Pull Request, or Gist"""
  unminimizeComment(
    """Parameters for UnminimizeComment"""
    input: GitHubUnminimizeCommentInput!
  ): GitHubUnminimizeCommentPayload

  """Unpin a pinned issue from a repository"""
  unpinIssue(
    """Parameters for UnpinIssue"""
    input: GitHubUnpinIssueInput!
  ): GitHubUnpinIssuePayload

  """Marks a review thread as unresolved."""
  unresolveReviewThread(
    """Parameters for UnresolveReviewThread"""
    input: GitHubUnresolveReviewThreadInput!
  ): GitHubUnresolveReviewThreadPayload

  """Create a new branch protection rule"""
  updateBranchProtectionRule(
    """Parameters for UpdateBranchProtectionRule"""
    input: GitHubUpdateBranchProtectionRuleInput!
  ): GitHubUpdateBranchProtectionRulePayload

  """Update a check run"""
  updateCheckRun(
    """Parameters for UpdateCheckRun"""
    input: GitHubUpdateCheckRunInput!
  ): GitHubUpdateCheckRunPayload

  """Modifies the settings of an existing check suite"""
  updateCheckSuitePreferences(
    """Parameters for UpdateCheckSuitePreferences"""
    input: GitHubUpdateCheckSuitePreferencesInput!
  ): GitHubUpdateCheckSuitePreferencesPayload

  """Update a discussion"""
  updateDiscussion(
    """Parameters for UpdateDiscussion"""
    input: GitHubUpdateDiscussionInput!
  ): GitHubUpdateDiscussionPayload

  """Update the contents of a comment on a Discussion"""
  updateDiscussionComment(
    """Parameters for UpdateDiscussionComment"""
    input: GitHubUpdateDiscussionCommentInput!
  ): GitHubUpdateDiscussionCommentPayload

  """Updates the role of an enterprise administrator."""
  updateEnterpriseAdministratorRole(
    """Parameters for UpdateEnterpriseAdministratorRole"""
    input: GitHubUpdateEnterpriseAdministratorRoleInput!
  ): GitHubUpdateEnterpriseAdministratorRolePayload

  """Sets whether private repository forks are enabled for an enterprise."""
  updateEnterpriseAllowPrivateRepositoryForkingSetting(
    """Parameters for UpdateEnterpriseAllowPrivateRepositoryForkingSetting"""
    input: GitHubUpdateEnterpriseAllowPrivateRepositoryForkingSettingInput!
  ): GitHubUpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload

  """
  Sets the default repository permission for organizations in an enterprise.
  """
  updateEnterpriseDefaultRepositoryPermissionSetting(
    """Parameters for UpdateEnterpriseDefaultRepositoryPermissionSetting"""
    input: GitHubUpdateEnterpriseDefaultRepositoryPermissionSettingInput!
  ): GitHubUpdateEnterpriseDefaultRepositoryPermissionSettingPayload

  """
  Sets whether organization members with admin permissions on a repository can change repository visibility.
  """
  updateEnterpriseMembersCanChangeRepositoryVisibilitySetting(
    """
    Parameters for UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting
    """
    input: GitHubUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput!
  ): GitHubUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload

  """Sets the members can create repositories setting for an enterprise."""
  updateEnterpriseMembersCanCreateRepositoriesSetting(
    """Parameters for UpdateEnterpriseMembersCanCreateRepositoriesSetting"""
    input: GitHubUpdateEnterpriseMembersCanCreateRepositoriesSettingInput!
  ): GitHubUpdateEnterpriseMembersCanCreateRepositoriesSettingPayload

  """Sets the members can delete issues setting for an enterprise."""
  updateEnterpriseMembersCanDeleteIssuesSetting(
    """Parameters for UpdateEnterpriseMembersCanDeleteIssuesSetting"""
    input: GitHubUpdateEnterpriseMembersCanDeleteIssuesSettingInput!
  ): GitHubUpdateEnterpriseMembersCanDeleteIssuesSettingPayload

  """Sets the members can delete repositories setting for an enterprise."""
  updateEnterpriseMembersCanDeleteRepositoriesSetting(
    """Parameters for UpdateEnterpriseMembersCanDeleteRepositoriesSetting"""
    input: GitHubUpdateEnterpriseMembersCanDeleteRepositoriesSettingInput!
  ): GitHubUpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload

  """
  Sets whether members can invite collaborators are enabled for an enterprise.
  """
  updateEnterpriseMembersCanInviteCollaboratorsSetting(
    """Parameters for UpdateEnterpriseMembersCanInviteCollaboratorsSetting"""
    input: GitHubUpdateEnterpriseMembersCanInviteCollaboratorsSettingInput!
  ): GitHubUpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload

  """Sets whether or not an organization admin can make purchases."""
  updateEnterpriseMembersCanMakePurchasesSetting(
    """Parameters for UpdateEnterpriseMembersCanMakePurchasesSetting"""
    input: GitHubUpdateEnterpriseMembersCanMakePurchasesSettingInput!
  ): GitHubUpdateEnterpriseMembersCanMakePurchasesSettingPayload

  """
  Sets the members can update protected branches setting for an enterprise.
  """
  updateEnterpriseMembersCanUpdateProtectedBranchesSetting(
    """
    Parameters for UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting
    """
    input: GitHubUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput!
  ): GitHubUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload

  """Sets the members can view dependency insights for an enterprise."""
  updateEnterpriseMembersCanViewDependencyInsightsSetting(
    """Parameters for UpdateEnterpriseMembersCanViewDependencyInsightsSetting"""
    input: GitHubUpdateEnterpriseMembersCanViewDependencyInsightsSettingInput!
  ): GitHubUpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload

  """Sets whether organization projects are enabled for an enterprise."""
  updateEnterpriseOrganizationProjectsSetting(
    """Parameters for UpdateEnterpriseOrganizationProjectsSetting"""
    input: GitHubUpdateEnterpriseOrganizationProjectsSettingInput!
  ): GitHubUpdateEnterpriseOrganizationProjectsSettingPayload

  """Updates an enterprise's profile."""
  updateEnterpriseProfile(
    """Parameters for UpdateEnterpriseProfile"""
    input: GitHubUpdateEnterpriseProfileInput!
  ): GitHubUpdateEnterpriseProfilePayload

  """Sets whether repository projects are enabled for a enterprise."""
  updateEnterpriseRepositoryProjectsSetting(
    """Parameters for UpdateEnterpriseRepositoryProjectsSetting"""
    input: GitHubUpdateEnterpriseRepositoryProjectsSettingInput!
  ): GitHubUpdateEnterpriseRepositoryProjectsSettingPayload

  """Sets whether team discussions are enabled for an enterprise."""
  updateEnterpriseTeamDiscussionsSetting(
    """Parameters for UpdateEnterpriseTeamDiscussionsSetting"""
    input: GitHubUpdateEnterpriseTeamDiscussionsSettingInput!
  ): GitHubUpdateEnterpriseTeamDiscussionsSettingPayload

  """
  Sets whether two factor authentication is required for all users in an enterprise.
  """
  updateEnterpriseTwoFactorAuthenticationRequiredSetting(
    """Parameters for UpdateEnterpriseTwoFactorAuthenticationRequiredSetting"""
    input: GitHubUpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput!
  ): GitHubUpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload

  """Sets whether an IP allow list is enabled on an owner."""
  updateIpAllowListEnabledSetting(
    """Parameters for UpdateIpAllowListEnabledSetting"""
    input: GitHubUpdateIpAllowListEnabledSettingInput!
  ): GitHubUpdateIpAllowListEnabledSettingPayload

  """Updates an IP allow list entry."""
  updateIpAllowListEntry(
    """Parameters for UpdateIpAllowListEntry"""
    input: GitHubUpdateIpAllowListEntryInput!
  ): GitHubUpdateIpAllowListEntryPayload

  """Updates an Issue."""
  updateIssue(
    """Parameters for UpdateIssue"""
    input: GitHubUpdateIssueInput!
  ): GitHubUpdateIssuePayload

  """Updates an IssueComment object."""
  updateIssueComment(
    """Parameters for UpdateIssueComment"""
    input: GitHubUpdateIssueCommentInput!
  ): GitHubUpdateIssueCommentPayload

  """
  Update the setting to restrict notifications to only verified domains available to an owner.
  """
  updateNotificationRestrictionSetting(
    """Parameters for UpdateNotificationRestrictionSetting"""
    input: GitHubUpdateNotificationRestrictionSettingInput!
  ): GitHubUpdateNotificationRestrictionSettingPayload

  """Updates an existing project."""
  updateProject(
    """Parameters for UpdateProject"""
    input: GitHubUpdateProjectInput!
  ): GitHubUpdateProjectPayload

  """Updates an existing project card."""
  updateProjectCard(
    """Parameters for UpdateProjectCard"""
    input: GitHubUpdateProjectCardInput!
  ): GitHubUpdateProjectCardPayload

  """Updates an existing project column."""
  updateProjectColumn(
    """Parameters for UpdateProjectColumn"""
    input: GitHubUpdateProjectColumnInput!
  ): GitHubUpdateProjectColumnPayload

  """Update a pull request"""
  updatePullRequest(
    """Parameters for UpdatePullRequest"""
    input: GitHubUpdatePullRequestInput!
  ): GitHubUpdatePullRequestPayload

  """Updates the body of a pull request review."""
  updatePullRequestReview(
    """Parameters for UpdatePullRequestReview"""
    input: GitHubUpdatePullRequestReviewInput!
  ): GitHubUpdatePullRequestReviewPayload

  """Updates a pull request review comment."""
  updatePullRequestReviewComment(
    """Parameters for UpdatePullRequestReviewComment"""
    input: GitHubUpdatePullRequestReviewCommentInput!
  ): GitHubUpdatePullRequestReviewCommentPayload

  """Update a Git Ref."""
  updateRef(
    """Parameters for UpdateRef"""
    input: GitHubUpdateRefInput!
  ): GitHubUpdateRefPayload

  """Update information about a repository."""
  updateRepository(
    """Parameters for UpdateRepository"""
    input: GitHubUpdateRepositoryInput!
  ): GitHubUpdateRepositoryPayload

  """Updates the state for subscribable subjects."""
  updateSubscription(
    """Parameters for UpdateSubscription"""
    input: GitHubUpdateSubscriptionInput!
  ): GitHubUpdateSubscriptionPayload

  """Updates a team discussion."""
  updateTeamDiscussion(
    """Parameters for UpdateTeamDiscussion"""
    input: GitHubUpdateTeamDiscussionInput!
  ): GitHubUpdateTeamDiscussionPayload

  """Updates a discussion comment."""
  updateTeamDiscussionComment(
    """Parameters for UpdateTeamDiscussionComment"""
    input: GitHubUpdateTeamDiscussionCommentInput!
  ): GitHubUpdateTeamDiscussionCommentPayload

  """Replaces the repository's topics with the given topics."""
  updateTopics(
    """Parameters for UpdateTopics"""
    input: GitHubUpdateTopicsInput!
  ): GitHubUpdateTopicsPayload

  """Verify that a verifiable domain has the expected DNS record."""
  verifyVerifiableDomain(
    """Parameters for VerifyVerifiableDomain"""
    input: GitHubVerifyVerifiableDomainInput!
  ): GitHubVerifyVerifiableDomainPayload

  """
  Make a REST API call to the GitHub API.
  
  OneGraph will inject the auth params for the API call.
  
  Use this as an escape hatch if OneGraph does not yet support functionality of the underlying API.
  """
  makeRestCall: GithubPassthroughMutation!

  """
  Updates the currently authenticated user.
  
  If you receive a "Not found" error, it's indicative of insufficient permissions. You'll need to either use a personal access token or an OAuth token with the `user` scope (you can do this with a custom GitHub app auth for your OneGraph app).
  
  *Note*: If your email is set to private and you send an email parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.
  """
  updateAuthenticatedUser_oneGraph(input: GitHubUpdateAuthenticatedUser_oneGraphInput!): GitHubUpdateAuthenticatedUser_oneGraphResponsePayload! @deprecated(reason: "Temporary mutation until GitHub implemements their own updateAuthenticatedUser mutation.")

  """Merge a pull request"""
  mergePullRequest_oneGraph(input: GitHubMergePullRequest_oneGraphInput!): GitHubMergePullRequest_oneGraphResponsePayload! @deprecated(reason: "Temporary mutation until GitHub implemements their own mergePullRequest mutation.")

  """Create a fork"""
  createFork_oneGraph(input: GitHubCreateFork_oneGraphInput!): GitHubCreateFork_oneGraphResponsePayload! @deprecated(reason: "Temporary mutation until GitHub implemements their own createFork mutation.")

  """Create a pull request"""
  createPullRequest_oneGraph(input: GitHubCreatePullRequest_oneGraphInput!): GitHubCreatePullRequest_oneGraphResponsePayload! @deprecated(reason: "Temporary mutation until GitHub implemements their own createPullRequest mutation.")

  """Create a commit updating a single file"""
  createOrUpdateFileContent_oneGraph(input: GitHubCreateOrUpdateFileContent_oneGraphInput!): GitHubCreateOrUpdateFileContent_oneGraphResponsePayload! @deprecated(reason: "Temporary mutation until GitHub implemements their own updatefileContent mutation.")

  """Create a branch"""
  createBranch_oneGraph(input: GitHubCreateBranch_oneGraphInput!): GitHubCreateBranch_oneGraphResponsePayload! @deprecated(reason: "Temporary mutation until GitHub implemements their own createBranch mutation.")

  """Delete a milestone"""
  deleteMilestone_oneGraph(input: GitHubDeleteMilestone_oneGraphInput!): GitHubDeleteMilestone_oneGraphResponsePayload! @deprecated(reason: "Temporary mutation until GitHub implemements their own deleteMilestone mutation.")

  """Update a milestone"""
  updateMilestone_oneGraph(input: GitHubUpdateMilestone_oneGraphInput!): GitHubUpdateMilestone_oneGraphResponsePayload! @deprecated(reason: "Temporary mutation until GitHub implemements their own updateMilestone mutation.")

  """Create a milestone"""
  createMilestone_oneGraph(input: GitHubCreateMilestone_oneGraphInput!): GitHubCreateMilestone_oneGraphResponsePayload! @deprecated(reason: "Temporary mutation until GitHub implemements their own createMilestone mutation.")

  """Create an Issue"""
  createIssueTemp(input: GitHubCreateIssueTempInput!): GitHubCreateIssueTempResponsePayload! @deprecated(reason: "Temporary mutation until GitHub implemements their own createIssue mutation.")

  """Create an Repository"""
  createRepositoryTemp(input: GitHubCreateRepositoryTempInput!): GitHubCreateRepositoryTempResponsePayload! @deprecated(reason: "Use `mutation.gitHub.createRepository`.")
}

input SignoutServicesData {
  authlifyTokenId: String

  """
  Auths to establish the anchor. Note that these auths won't be removed from the personal token.
  """
  anchorAuth: OneGraphServiceAuths
  services: [OneGraphServiceEnum!]!
}

input OneGraphSignoutServiceUserInput {
  """
  Foreign user id for the user you want to sign out. You can find the foreignUser id through me.serviceMetadata.loggedInServices
  """
  foreignUserId: String!

  """Service that you want to sign out of."""
  service: OneGraphServiceEnum!
}

type SignoutServicesResponsePayload {
  me: Viewer!
}

input OneGraphCreateNetlifyTestEventDataInput {
  payload: JSON!
}

input OneGraphCreateNetlifyTestEvent {
  data: OneGraphCreateNetlifyTestEventDataInput!
  sessionId: String!
}

type OneGraphCreateNetlifyTestResponsePayload {
  event: OneGraphNetlifyCliSessionEvent!
}

input OneGraphCreateNetlifyLogEventDataInput {
  message: String!
}

input OneGraphCreateNetlifyLogEvent {
  data: OneGraphCreateNetlifyLogEventDataInput!
  sessionId: String!
}

type OneGraphCreateNetlifyLogResponsePayload {
  event: OneGraphNetlifyCliSessionEvent!
}

input OneGraphDeleteNetlifyCliSessionInput {
  """The id of the session."""
  sessionId: String!
}

type OneGraphDeleteNetlifyCliSessionResponsePayload {
  """The session that was deleted."""
  session: OneGraphNetlifyCliSession!
}

input OneGraphUpdateNetlifyCliSessionInput {
  """Mark the session active or inactive"""
  status: OneGraphNetlifyCliSessionStatus

  """Optional metadata for the session"""
  metadata: JSON

  """An optional name for the session"""
  name: String

  """The id of the session"""
  id: String!
}

type OneGraphUpdateNetlifyCliSessionResponsePayload {
  """The session that was updated."""
  session: OneGraphNetlifyCliSession!
}

input OneGraphCreateNetlifyCliSessionInput {
  """Optional metadata for the session"""
  metadata: JSON

  """An optional name for the session"""
  name: String
  appId: String!
}

type OneGraphCreateNetlifyCliSessionResponsePayload {
  """The session that was created."""
  session: OneGraphNetlifyCliSession!
}

input OneGraphAckNetlifyCliEventsInput {
  eventIds: [String!]!
  sessionId: String!
}

type OneGraphAckNetlifyCliEventsResponsePayload {
  """The list of events that were acknowledged"""
  events: [OneGraphNetlifyCliSessionEvent!]!
}

input OneGraphModifySchemaTokenInput {
  """Id for the app that you want to modify the schema for."""
  appId: String!
}

type OneGraphCreateModifySchemaTokenResponsePayload {
  """The access token that can be used to modify the app's schema."""
  accessToken: OneGraphAccessToken!
}

input OneGraphGraphQLSchemaExternalGraphQLSchemaInput {
  """The id of the external GraphQL schema."""
  externalGraphQLSchemaId: String!
}

input OneGraphCreateGraphQLSchemaInput {
  """
  Whether to set this schema as the default for the app. Defaults to false.
  """
  setAsDefaultForApp: Boolean = false

  """External GraphQL schemas to add"""
  externalGraphQLSchemas: [OneGraphGraphQLSchemaExternalGraphQLSchemaInput!]

  """Optional id of a Salesforce schema to attach to the app."""
  salesforceSchemaId: String

  """The optional id of the GraphQL schema that this was derived from."""
  parentId: String

  """
  The list of services that this schema should use. Leave blank if you want to add support for all supported services.
  """
  enabledServices: [OneGraphServiceEnumArg!]

  """The id of the app that the schema should belong to."""
  appId: String!
}

type OneGraphCreateGraphQLSchemaResponsePayload {
  graphqlSchema: OneGraphGraphQLSchema!
  app: OneGraphApp!
}

input OneGraphCreatePersonalTokenWithNetlifySiteAnchorInput {
  name: String!
  netlifySiteId: String!
}

type OneGraphCreatePersonalTokenWithNetlifySiteAnchorResponsePayload {
  """Personal access token that was created by this mutation"""
  accessToken: OneGraphAccessToken!
}

input OneGraphUpsertAppForNetlifySiteInput {
  netlifySiteId: String!
}

type OneGraphUpsertAppForNetlifySiteResponsePayload {
  """The app that is associated with the Netlify site."""
  app: OneGraphApp!

  """The app that is associated with the Netlify account."""
  org: OneGraphOrg!
}

input OneGraphCreateEmptyAccessTokenInput {
  """
  Number of seconds until the token should expire. Providing a value that is over two weeks of seconds will cause the request to be rejected
  """
  expiresIn: Int = 1209600
}

type OneGraphCreateEmptyAccessTokenPayload {
  """Access token that was created by this mutation"""
  accessToken: OneGraphAccessToken!
}

input OneGraphRemoveExternalHoneycombConfigInput {
  """Id of the app that the external Honeycomb config belongs to."""
  appId: String!
}

type OneGraphRemoveExternalHoneycombConfigPayload {
  """App that the external schema was removed from."""
  app: OneGraphApp
}

input OneGraphUpdateExternalHoneycombConfigInput {
  """
  If `true`, OneGraph will send events to Honeycomb. Set to `false` to stop sending metrics.
  """
  active: Boolean

  """Metrics to subscribe to, with preferred dataset name."""
  datasets: [OneGraphAddExternalHoneycombConfigDatasetInput!]

  """Honeycomb token with the ability to create datasets and send events."""
  token: String

  """App to add the honeycomb config to."""
  appId: String!
}

type OneGraphUpdateExternalHoneycombConfigPayload {
  """App that the Honeycomb config belongs to."""
  app: OneGraphApp

  """The Honeycomb config that was updated."""
  externalHoneycombConfig: OneGraphExternalHoneycombConfig!
}

input OneGraphAddExternalHoneycombConfigDatasetInput {
  """
  The name of the dataset that the events will be pushed to in Honeycomb.
  """
  datasetName: String!
  metricType: OneGraphExternalHoneycombConfigDatasetMetricTypeEnum!
}

input OneGraphAddExternalHoneycombConfigInput {
  """Metrics to subscribe to, with preferred dataset name."""
  datasets: [OneGraphAddExternalHoneycombConfigDatasetInput!]!

  """Honeycomb token with the ability to create datasets and send events."""
  token: String!

  """App to add the honeycomb config to."""
  appId: String!
}

type OneGraphAddExternalHoneycombConfigPayload {
  """App that the Honeycomb config was added to."""
  app: OneGraphApp

  """The Honeycomb config that was added."""
  externalHoneycombConfig: OneGraphExternalHoneycombConfig!
}

input OneGraphRemoveSlackEventWebhookInput {
  """Unique onegraph id of the slack event webhook."""
  id: String!
}

type OneGraphRemoveSlackEventWebhookPayload {
  """App that the slack event webhook belongs to."""
  app: OneGraphApp

  """The slack event webhook that was removed."""
  slackEventWebhook: OneGraphSlackEventWebhook!

  """Custom OAuth client that the slack event webhook belonged to."""
  serviceAuth: OneGraphServiceAuth!
}

input OneGraphSetSlackEventWebhookSigningSecretInput {
  """Slack app-level token with the authorizations:read scope."""
  signingSecret: String!

  """Unique onegraph id of the slack event webhook."""
  id: String!
}

type OneGraphSetSlackEventWebhookSigningSecretPayload {
  """App that the slack event webhook belongs to."""
  app: OneGraphApp

  """The slack event webhook that was mofified."""
  slackEventWebhook: OneGraphSlackEventWebhook!

  """Custom OAuth client that the slack event webhook belongs to."""
  serviceAuth: OneGraphServiceAuth!
}

input OneGraphSetSlackEventWebhookAppTokenInput {
  """Slack app-level token with the authorizations:read scope."""
  appToken: String!

  """Unique onegraph id of the slack event webhook."""
  id: String!
}

type OneGraphSetSlackEventWebhookAppTokenPayload {
  """App that the slack event webhook belongs to."""
  app: OneGraphApp

  """The slack event webhook that was mofified."""
  slackEventWebhook: OneGraphSlackEventWebhook!

  """Custom OAuth client that the slack event webhook belongs to."""
  serviceAuth: OneGraphServiceAuth!
}

input OneGraphAddSlackEventWebhookInput {
  """Slack app-level token with the authorizations:read scope."""
  appToken: String!

  """Slack event subscription webhook signing secret."""
  signingSecret: String!

  """Unique id for the app's Slack custom OAuth credentials."""
  serviceAuthId: String!

  """App to add the slack event webhook to."""
  appId: String!
}

type OneGraphAddSlackEventWebhookPayload {
  """App that the slack event webhook was added to."""
  app: OneGraphApp

  """The slack event webhook that was added."""
  slackEventWebhook: OneGraphSlackEventWebhook!

  """Custom OAuth client that the slack event webhook was added to."""
  serviceAuth: OneGraphServiceAuth!
}

input OneGraphRemoveGoogleSiteVerificationInput {
  """Id of the app to remove the Google Site Verification from."""
  appId: String!
}

type OneGraphRemoveGoogleSiteVerificationPayload {
  """App that the google site verification is being removed from."""
  app: OneGraphApp
}

input OneGraphAddGoogleSiteVerificationInput {
  """The body that Google will expect at the endpoint"""
  body: String!

  """The path that Google will crawl to check the site verification"""
  path: String!

  """App to add the external schema to."""
  appId: String!
}

type OneGraphAddGoogleSiteVerificationPayload {
  """App that the external schema was added to."""
  app: OneGraphApp

  """The google site verification that was added."""
  googleSiteVerification: OneGraphGoogleSiteVerification!
}

type OneGraphAddPreviewSalesforceSchemaForSalesforceViewerPayload {
  """The preview salesforce schema that was created."""
  salesforceSchema: OneGraphSalesforceSchema!
}

input OneGraphRemoveSalesforceSchemaInput {
  """Id of the Salesforce schema to update."""
  id: String!
}

type OneGraphRemoveSalesforceSchemaPayload {
  """App that the Salesforce schema was removed from."""
  app: OneGraphApp

  """The Salesforce schema that was removed."""
  salesforceSchema: OneGraphSalesforceSchema!
}

input OneGraphUpdateSalesforceSchemaInput {
  """Id of the Salesforce schema to update."""
  id: String!
}

type OneGraphUpdateSalesforceSchemaPayload {
  """App that the Salesforce schema was added to."""
  app: OneGraphApp

  """The Salesforce schema that was added."""
  salesforceSchema: OneGraphSalesforceSchema!
}

input OneGraphAddSalesforceSchemaInput {
  """App to add the salesforce schema to."""
  appId: String!
}

type OneGraphAddSalesforceSchemaPayload {
  """App that the salesforce schema was added to."""
  app: OneGraphApp

  """The salesforce schema that was added."""
  salesforceSchema: OneGraphSalesforceSchema!
}

input OneGraphPromotePreviewSalesforceSchemaInput {
  """The id of the salesforce schema to promote."""
  salesforceSchemaId: String!

  """App to add the preview salesforce schema to."""
  appId: String!
}

type OneGraphPromotePreviewSalesforceSchemaPayload {
  """App that the salesforce schema was added to."""
  app: OneGraphApp

  """The salesforce schema that was promoted."""
  salesforceSchema: OneGraphSalesforceSchema!
}

input OneGraphAddPreviewSalesforceSchemaInput {
  """App to add the preview salesforce schema to."""
  appId: String!
}

type OneGraphAddPreviewSalesforceSchemaPayload {
  """App that the salesforce schema was added to."""
  app: OneGraphApp

  """The preview salesforce schema that was added."""
  salesforceSchema: OneGraphSalesforceSchema!

  """The GraphQL schema for the app after the preview schema is applied."""
  previewSchema: JSON!

  """The current GraphQL schema for the app."""
  currentSchema: JSON!
}

input OneGraphRemoveExternalGraphQLSchemaInput {
  """Id of the external schema to update."""
  id: String!
}

type OneGraphRemoveExternalGraphQLSchemaPayload {
  """App that the external schema was removed from."""
  app: OneGraphApp

  """The external schema that was removed."""
  externalGraphQLSchema: OneGraphExternalGraphQLSchema!
}

input OneGraphUpdateExternalGraphQLSchemaInput {
  """Endpoint to make GraphQL queries against."""
  endpoint: String!

  """Id of the external schema to update."""
  id: String!
}

type OneGraphUpdateExternalGraphQLSchemaPayload {
  """App that the external schema was added to."""
  app: OneGraphApp

  """The external schema that was added."""
  externalGraphQLSchema: OneGraphExternalGraphQLSchema!
}

input OneGraphAddExternalGraphQLSchemaInput {
  """Endpoint to make GraphQL queries against."""
  service: OneGraphSupportedExternalGraphQLService!

  """Endpoint to make GraphQL queries against."""
  endpoint: String!

  """App to add the external schema to."""
  appId: String!
}

type OneGraphAddExternalGraphQLSchemaPayload {
  """App that the external schema was added to."""
  app: OneGraphApp

  """The external schema that was added."""
  externalGraphQLSchema: OneGraphExternalGraphQLSchema!
}

input OneGraphEnableGitHubAppWebhookInput {
  serviceAuthId: String!
}

type OneGraphEnableGitHubAppWebhookResponsePayload {
  """Custom OAuth Client that was updated"""
  serviceAuth: OneGraphServiceAuth!

  """GitHub app webhook that was created"""
  gitHubAppWebhook: OneGraphGitHubAppWebhook!
}

type OneGraphSignoutResponsePayload {
  me: Viewer!
}

"""A OneGraph SignIn result"""
type OneGraphSignInResult {
  """
  The accessToken that can be used to make requests on behalf of the OneGraph user
  """
  accessToken: OneGraphAccessToken
}

input OneGraphDisableAuthGuardianSlackIntegrationInput {
  appId: String!
}

type OneGraphDisableAuthGuardianSlackIntegrationResponsePayload {
  app: OneGraphApp
}

input OneGraphEnableAuthGuardianSlackIntegrationInput {
  authToken: String!
  channel: String!
  appId: String!
}

type OneGraphEnableAuthGuardianSlackIntegrationResponsePayload {
  app: OneGraphApp
}

input OneGraphDisableGithubRepositorySubscriptionDelegationByIdInput {
  """The id of the delegation."""
  id: String!
}

type OneGraphDisableGithubRepositorySubscriptionDelegationByIdResult {
  """The App that delegation was disabled for."""
  app: OneGraphApp!
}

input OneGraphDisableGithubRepositorySubscriptionDelegationInput {
  """
  The name of the repo, e.g. `graphiql-explorer` in `onegraph/graphiql-explorer`.
  """
  repoName: String!

  """
  The owner of the repo, e.g. `onegraph` in `onegraph/graphiql-explorer`.
  """
  repoOwner: String!
}

type OneGraphDisableGithubRepositorySubscriptionDelegationResult {
  """The GitHub repository name of app that delegation was enabled for."""
  repoName: String!

  """The GitHub repository owner of app that delegation was enabled for."""
  repoOwner: String!
}

input OneGraphEnableGithubRepositorySubscriptionDelegationInput {
  """
  The name of the repo, e.g. `graphiql-explorer` in `onegraph/graphiql-explorer`.
  """
  repoName: String!

  """
  The owner of the repo, e.g. `onegraph` in `onegraph/graphiql-explorer`.
  """
  repoOwner: String!
}

type OneGraphEnableGithubRepositorySubscriptionDelegationResult {
  """The GitHub repository name of app that delegation was disabled for."""
  repoName: String!

  """The GitHub repository owner of app that delegation was disabled for."""
  repoOwner: String!
}

input OneGraphEvictCachedPersistedQueryResultsInput {
  """The operationName of the cached result."""
  operationName: String

  """
  Variables values that must match. Note that this specifies the *minimum* of the match: even if there are *additional* variables in the cached query that weren't provided here, if the cached query successfully matches *at least* the variables provided here, the result will be removed from the cache.
  """
  variables: JSON

  """The id of the persisted query."""
  docId: String!

  """Id for the app that the query was persisted on."""
  appId: String!
}

type OneGraphEvictCachedResultsResponsePayload {
  docId: String!
}

input OneGraphDeletePersistedQueryInput {
  id: String!
  appId: String!
}

type OneGraphDeletePersistedQueryResponsePayload {
  app: OneGraphApp!
}

input OneGraphPersistedQueryTokenInput {
  """Id for the app that you want to persist queries on."""
  appId: String!
}

type OneGraphCreatePersitQueryTokenResponsePayload {
  """The access token that can be used to persist queries"""
  accessToken: OneGraphAccessToken!
}

input OneGraphUpdatePersistedQueryInput {
  """Replace the current tags on the query with the provided tags."""
  replaceTags: [String!]

  """Tags to remove from the query"""
  removeTags: [String!]

  """Tags to add to the query."""
  addTags: [String!]

  """A new description for the query."""
  description: String
  accessToken: String

  """The id of the app that the persisted query belongs to."""
  appId: String!

  """The id of the persisted query."""
  id: String!
}

type OneGraphUpdatedPersistedQueryResponsePayload {
  persistedQuery: OneGraphPersistedQuery!
}

input OneGraphCreatePersistedQueryParentInput {
  """
  An optional list of tags to remove from the parent query. If any of the provided tags aren't present on the parent, the mutation will fail. No persisted queries will be created and no tags will be removed from the parent.
  """
  removeTags: [String!]

  """The id of the parent"""
  id: String!
}

input OneGraphPersistedQueryCacheStrategyArg {
  """Number of seconds to cache the query result for."""
  timeToLiveSeconds: Float!
}

input OneGraphCreatePersistedQueryInput {
  """
  The parent persisted query. It can be used to track lineage of the query.
  """
  parent: OneGraphCreatePersistedQueryParentInput

  """
  A description for the persisted query. Maximum length is 2096 characters.
  """
  description: String

  """
  List of tags to add to the persisted query. Tags are free-form text that can be used to categorize persisted queries. Each tag must be under 256 characters and there can be a maximum of 10 tags on a single persisted query.
  """
  tags: [String!]
  accessToken: String

  """
  If set to true, and there was a successful execution of the query in the last 30 days, then the last successful result will be returned if we encounter any error when executing the query. If we do not have a previous successful result, then the response with the error will be returned.
  
  Note that the fallback result will be returned even in the case of partial success.
  
  This parameter is useful when you expect that your queries might be rate-limited by the underlying service.
  
  The query must provide a cache strategy in order to use `fallbackOnError`.
  """
  fallbackOnError: Boolean
  cacheStrategy: OneGraphPersistedQueryCacheStrategyArg

  """
  Operation names to allow. If not provided, then all operations in the document are allowed.
  """
  allowedOperationNames: [String!]
  fixedVariables: JSON
  freeVariables: [String!]
  query: String!
  appId: String!
}

type OneGraphPersistedQueryResponsePayload {
  persistedQuery: OneGraphPersistedQuery!
}

enum OneGraphDataVitualizationSupportedServiceArg {
  GMAIL
}

input OneGraphStartDataVirtualizationInput {
  """
  Account ID to enable the service for. Must match the currently logged in account id
  """
  accountId: String!

  """Service to enable data virtualization for"""
  service: OneGraphDataVitualizationSupportedServiceArg!
}

"""
Information about data virtualization that has been enabled for a service 
"""
type OneGraphDataVirtualizationDetails {
  accountId: String!
  graphQLEndpoint: String!
  service: String!
}

type OneGraphStartDataVirtualizationPayload {
  """Organization that was updated by this mutation"""
  dataVirutalizationDetails: OneGraphDataVirtualizationDetails!
}

input OneGraphUpdateAppByIdPatch {
  """New name for the app"""
  name: String!
}

input OneGraphUpdateAppByIdInput {
  """New fields for the app"""
  patch: OneGraphUpdateAppByIdPatch!

  """Id of the app"""
  id: String!
}

type OneGraphUpdateAppByIdResponsePayload {
  """App that was updated by this mutation"""
  app: OneGraphApp!
}

input OneGraphUpdateOrgByIdPatch {
  """New name for the organization"""
  name: String!
}

input OneGraphUpdateOrgByIdInput {
  """New fields for the organization"""
  patch: OneGraphUpdateOrgByIdPatch!

  """Id of the organization"""
  id: String!
}

type OneGraphUpdateOrgByIdResponsePayload {
  """Organization that was updated by this mutation"""
  org: OneGraphOrg!
}

input OneGraphCreateOrgInput {
  """Name for the organization"""
  name: String!
}

type OneGraphCreateOrgResponsePayload {
  """Organization that was created by this mutation"""
  org: OneGraphOrg!
}

input OneGraphCreateShortenedUrlInput {
  operation: String
  description: String
  name: String
  variables: String
  query: String!
}

type OneGraphShortenUrlResponsePayload {
  shortenedUrl: OneGraphShortenedQuery!
}

input OneGraphPersistAuthsInput {
  """
  Optional OneGraph accessToken to add the auths to. If not provided, OneGraph will look for a Bearer token in the Authorization header.
  """
  accessToken: String
  auths: OneGraphServiceAuths!
}

type OneGraphPersistAuthsResponsePayload {
  me: Viewer!
}

input OneGraphAddAuthsToPersonalTokenInput {
  authlifyTokenId: String

  """
  Auths to establish the anchor. Note that these auths won't be added to the personal token.
  """
  anchorAuth: OneGraphServiceAuths
  appId: String!

  """
  Token that will be destroyed and have its auths moved to the personal token.
  """
  sacrificialToken: String!
  personalToken: String
}

type OneGraphAddAuthsToPersonalTokenResponsePayload {
  """Personal access token that was updated by this mutation"""
  accessToken: OneGraphAccessToken!

  """OneGraph user"""
  oneUser: OneGraphUser
}

input OneGraphDeletePersonalTokenInput {
  appId: String!
  accessToken: String!
}

type OneGraphDeletePersonalTokenResponsePayload {
  """OneGraph user"""
  oneUser: OneGraphUser!
}

input OneGraphCreatePersonalTokenInput {
  anchor: OneGraphAccessTokenAnchorEnum = ONEGRAPH_USER
  appId: String!
  accessToken: String!
  name: String!
}

type OneGraphCreatePersonalTokenResponsePayload {
  """Personal access token that was created by this mutation"""
  accessToken: OneGraphAccessToken!

  """OneGraph user"""
  oneUser: OneGraphUser
}

"""Fields to change on a subscription."""
input OneGraphGraphQLSubscriptionUpdateInputPatch {
  """The new variables to replace the existing query variables."""
  variables: JSON

  """The new query to replace the existing subscription query."""
  query: String!
}

input OneGraphSubscriptionSecretInput {
  """
  A hex-encoded key that will be used to sign all webhooks sent from this subscription.
  
  You can use the signature to validate that the subscription was sent from OneGraph.
  
  The signature will be sent in the `X-OneGraph-Signature` header of the webhook. The header will contain two parts, a signature and a timestamp (in seconds since the epoch), in the following format:
  
  ```
  X-OneGraph-Signature: t=1582852002,hmac_sha256=7d797ecd431e1a98aaba2f387f2c43241a13c1f093fd9d7e661758963744549a
  ```
  
  To verify the signature:
  1. Extract the timestamp (1582852002 above)
  2. Extract the signature (7d797ecd431e1a98aaba2f387f2c43241a13c1f093fd9d7e661758963744549a above)
  3. Concatenate the timestamp and the request body, separeted by a period (e.g. `t + '.' + requestBody`)
  4. Compute the hmac_sha256 hash of (3)
  5. Compare the hash with the provided signature using a constant-time comparison function (e.g. crypto.timingSafeEqual in Node)
  6. Reject the request if the hash you computed does not match the provided signature or if the timestamp is too far in the past (typically, 5 minutes)
  
  Example for validating the body in Node.js:
  
  ```js
  const SECRET = 'your hmacSha256Key';
  const signature = res.get('X-OneGraph-Signature');
  if (!signature) {
    throw new Error('Missing signature');
  }
  
  const sig = {};
  for (const pair of signature.split(',')) {
    const [k, v] = pair.split('=');
    sig[k] = v;
  }
  
  if (!sig.t || !sig.hmac_sha256) {
    throw new Error('Invalid signature header');
  }
  
  const hash = crypto
    .createHmac('sha256', SECRET)
    .update(sig.t)
    .update('.')
    .update(res.body)
    .digest('hex');
  
  if (
    !crypto.timingSafeEqual(
      Buffer.from(hash, 'hex'),
      Buffer.from(sig.hmac_sha256, 'hex'),
    )
  ) {
    throw new Error('Invalid signature');
  }
  
  if (parseInt(sig.t, 10) < Date.now() / 1000 - 300 /* 5 minutes */) {
    throw new Error('Request is too old');
  }
  
  // Signature is valid
  ```
  
  Examples for creating the key:
  
  Cli:
  ```cli
  $ openssl rand -hex 32
  ```
  
  Node:
  ```js
  require('crypto').randomBytes(32).toString('hex');
  ```
  
  Ruby:
  ```ruby
  ruby -rsecurerandom -e 'puts SecureRandom.hex(32)'
  ```
  """
  hmacSha256Key: String
}

input OneGraphGraphQLSubscriptionUpdateInput {
  """The fields of the subscription to update."""
  patch: OneGraphGraphQLSubscriptionUpdateInputPatch!

  """
  The signing secret that the subscription was created with. Note that this will not update the existing secret.
  """
  secret: OneGraphSubscriptionSecretInput
  subscriptionId: String!
}

type OneGraphGraphQLSubscriptionUpdateResponsePayload {
  """GraphQL Subscription that was modified by this mutation"""
  subscription: OneGraphAppSubscription!
}

input OneGraphGraphQLSubscriptionUnsubscribeInput {
  subscriptionId: String!
}

type OneGraphGraphQLSubscriptionUnsubscribeResponsePayload {
  """GraphQL Subscription that was modified by this mutation"""
  subscription: OneGraphAppSubscription!
}

input OneGraphDestroyServiceAuthInput {
  serviceAuthId: String!
  appId: String!
}

type OneGraphDestroyServiceAuthResponsePayload {
  """Service auth that was destroyed by this mutation"""
  serviceAuth: OneGraphServiceAuth!
  app: OneGraphApp!
}

"""
Services OneGraph supports providing a custom clientId/clientSecret for.
"""
enum OneGraphCustomServiceAuthServiceEnum {
  ADROLL
  ASANA
  BOX
  CONTENTFUL
  DEV_TO
  DOCUSIGN
  DRIBBBLE
  DROPBOX
  EGGHEADIO
  EVENTIL
  FACEBOOK
  FIREBASE
  GITHUB
  GMAIL
  GONG
  GOOGLE
  GOOGLE_ADS
  GOOGLE_ANALYTICS
  GOOGLE_CALENDAR
  GOOGLE_COMPUTE
  GOOGLE_DOCS
  GOOGLE_SEARCH_CONSOLE
  GOOGLE_TRANSLATE
  HUBSPOT
  INTERCOM
  MAILCHIMP
  MEETUP
  NETLIFY
  NOTION
  OUTREACH
  PRODUCT_HUNT
  QUICKBOOKS
  SALESFORCE
  SANITY
  SLACK
  SPOTIFY
  STRIPE
  TRELLO
  TWILIO
  TWITTER
  TWITCH_TV
  YNAB
  YOUTUBE
  ZEIT
  ZENDESK
}

input OneGraphCreateServiceAuthInput {
  """Custom cname for the custom OAuth client."""
  cname: String

  """Custom redirect URI."""
  customRedirectUri: String

  """
  Whether the user who created the token should be able to fetch it from OneGraph. Defaults to false.
  """
  revealTokens: Boolean = false

  """Optional list of scopes to use for your app."""
  scopes: [String!]

  """App name for trello. Required to use custom Trello credentials."""
  trelloAppName: String

  """
  Developer token for the Google Ads api. This param is required for using custom OAuth credentials for Google Ads.
  
  A developer token from Google allows your app to connect to the Google Ads API. To retrieve your developer token, sign in to your Manager Account. You must be signed-in to a Google Ads Manager Account before continuing.
  
  Navigate to TOOLS & SETTINGS > SETUP > API Center. The API Center option will appear only for Google Ads Manager Accounts.
  
  If your developer token is pending approval, you can start developing immediately with the pending token you received during sign up, using a test manager account.
  
  Your pending developer token must be approved before using it with production Google Ads accounts.
  """
  googleDeveloperToken: String

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String
  clientSecret: String!
  clientId: String!
  service: OneGraphCustomServiceAuthServiceEnum!
  appId: String!
}

type OneGraphCreateServiceAuthResponsePayload {
  """Service auth that was created by this mutation"""
  serviceAuth: OneGraphServiceAuth!
  app: OneGraphApp!
}

input OneGraphRemoveNetlifySiteFromAppCORSOriginsInput {
  netlifySite: String!
  appId: String!
}

type OneGraphRemoveNetlifySiteFromAppCORSOriginsResponsePayload {
  app: OneGraphApp!
}

input OneGraphAddNetlifySiteToAppCORSOriginsInput {
  netlifySite: String!
  appId: String!
}

type OneGraphAddNetlifySiteToAppCORSOriginsResponsePayload {
  app: OneGraphApp!
}

input OneGraphRemoveCustomCorsOriginFromAppInput {
  customCorsOrigin: String!
  appId: String!
}

type OneGraphRemoveCustomCorsOriginFromAppResponsePayload {
  app: OneGraphApp!
}

input OneGraphRemoveCORSOriginFromAppInput {
  corsOrigin: String!
  appId: String!
}

type OneGraphRemoveCORSOriginFromAppResponsePayload {
  app: OneGraphApp!
}

input OneGraphAddCORSOriginToAppInput {
  corsOrigin: String!
  appId: String!
}

type OneGraphAddCORSOriginToAppResponsePayload {
  app: OneGraphApp!
}

input SetAppCORSOriginsData {
  corsOrigins: [String!]!
  appId: String!
}

type SetAppCORSOriginsResponsePayload {
  app: OneGraphApp!
}

enum OneGraphQueryChainIfMissingEnum {
  ERROR
  ALLOW
  SKIP
}

enum OneGraphQueryChainIfListEnum {
  FIRST
  LAST
  ALL
  EACH
}

input OneGraphQueryChainArgumentDependencyInput {
  functionFromScript: String!
  maxRecur: Int = 1
  ifMissing: OneGraphQueryChainIfMissingEnum
  ifList: OneGraphQueryChainIfListEnum
  fromRequestIds: [String!]!
  name: String!
}

input OneGraphQueryChainVariableInput {
  value: JSON
  name: String!
}

input OneGraphQueryChainRequestInput {
  argumentDependencies: [OneGraphQueryChainArgumentDependencyInput!] = []
  variables: [OneGraphQueryChainVariableInput!] = []

  """The query to run. Must provide one of `query` or `operationName`."""
  query: String

  """
  The operationName of the query in the document to run. Must provide one of `query` or `operationName`.
  """
  operationName: String

  """
  The id of the query. If you provide a script in the argument dependencies for a request that depends on this query, the data from this query will be provided as `{"$ID": query-result}`.  This will typically be the same as the operation name, but could be different if your chain needs to use the same query in multiple requests.
  """
  id: String!
}

"""
Dependencies from npm. Only allows packages that don't have any dependencies of their own. Packages that rely on filesystem APIs may not work. Must provide the exact version string.
"""
input OneGraphQueryChainScriptDependencyInput {
  """
  The package's version string, e.g. `4.17.21`. Only accepts exact version strings.
  """
  version: String!

  """The name of the package, e.g. `lodash`."""
  name: String!
}

input OneGraphQueryChainInput {
  """
  If true, will copy errors from the `OneGraphQueryChainMutationResult.result` field to the top-level `errors` field. Defaults to true.
  """
  liftErrors: Boolean = true
  requests: [OneGraphQueryChainRequestInput!]!
  scriptDependencies: [OneGraphQueryChainScriptDependencyInput!]
  script: String
}

type OneGraphQueryChainMutationArgumentDependencyError {
  """The name of the error"""
  name: String

  """The error message"""
  message: String

  """The error stack, as a string"""
  stackString: String
}

type OneGraphQueryChainMutationArgumentDependencyConsoleLog {
  """The log level, `debug`, `info`, `warn`, or `error`"""
  level: String!

  """The log body."""
  body: [JSON!]!
}

type OneGraphQueryChainMutationArgumentDependencyResult {
  """The name of the argument dependency"""
  name: String!

  """The return values of the argument dependency script."""
  returnValues: [JSON!]

  """Logs captured by calling `console.log` in the script."""
  logs: [OneGraphQueryChainMutationArgumentDependencyConsoleLog!]!

  """Error, if there was an error evaluating the script."""
  error: OneGraphQueryChainMutationArgumentDependencyError
}

type OneGraphQueryChainRequest {
  """The id of the request"""
  id: String!
}

type OneGraphQueryChainMutationResult {
  """The request."""
  request: OneGraphQueryChainRequest!

  """Debug information for the argument dependencies"""
  argumentDependencies: [OneGraphQueryChainMutationArgumentDependencyResult!]!

  """The result of the query"""
  result: [JSON]!
}

type OneGraphQueryChainMutationPayload {
  results: [OneGraphQueryChainMutationResult!]!
}

"""Tours for exploring OneGraph"""
enum OneGraphTourEnum {
  DASHBOARD
  QUERYCHAIN
  AUTHGUARDIAN
}

input OneGraphCompleteTourData {
  tour: OneGraphTourEnum!
}

type OneGraphCompleteTourResponsePayload {
  me: Viewer!
}

input OneGraphUnLinkOneGraphNodesInput {
  """The `oneGraphId` for the end node"""
  endNodeOneGraphId: String!

  """The `oneGraphId` for the start node"""
  startNodeOneGraphId: String!
}

type OneGraphUnLinkOneGraphNodesResponsePayload {
  startNode: OneGraphNode
  endNode: OneGraphNode
}

input OneGraphLinkOneGraphNodesInput {
  """The `oneGraphId` for the end node"""
  endNodeOneGraphId: String!

  """The `oneGraphId` for the start node"""
  startNodeOneGraphId: String!
}

type OneGraphLinkOneGraphNodesResponsePayload {
  startNode: OneGraphNode
  endNode: OneGraphNode
}

"""GraphQL types that support linking"""
enum OneGraphServiceLinkGraphQLTypeEnum {
  GitHubIssue
  GitHubIssueComment
  GitHubUser
  HubspotContact
  IntercomUser
  SalesforceAccount
  SalesforceCase
  SalesforceCaseComment
  SalesforceContact
  SalesforceFeedComment
  SalesforceFeedItem
  SalesforceLead
  SalesforceUser
  StripeCustomer
  StripeRefund
  ZendeskUser
}

input OneGraphServiceLinkNodeArg {
  id: String!
  type: OneGraphServiceLinkGraphQLTypeEnum!
}

input OneGraphCreateServiceLinkArg {
  endNode: OneGraphServiceLinkNodeArg!
  startNode: OneGraphServiceLinkNodeArg!
}

type OneGraphServiceLinkNode {
  type: String!
  id: String!
}

type OneGraphCreateServiceLinkResponsePayload {
  startNode: OneGraphServiceLinkNode!
  endNode: OneGraphServiceLinkNode!
}

input OneGraphDangerouslySignJwtPayloadInput {
  expiresInSeconds: Int = 300
  includeBaseFields: Boolean = true
  payload: JSON!
}

type OneGraphDangerouslySignJwtPayloadResponsePayload {
  encoded: String!
}

input OneGraphSetAppNetlifySiteNamesInput {
  netlifySiteNames: [String!]!
}

type OneGraphSetAppNetlifySiteNamesResponsePayload {
  app: OneGraphApp!
}

input OneGraphSetAuthGuardianActiveInput {
  active: Boolean!
}

type OneGraphSetAuthGuardianActiveResponsePayload {
  app: OneGraphApp
}

"""Signing algorithm for JWTs generated by Onegraph"""
enum OneGraphJwtSigningAlgorithmEnumArg {
  HMAC_256
  RSA_256
}

input OneGraphSetJwtSigningAlgorithmAndSecretInput {
  """
  When using symmetric (HMAC) algorithms, this is the shared secret OneGraph will use to sign the generated JSON web tokens.
  """
  sharedSecret: String

  """
  When generating a JWT for SSO, OneGraph can sign the JSON tokens with either a shared-secret (symmetric) key (HMAC) or a public/private (asymmetric) key pair (RSA)
  """
  signingAlgorithm: OneGraphJwtSigningAlgorithmEnumArg!
}

type OneGraphSetJwtSigningAlgorithmAndSecretPayload {
  app: OneGraphApp!
}

input OneGraphSetJwtPreflightQueryAndWebhookUrlInput {
  """
  An optional GraphQL query to run after a user has signed into any service. The result will be included in the body for the preflight webhook. You may want to use this to retrieve a user's Google subId, or a list of GitHub organization names a user belongs.
  """
  preflightQuery: String

  """
  When generating a JWT for SSO using OneGraph to authenticate
                  with third-parties, you can run an optional GraphQL query and
                  send the result to a webhook for preprocessing before OneGraph
                  signs the final token and passes it to the client
  """
  webhookUrl: String
}

type OneGraphSetAppJwtPreflightQueryResponsePayload {
  app: OneGraphApp!
}

"""Mutations related to apps"""
type OneGraphAppMutations {
  setCORSOrigins(corsOrigins: [String!]!): OneGraphApp!
  setJwtPreflightQueryAndWebhookUrl(input: OneGraphSetJwtPreflightQueryAndWebhookUrlInput!): OneGraphSetAppJwtPreflightQueryResponsePayload
  setJwtSigningAlgorithmAndSecret(input: OneGraphSetJwtSigningAlgorithmAndSecretInput!): OneGraphSetJwtSigningAlgorithmAndSecretPayload
  setAuthGuardianActive(input: OneGraphSetAuthGuardianActiveInput!): OneGraphSetAuthGuardianActiveResponsePayload
  setAuthGuardian(input: OneGraphSetAuthGuardianInput!): OneGraphSetAuthGuardianResponsePayload
  setNetlifySiteNames(input: OneGraphSetAppNetlifySiteNamesInput!): OneGraphSetAppNetlifySiteNamesResponsePayload!

  """
  Use this when you need to generate a JWT (JSON web token) with a valid signature based on the JWT algorithm settings for your app. For example, you might want to test out a token within the Hasura console, on your Netlify site, or against your own GraphQL server without going through a full auth flow manually.
  
  By default these tokens will only be valid for 5 minutes (300 seconds).
  
  Note that these tokens will be signed and valid, and will be accepted *anywhere* you have configured. **Treat them as secure tokens and guard them!**
  """
  dangerouslySignJwtPayload(input: OneGraphDangerouslySignJwtPayloadInput!): OneGraphDangerouslySignJwtPayloadResponsePayload
}

"""Mutations for the currently authed user"""
type OneGraphMutation {
  app(id: String!): OneGraphAppMutations @deprecated(reason: "Use setAppCORSOrigins")
  createServiceLink(data: OneGraphCreateServiceLinkArg!): OneGraphCreateServiceLinkResponsePayload!
  linkOneGraphNodes(input: OneGraphLinkOneGraphNodesInput!): OneGraphLinkOneGraphNodesResponsePayload!
  unLinkOneGraphNodes(input: OneGraphUnLinkOneGraphNodesInput!): OneGraphUnLinkOneGraphNodesResponsePayload!
  completeTour(data: OneGraphCompleteTourData!): OneGraphCompleteTourResponsePayload!
  createApp(
    """`id` of the organization that this app should belong to"""
    orgId: String!
    corsOrigins: [String!]!
    description: String
    name: String!
  ): OneGraphApp!
  executeChain(input: OneGraphQueryChainInput!): OneGraphQueryChainMutationPayload!
  setAppCORSOrigins(data: SetAppCORSOriginsData!): SetAppCORSOriginsResponsePayload!
  addCORSOriginToApp(input: OneGraphAddCORSOriginToAppInput!): OneGraphAddCORSOriginToAppResponsePayload!
  removeCORSOriginFromApp(input: OneGraphRemoveCORSOriginFromAppInput!): OneGraphRemoveCORSOriginFromAppResponsePayload!
  removeCustomCorsOriginFromApp(input: OneGraphRemoveCustomCorsOriginFromAppInput!): OneGraphRemoveCustomCorsOriginFromAppResponsePayload!
  addNetlifySiteToAppCORSOrigins(input: OneGraphAddNetlifySiteToAppCORSOriginsInput!): OneGraphAddNetlifySiteToAppCORSOriginsResponsePayload!
  removeNetlifySiteFromAppCORSOrigins(input: OneGraphRemoveNetlifySiteFromAppCORSOriginsInput!): OneGraphRemoveNetlifySiteFromAppCORSOriginsResponsePayload!
  createServiceAuth(data: OneGraphCreateServiceAuthInput!): OneGraphCreateServiceAuthResponsePayload!
  destroyServiceAuth(data: OneGraphDestroyServiceAuthInput!): OneGraphDestroyServiceAuthResponsePayload!
  subscriptionUnsubscribe(data: OneGraphGraphQLSubscriptionUnsubscribeInput!): OneGraphGraphQLSubscriptionUnsubscribeResponsePayload!
  updateSubscription(input: OneGraphGraphQLSubscriptionUpdateInput!): OneGraphGraphQLSubscriptionUpdateResponsePayload!
  createPersonalToken(input: OneGraphCreatePersonalTokenInput!): OneGraphCreatePersonalTokenResponsePayload!
  deletePersonalToken(input: OneGraphDeletePersonalTokenInput!): OneGraphDeletePersonalTokenResponsePayload!
  addAuthsToPersonalToken(input: OneGraphAddAuthsToPersonalTokenInput!): OneGraphAddAuthsToPersonalTokenResponsePayload!
  persistAuths(input: OneGraphPersistAuthsInput!): OneGraphPersistAuthsResponsePayload!
  createShortenedUrl(input: OneGraphCreateShortenedUrlInput!): OneGraphShortenUrlResponsePayload!
  createOrg(input: OneGraphCreateOrgInput!): OneGraphCreateOrgResponsePayload!
  updateOrgById(input: OneGraphUpdateOrgByIdInput!): OneGraphUpdateOrgByIdResponsePayload!
  updateAppById(input: OneGraphUpdateAppByIdInput!): OneGraphUpdateAppByIdResponsePayload!
  enableDataVirtualization(input: OneGraphStartDataVirtualizationInput!): OneGraphStartDataVirtualizationPayload!
  createPersistedQuery(input: OneGraphCreatePersistedQueryInput!): OneGraphPersistedQueryResponsePayload!
  updatePersistedQuery(input: OneGraphUpdatePersistedQueryInput!): OneGraphUpdatedPersistedQueryResponsePayload!
  createPersitQueryToken(input: OneGraphPersistedQueryTokenInput!): OneGraphCreatePersitQueryTokenResponsePayload!
  deletePersistedQuery(input: OneGraphDeletePersistedQueryInput!): OneGraphDeletePersistedQueryResponsePayload!
  evictCachedPersistedQueryResults(input: OneGraphEvictCachedPersistedQueryResultsInput!): OneGraphEvictCachedResultsResponsePayload!

  """
  Allows non-admin users to subscribe to GitHub events on OneGraph for the given repo and app.
  """
  enableGitHubRepositorySubscriptionDelegation(input: OneGraphEnableGithubRepositorySubscriptionDelegationInput!): OneGraphEnableGithubRepositorySubscriptionDelegationResult!

  """
  Remove ability for non-admin users to subscribe to GitHub events on OneGraph for the given repo and app.
  """
  disableGitHubRepositorySubscriptionDelegation(input: OneGraphDisableGithubRepositorySubscriptionDelegationInput!): OneGraphDisableGithubRepositorySubscriptionDelegationResult!

  """
  Remove ability for non-admin users to subscribe to GitHub events on OneGraph. Allows the owner of the app on OneGraph to remove delegation for a repo.
  """
  disableGitHubRepositorySubscriptionDelegationById(input: OneGraphDisableGithubRepositorySubscriptionDelegationByIdInput!): OneGraphDisableGithubRepositorySubscriptionDelegationByIdResult!
  enableAuthGuardianSlackIntegration(input: OneGraphEnableAuthGuardianSlackIntegrationInput!): OneGraphEnableAuthGuardianSlackIntegrationResponsePayload
  disableAuthGuardianSlackIntegration(input: OneGraphDisableAuthGuardianSlackIntegrationInput!): OneGraphDisableAuthGuardianSlackIntegrationResponsePayload
  destroyApp(id: String!): OneGraphApp
  saveQuery(public: Boolean, enabled: Boolean, tags: [String!]!, description: String, name: String!, body: String!): OneGraphQuery!
  updateQuery(public: Boolean, enabled: Boolean, tags: [String!], name: String, id: String!): OneGraphQuery
  destroyQuery(version: String!, name: String!): OneGraphQuery!
  signUp(agreeToTOS: Boolean!, passwordConfirm: String!, password: String!, email: String!, fullName: String!): OneGraphSignInResult!
  signIn(rememberMe: Boolean!, password: String!, email: String!): OneGraphSignInResult!
  agreeToTos(userAgreesToTheOneGraphTermsOfService: Boolean!): OneGraphUser!
  signOut: OneGraphSignoutResponsePayload!

  """
  Revokes a OneGraph access token, refresh token, or JWT. After a token is destroyed, it can no longer be used to authenticate with OneGraph.
  
  If you destroy a JWT, external services that rely on the claims embedded in the JWT may still accept the JWT and you will also have to revoke the JWT though the external service's revocation process.
  """
  destroyToken(
    """An Authlify Token identifier"""
    authlifyTokenId: String

    """Any OneGraph access token, refresh token, or JWT"""
    token: String
  ): Boolean!
  exchangeGitHubContextForOneGraphAccessToken: OneGraphSignInResult!
  exchangeNetlifyContextForOneGraphAccessToken: OneGraphSignInResult!
  exchangeZeitContextForOneGraphAccessToken: OneGraphSignInResult!
  associateOneGraphUserWithGitHubAccount: OneGraphUser!
  associateOneGraphUserWithNetlifyAccount: OneGraphUser!
  requestPasswordReset(email: String!): String!
  resetPassword(passwordConfirm: String!, password: String!, token: String!): Boolean!
  enableGitHubAppWebhook(input: OneGraphEnableGitHubAppWebhookInput!): OneGraphEnableGitHubAppWebhookResponsePayload!
  addExternalGraphQLSchema(input: OneGraphAddExternalGraphQLSchemaInput!): OneGraphAddExternalGraphQLSchemaPayload!
  updateExternalGraphQLSchema(input: OneGraphUpdateExternalGraphQLSchemaInput!): OneGraphUpdateExternalGraphQLSchemaPayload!
  removeExternalGraphQLSchema(input: OneGraphRemoveExternalGraphQLSchemaInput!): OneGraphRemoveExternalGraphQLSchemaPayload!
  addPreviewSalesforceSchema(input: OneGraphAddPreviewSalesforceSchemaInput!): OneGraphAddPreviewSalesforceSchemaPayload!
  promotePreviewSalesforceSchema(input: OneGraphPromotePreviewSalesforceSchemaInput!): OneGraphPromotePreviewSalesforceSchemaPayload!
  addSalesforceSchema(input: OneGraphAddSalesforceSchemaInput!): OneGraphAddSalesforceSchemaPayload!
  updateSalesforceSchema(input: OneGraphUpdateSalesforceSchemaInput!): OneGraphUpdateSalesforceSchemaPayload!
  removeSalesforceSchema(input: OneGraphRemoveSalesforceSchemaInput!): OneGraphRemoveSalesforceSchemaPayload!
  addPreviewSalesforceSchemaForSalesforceViewer: OneGraphAddPreviewSalesforceSchemaForSalesforceViewerPayload!
  addGoogleSiteVerification(input: OneGraphAddGoogleSiteVerificationInput!): OneGraphAddGoogleSiteVerificationPayload!
  removeGoogleSiteVerification(input: OneGraphRemoveGoogleSiteVerificationInput!): OneGraphRemoveGoogleSiteVerificationPayload!
  addSlackEventWebhook(input: OneGraphAddSlackEventWebhookInput!): OneGraphAddSlackEventWebhookPayload!
  setSlackEventWebhookAppToken(input: OneGraphSetSlackEventWebhookAppTokenInput!): OneGraphSetSlackEventWebhookAppTokenPayload!
  setSlackEventWebhookSigningSecret(input: OneGraphSetSlackEventWebhookSigningSecretInput!): OneGraphSetSlackEventWebhookSigningSecretPayload!
  removeSlackEventWebhook(input: OneGraphRemoveSlackEventWebhookInput!): OneGraphRemoveSlackEventWebhookPayload!
  addExternalHoneycombConfig(input: OneGraphAddExternalHoneycombConfigInput!): OneGraphAddExternalHoneycombConfigPayload!
  updateExternalHoneycombConfig(input: OneGraphUpdateExternalHoneycombConfigInput!): OneGraphUpdateExternalHoneycombConfigPayload!
  removeExternalHoneycombConfig(input: OneGraphRemoveExternalHoneycombConfigInput!): OneGraphRemoveExternalHoneycombConfigPayload!
  createEmptyAccessToken(input: OneGraphCreateEmptyAccessTokenInput!): OneGraphCreateEmptyAccessTokenPayload!
  upsertAppForNetlifySite(input: OneGraphUpsertAppForNetlifySiteInput!): OneGraphUpsertAppForNetlifySiteResponsePayload!

  """Creates an empty personal token with a Netlify site anchor"""
  createPersonalTokenWithNetlifySiteAnchor(input: OneGraphCreatePersonalTokenWithNetlifySiteAnchorInput!): OneGraphCreatePersonalTokenWithNetlifySiteAnchorResponsePayload!
  createGraphQLSchema(input: OneGraphCreateGraphQLSchemaInput!): OneGraphCreateGraphQLSchemaResponsePayload!
  createModifySchemaToken(input: OneGraphModifySchemaTokenInput!): OneGraphCreateModifySchemaTokenResponsePayload!

  """
  Acknowledge a set of netlify CLI events for a session. All events must be for the same session.
  """
  ackNetlifyCliEvents(input: OneGraphAckNetlifyCliEventsInput!): OneGraphAckNetlifyCliEventsResponsePayload!

  """Create a new CLI session."""
  createNetlifyCliSession(input: OneGraphCreateNetlifyCliSessionInput!): OneGraphCreateNetlifyCliSessionResponsePayload!

  """Update a CLI session."""
  updateNetlifyCliSession(input: OneGraphUpdateNetlifyCliSessionInput!): OneGraphUpdateNetlifyCliSessionResponsePayload!

  """Delete a CLI session."""
  deleteNetlifyCliSession(input: OneGraphDeleteNetlifyCliSessionInput!): OneGraphDeleteNetlifyCliSessionResponsePayload!
  createNetlifyCliLogEvent(input: OneGraphCreateNetlifyLogEvent!): OneGraphCreateNetlifyLogResponsePayload!
  createNetlifyCliTestEvent(input: OneGraphCreateNetlifyTestEvent!): OneGraphCreateNetlifyTestResponsePayload!
}

type Mutation {
  oneGraph(
    """
    Instruct OneGraph to use the auth associated with a particular user.
    
    Note that the user must have gone through the OneGraph oauth flow and logged in with an account with the userId provided in the auth. If there is no user with the account, you may get an auth/auth-missing error.
    
    The userIds for logged-in services can be found under `me.serviceMetadata.loggedInServices.foreignUserId`.
    """
    userIds: OneGraphServiceUserIds

    """Optional OAuth tokens used to execute the query"""
    auths: OneGraphServiceAuths
  ): OneGraphMutation!
  testMutate(query: String!): Boolean!
  signoutServiceUser(input: OneGraphSignoutServiceUserInput!): SignoutServicesResponsePayload!
  signoutServices(data: SignoutServicesData!): SignoutServicesResponsePayload!
  gitHub(
    """
    Instruct OneGraph to use the auth associated with a particular user.
    
    Note that the user must have gone through the OneGraph oauth flow and logged in with an account with the userId provided in the auth. If there is no user with the account, you may get an auth/auth-missing error.
    
    The userIds for logged-in services can be found under `me.serviceMetadata.loggedInServices.foreignUserId`.
    """
    userIds: OneGraphServiceUserIds

    """Optional OAuth tokens used to execute the query"""
    auths: OneGraphServiceAuths
  ): GitHubMutation
}

"""The encoding of the result, defaults to PLAIN"""
enum PassthroughResultRawBodyEncoding {
  PLAIN

  """Encoded as Base64."""
  BASE64
}

"""
The full response of the API request, including headers and status code.
"""
type PassthroughResultResponse {
  """The HTTP status code of the response"""
  statusCode: Int!

  """The HTTP headers, as a list of key, value pairs."""
  headers: [[String!]!]!

  """The HTTP version, usually 1.1"""
  httpVersion: String!

  """The body of the HTTP response, as a string."""
  rawBody(as: PassthroughResultRawBodyEncoding = PLAIN): String!
}

"""Result of a passthrough API call."""
type PassthroughResult {
  """
  The json-encoded body of the HTTP response. If you need the raw body, use `response.rawBody`.
  """
  jsonBody: JSON!

  """
  The full response of the API request, including headers and status code.
  """
  response: PassthroughResultResponse!
}

"""
Make a REST API call to the GitHub API.

OneGraph will inject the auth params for the API call.

Use this as an escape hatch if OneGraph does not yet support functionality of the underlying API.
"""
type GithubPassthroughQuery {
  """
  Make a GET request to the GitHub API. Use this as an escape hatch if OneGraph does not yet support functionality of the underlying API.
  """
  get(
    """The Accept header to set in the API."""
    accept: String = "application/json"

    """
    Whether to send an unauthenticated request to the API. Defaults to false.
    """
    allowUnauthenticated: Boolean = false

    """
    The query for the URL as a percent-encoded string, e.g. `first=10&sort=popular`
    """
    queryString: String

    """
    The query for the URL, as a list of key-value pairs, e.g. `[["first", "10"], ["sort", "popular"]]`
    """
    query: [[String!]!]

    """The path of the URL, e.g. `/posts`."""
    path: String!
  ): PassthroughResult!
}

enum GitHubSponsorableOrderField {
  """Order sponsorable entities by login (username)."""
  LOGIN
}

"""
Ordering options for connections to get sponsorable entities for GitHub Sponsors.
"""
input GitHubSponsorableOrder {
  """The field to order sponsorable entities by."""
  field: GitHubSponsorableOrderField!

  """The ordering direction."""
  direction: GitHubOrderDirection!
}

"""An edge in a connection."""
type GitHubSponsorableItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubSponsorableItem
}

"""The connection type for SponsorableItem."""
type GitHubSponsorableItemConnection {
  """A list of edges."""
  edges: [GitHubSponsorableItemEdge]

  """A list of nodes."""
  nodes: [GitHubSponsorableItem]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

enum GitHubSecurityAdvisoryOrderField {
  """Order advisories by publication time"""
  PUBLISHED_AT

  """Order advisories by update time"""
  UPDATED_AT
}

"""Ordering options for security advisory connections"""
input GitHubSecurityAdvisoryOrder {
  """The field to order security advisories by."""
  field: GitHubSecurityAdvisoryOrderField!

  """The ordering direction."""
  direction: GitHubOrderDirection!
}

enum GitHubSecurityAdvisoryIdentifierType {
  """Common Vulnerabilities and Exposures Identifier."""
  CVE

  """GitHub Security Advisory ID."""
  GHSA
}

"""An advisory identifier to filter results on."""
input GitHubSecurityAdvisoryIdentifierFilter {
  """The identifier type."""
  type: GitHubSecurityAdvisoryIdentifierType!

  """The identifier string. Supports exact or partial matching."""
  value: String!
}

"""An edge in a connection."""
type GitHubSecurityAdvisoryEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubSecurityAdvisory
}

"""The connection type for SecurityAdvisory."""
type GitHubSecurityAdvisoryConnection {
  """A list of edges."""
  edges: [GitHubSecurityAdvisoryEdge]

  """A list of nodes."""
  nodes: [GitHubSecurityAdvisory]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

enum GitHubSearchType {
  """Returns results matching issues in repositories."""
  ISSUE

  """Returns results matching repositories."""
  REPOSITORY

  """Returns results matching users and organizations on GitHub."""
  USER

  """Returns matching discussions in repositories."""
  DISCUSSION
}

"""Represents a single highlight in a search result match."""
type GitHubTextMatchHighlight {
  """The indice in the fragment where the matched text begins."""
  beginIndice: Int!

  """The indice in the fragment where the matched text ends."""
  endIndice: Int!

  """The text matched."""
  text: String!
}

"""A text match within a search result."""
type GitHubTextMatch {
  """The specific text fragment within the property matched on."""
  fragment: String!

  """Highlights within the matched fragment."""
  highlights: [GitHubTextMatchHighlight!]!

  """The property matched on."""
  property: String!
}

"""An edge in a connection."""
type GitHubSearchResultItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubSearchResultItem

  """Text matches on the result found."""
  textMatches: [GitHubTextMatch]
}

"""A list of results that matched against a search query."""
type GitHubSearchResultItemConnection {
  """The number of pieces of code that matched the search query."""
  codeCount: Int!

  """The number of discussions that matched the search query."""
  discussionCount: Int!

  """A list of edges."""
  edges: [GitHubSearchResultItemEdge]

  """The number of issues that matched the search query."""
  issueCount: Int!

  """A list of nodes."""
  nodes: [GitHubSearchResultItem]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """The number of repositories that matched the search query."""
  repositoryCount: Int!

  """The number of users that matched the search query."""
  userCount: Int!

  """The number of wiki pages that matched the search query."""
  wikiCount: Int!
}

"""Represents the client's rate limit."""
type GitHubRateLimit {
  """The point cost for the current query counting against the rate limit."""
  cost: Int!

  """
  The maximum number of points the client is permitted to consume in a 60 minute window.
  """
  limit: Int!

  """The maximum number of nodes this query may return"""
  nodeCount: Int!

  """The number of points remaining in the current rate limit window."""
  remaining: Int!

  """
  The time at which the current rate limit window resets in UTC epoch seconds.
  """
  resetAt: GitHubDateTime!

  """The number of points used in the current rate limit window."""
  used: Int!
}

"""Represents information about the GitHub instance."""
type GitHubGitHubMetadata {
  """Returns a String that's a SHA of `github-services`"""
  gitHubServicesSha: GitHubGitObjectID!

  """IP addresses that users connect to for git operations"""
  gitIpAddresses: [String!]

  """IP addresses that service hooks are sent from"""
  hookIpAddresses: [String!]

  """IP addresses that the importer connects from"""
  importerIpAddresses: [String!]

  """Whether or not users are verified"""
  isPasswordAuthenticationVerifiable: Boolean!

  """IP addresses for GitHub Pages' A records"""
  pagesIpAddresses: [String!]
}

"""An edge in a connection."""
type GitHubMarketplaceListingEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubMarketplaceListing
}

"""Look up Marketplace Listings"""
type GitHubMarketplaceListingConnection {
  """A list of edges."""
  edges: [GitHubMarketplaceListingEdge]

  """A list of nodes."""
  nodes: [GitHubMarketplaceListing]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""The query root of GitHub's GraphQL interface."""
type GitHubQuery {
  """Look up a code of conduct by its key"""
  codeOfConduct(
    """The code of conduct's key"""
    key: String!
  ): GitHubCodeOfConduct

  """Look up a code of conduct by its key"""
  codesOfConduct: [GitHubCodeOfConduct]

  """Look up an enterprise by URL slug."""
  enterprise(
    """The enterprise URL slug."""
    slug: String!

    """The enterprise invitation token."""
    invitationToken: String
  ): GitHubEnterprise

  """
  Look up a pending enterprise administrator invitation by invitee, enterprise and role.
  """
  enterpriseAdministratorInvitation(
    """The login of the user invited to join the business."""
    userLogin: String!

    """The slug of the enterprise the user was invited to join."""
    enterpriseSlug: String!

    """The role for the business member invitation."""
    role: GitHubEnterpriseAdministratorRole!
  ): GitHubEnterpriseAdministratorInvitation

  """
  Look up a pending enterprise administrator invitation by invitation token.
  """
  enterpriseAdministratorInvitationByToken(
    """The invitation token sent with the invitation email."""
    invitationToken: String!
  ): GitHubEnterpriseAdministratorInvitation

  """Look up an open source license by its key"""
  license(
    """The license's downcased SPDX ID"""
    key: String!
  ): GitHubLicense

  """Return a list of known open source licenses"""
  licenses: [GitHubLicense]!

  """Get alphabetically sorted list of Marketplace categories"""
  marketplaceCategories(
    """Return only the specified categories."""
    includeCategories: [String!]

    """Exclude categories with no listings."""
    excludeEmpty: Boolean

    """Returns top level categories only, excluding any subcategories."""
    excludeSubcategories: Boolean
  ): [GitHubMarketplaceCategory!]!

  """Look up a Marketplace category by its slug."""
  marketplaceCategory(
    """The URL slug of the category."""
    slug: String!

    """Also check topic aliases for the category slug"""
    useTopicAliases: Boolean
  ): GitHubMarketplaceCategory

  """Look up a single Marketplace listing"""
  marketplaceListing(
    """
    Select the listing that matches this slug. It's the short name of the listing used in its URL.
    """
    slug: String!
  ): GitHubMarketplaceListing

  """Look up Marketplace listings"""
  marketplaceListings(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Select only listings with the given category."""
    categorySlug: String

    """Also check topic aliases for the category slug"""
    useTopicAliases: Boolean

    """
    Select listings to which user has admin access. If omitted, listings visible to the
    viewer are returned.
    
    """
    viewerCanAdmin: Boolean

    """Select listings that can be administered by the specified user."""
    adminId: ID

    """Select listings for products owned by the specified organization."""
    organizationId: ID

    """
    Select listings visible to the viewer even if they are not approved. If omitted or
    false, only approved listings will be returned.
    
    """
    allStates: Boolean

    """
    Select the listings with these slugs, if they are visible to the viewer.
    """
    slugs: [String]

    """
    Select only listings where the primary category matches the given category slug.
    """
    primaryCategoryOnly: Boolean = false

    """Select only listings that offer a free trial."""
    withFreeTrialsOnly: Boolean = false
  ): GitHubMarketplaceListingConnection!

  """Return information about the GitHub instance"""
  meta: GitHubGitHubMetadata!

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): GitHubNode

  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [GitHubNode]!

  """Lookup a organization by login."""
  organization(
    """The organization's login."""
    login: String!
  ): GitHubOrganization

  """The client's rate limit information."""
  rateLimit(
    """If true, calculate the cost for the query without evaluating it"""
    dryRun: Boolean = false
  ): GitHubRateLimit

  """
  Hack to workaround https://github.com/facebook/relay/issues/112 re-exposing the root query object
  """
  relay: GitHubQuery!

  """Lookup a given repository by the owner and repository name."""
  repository(
    """The login field of a user or organization"""
    owner: String!

    """The name of the repository"""
    name: String!
  ): GitHubRepository

  """
  Lookup a repository owner (ie. either a User or an Organization) by login.
  """
  repositoryOwner(
    """The username to lookup the owner by."""
    login: String!
  ): GitHubRepositoryOwner

  """Lookup resource by a URL."""
  resource(
    """The URL."""
    url: GitHubURI!
  ): GitHubUniformResourceLocatable

  """Perform a search across resources."""
  search(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """The search string to look for."""
    query: String!

    """The types of search items to search within."""
    type: GitHubSearchType!
  ): GitHubSearchResultItemConnection!

  """GitHub Security Advisories"""
  securityAdvisories(
    """Ordering options for the returned topics."""
    orderBy: GitHubSecurityAdvisoryOrder = {field: UPDATED_AT, direction: DESC}

    """Filter advisories by identifier, e.g. GHSA or CVE."""
    identifier: GitHubSecurityAdvisoryIdentifierFilter

    """Filter advisories to those published since a time in the past."""
    publishedSince: GitHubDateTime

    """Filter advisories to those updated since a time in the past."""
    updatedSince: GitHubDateTime

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubSecurityAdvisoryConnection!

  """Fetch a Security Advisory by its GHSA ID"""
  securityAdvisory(
    """GitHub Security Advisory ID."""
    ghsaId: String!
  ): GitHubSecurityAdvisory

  """Software Vulnerabilities documented by GitHub Security Advisories"""
  securityVulnerabilities(
    """Ordering options for the returned topics."""
    orderBy: GitHubSecurityVulnerabilityOrder = {field: UPDATED_AT, direction: DESC}

    """An ecosystem to filter vulnerabilities by."""
    ecosystem: GitHubSecurityAdvisoryEcosystem

    """A package name to filter vulnerabilities by."""
    package: String

    """A list of severities to filter vulnerabilities by."""
    severities: [GitHubSecurityAdvisorySeverity!]

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubSecurityVulnerabilityConnection!

  """Users and organizations who can be sponsored via GitHub Sponsors."""
  sponsorables(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Ordering options for users and organizations returned from the connection.
    """
    orderBy: GitHubSponsorableOrder = {field: LOGIN, direction: ASC}

    """
    Whether only sponsorables who own the viewer's dependencies will be returned. Must be authenticated to use. Can check an organization instead for their dependencies owned by sponsorables by passing orgLoginForDependencies.
    """
    onlyDependencies: Boolean = false

    """
    Optional organization username for whose dependencies should be checked. Used when onlyDependencies = true. Omit to check your own dependencies. If you are not an administrator of the organization, only dependencies from its public repositories will be considered.
    """
    orgLoginForDependencies: String

    """
    Optional filter for which dependencies should be checked for sponsorable owners. Only sponsorable owners of dependencies in this ecosystem will be included. Used when onlyDependencies = true.
    """
    dependencyEcosystem: GitHubSecurityAdvisoryEcosystem
  ): GitHubSponsorableItemConnection!

  """Look up a single Sponsors Listing"""
  sponsorsListing(
    """Select the Sponsors listing which matches this slug"""
    slug: String!
  ): GitHubSponsorsListing @deprecated(reason: "`Query.sponsorsListing` will be removed. Use `Sponsorable.sponsorsListing` instead. Removal on 2020-04-01 UTC.")

  """Look up a topic by name."""
  topic(
    """The topic's name."""
    name: String!
  ): GitHubTopic

  """Lookup a user by login."""
  user(
    """The user's login."""
    login: String!
  ): GitHubUser

  """The currently authenticated user."""
  viewer: GitHubUser!

  """
  Make a REST API call to the GitHub API.
  
  OneGraph will inject the auth params for the API call.
  
  Use this as an escape hatch if OneGraph does not yet support functionality of the underlying API.
  """
  makeRestCall: GithubPassthroughQuery!
}

"""The status of a cli session"""
enum OneGraphNetlifyCliSessionStatus {
  ACTIVE
  INACTIVE
}

type OneGraphNetlifyCliSession {
  id: String!
  appId: String!
  netlifyUserId: String!
  name: String
  events(
    """The number of events to fetch, maximum of 1000."""
    first: Int = 1000
  ): [OneGraphNetlifyCliSessionEvent!]!
  createdAt: String!
  updatedAt: String!
  lastEventAt: String
  metadata: JSON
  status: OneGraphNetlifyCliSessionStatus!

  """Number of milliseconds to wait between heartbeats"""
  cliHeartbeatIntervalMs: Int!
}

type OneGraphNetlifyCliSessionLogEvent implements OneGraphNetlifyCliSessionEvent {
  id: String!
  sessionId: String!
  createdAt: String!
  message: String!
}

type OneGraphNetlifyCliSessionTestEvent implements OneGraphNetlifyCliSessionEvent {
  id: String!
  sessionId: String!
  createdAt: String!
  payload: JSON!
}

interface OneGraphNetlifyCliSessionEvent {
  id: String!
  sessionId: String!
  createdAt: String!
}

type AuthlifyToken {
  """Metadata and logged-in state for all OneGraph services"""
  serviceMetadata: OneGraphServicesMetadata!
}

input OneGraphSetAuthGuardianRuleEffectHasuraSetSessionVariableInput {
  value: OneGraphSetAuthGuardianRuleEffectJsonValueInput!
  name: String!
}

"""
Commonly used values for use in JWT generation, like GitHub email address or the current time.
"""
enum OneGraphAuthGuardianBuiltInValue {
  CONTENTFUL_AVATAR_URL
  CONTENTFUL_USER_ID
  CONTENTFUL_EMAIL
  EGGHEADIO_AVATAR_URL
  EGGHEADIO_USER_ID
  EGGHEADIO_EMAIL
  EGGHEADIO_IS_PRO
  EGGHEADIO_IS_INSTRUCTOR
  EGGHEADIO_IS_COMMUNITY_MEMBER
  GITHUB_AVATAR_URL
  GITHUB_EMAIL
  GITHUB_LOGIN
  GITHUB_NAME
  GITHUB_USER_ID
  GITHUB_FULL_EMAILS
  GMAIL_EMAIL
  GMAIL_EMAIL_VERIFIED
  GMAIL_USER_ID
  LOGGED_IN_SERVICES
  NETLIFY_AVATAR_URL
  NETLIFY_EMAIL
  NETLIFY_FULL_NAME
  NETLIFY_USER_ID
  NOW_SECONDS
  NOW_MILLISECONDS
  NOW_TIMESTAMP
  SALESFORCE_EMAIL
  SALESFORCE_USER_ID
  SPOTIFY_EMAIL
  SPOTIFY_USER_ID
  STRIPE_ACCOUNT_ID
  STRIPE_ACCOUNT_PRIMARY_EMAIL
  TWITCH_TV_EMAIL
  TWITCH_TV_DISPLAY_NAME
  TWITCH_TV_LOGO_URL
  TWITCH_TV_USER_ID
  TWITTER_IS_VERIFIED
  TWITTER_EMAIL
  TWITTER_NAME
  TWITTER_PROFILE_IMAGE_URL
  TWITTER_SCREEN_NAME
  TWITTER_USER_ID
  VERCEL_AVATAR_URL
  VERCEL_EMAIL
  VERCEL_NAME
  VERCEL_USER_ID
}

input OneGraphSetAuthGuardianRuleEffectJsonValueInput {
  json: String
  builtInValue: OneGraphAuthGuardianBuiltInValue
}

input OneGraphSetAuthGuardianRuleEffectSetValueInput {
  value: OneGraphSetAuthGuardianRuleEffectJsonValueInput!
  path: String!
}

input OneGraphSetAuthGuardianRuleEffectInput {
  onExpressJsAddPermissions: [String!]
  onApolloServerAddRoles: [String!]
  onNetlifyAddUserRoles: [String!]
  onHasuraSetUserId: OneGraphSetAuthGuardianRuleEffectJsonValueInput
  onHasuraSetDefaultRole: String
  onHasuraSetSessionVariable: OneGraphSetAuthGuardianRuleEffectHasuraSetSessionVariableInput
  onHasuraAddRoles: [String!]
  inTheJsonAddToListAtPath: OneGraphSetAuthGuardianRuleEffectSetValueInput
  inTheJsonRemoveValueAtPath: String
  inTheJsonSetValueAtPath: OneGraphSetAuthGuardianRuleEffectSetValueInput
}

input OneGraphSetAuthGuardianRuleConditionZeitInput {
  loginStatus: Boolean
  hasAnEmailThat: OneGraphSetAuthGuardianRuleEmailConditionInput
}

input OneGraphSetAuthGuardianRuleConditionTwitterInput {
  hasTwitterVerifiedStatus: Boolean
  screenName: OneGraphSetAuthGuardianRuleStringConditionInput
  loginStatus: Boolean
}

input OneGraphSetAuthGuardianRuleConditionTwitchTvInput {
  loginStatus: Boolean
  hasVerifiedEmail: Boolean
  hasAnEmailThat: OneGraphSetAuthGuardianRuleEmailConditionInput
}

input OneGraphSetAuthGuardianRuleConditionStripeInput {
  loginStatus: Boolean
  hasAPrimaryAccountEmailThat: OneGraphSetAuthGuardianRuleEmailConditionInput
  hasAnAccountIdThat: OneGraphSetAuthGuardianRuleStringConditionInput
}

input OneGraphSetAuthGuardianRuleConditionSpotifyInput {
  loginStatus: Boolean
  hasAnEmailThat: OneGraphSetAuthGuardianRuleEmailConditionInput
}

input OneGraphSetAuthGuardianRuleConditionSalesforceInput {
  loginStatus: Boolean
  hasAnEmailThat: OneGraphSetAuthGuardianRuleEmailConditionInput
}

input OneGraphSetAuthGuardianRuleConditionNetlifyInput {
  loginStatus: Boolean
  hasAnEmailThat: OneGraphSetAuthGuardianRuleEmailConditionInput
}

input OneGraphSetAuthGuardianRuleConditionGmailInput {
  loginStatus: Boolean
  hasAnEmailThat: OneGraphSetAuthGuardianRuleEmailConditionInput
}

input OneGraphSetAuthGuardianRuleConditionGitHubInput {
  isCollaboratorOnRepositoryWhereFullName: String
  isMemberOfOrganizationNamed: String
  hasStarredARepositoryWithAFullNameOf: String
  hasCommittedToRepositoryWithAFullNameOf: String
  login: OneGraphSetAuthGuardianRuleStringConditionInput
  loginStatus: Boolean
  hasAnEmailThat: OneGraphSetAuthGuardianRuleEmailConditionInput
}

input OneGraphSetAuthGuardianRuleConditionEggheadioInput {
  isCommunityMember: Boolean
  isInstructor: Boolean
  isPro: Boolean
  loggedIn: Boolean
  email: OneGraphSetAuthGuardianRuleEmailConditionInput
}

input OneGraphSetAuthGuardianRuleStringConditionInput {
  isEqualToCaseInsensitively: String
  containsCaseInsensitively: String
  endsWithCaseInsensitively: String
  startsWithCaseInsensitively: String
  isEqualTo: String
  contains: String
  endsWith: String
  startsWith: String
}

input OneGraphSetAuthGuardianRuleEmailConditionInput {
  isEqualTo: String
  hasADomainThat: OneGraphSetAuthGuardianRuleStringConditionInput
  endsWith: String
  startsWith: String
}

input OneGraphSetAuthGuardianRuleConditionContentfulInput {
  confirmed: Boolean
  activated: Boolean
  loggedIn: Boolean
  email: OneGraphSetAuthGuardianRuleEmailConditionInput
}

input OneGraphSetAuthGuardianRuleConditionInput {
  vercel: OneGraphSetAuthGuardianRuleConditionZeitInput
  twitter: OneGraphSetAuthGuardianRuleConditionTwitterInput
  twitch: OneGraphSetAuthGuardianRuleConditionTwitchTvInput
  stripe: OneGraphSetAuthGuardianRuleConditionStripeInput
  spotify: OneGraphSetAuthGuardianRuleConditionSpotifyInput
  salesforce: OneGraphSetAuthGuardianRuleConditionSalesforceInput
  netlify: OneGraphSetAuthGuardianRuleConditionNetlifyInput
  gmail: OneGraphSetAuthGuardianRuleConditionGmailInput
  gitHub: OneGraphSetAuthGuardianRuleConditionGitHubInput
  eggheadio: OneGraphSetAuthGuardianRuleConditionEggheadioInput
  contentful: OneGraphSetAuthGuardianRuleConditionContentfulInput
  always: Boolean
}

input OneGraphSetAuthGuardianRuleInput {
  effects: [OneGraphSetAuthGuardianRuleEffectInput!]!
  conditions: [OneGraphSetAuthGuardianRuleConditionInput!]!
}

input OneGraphSetAuthGuardianInput {
  rules: [OneGraphSetAuthGuardianRuleInput!]!
}

type OneGraphSetAuthGuardianResponsePayload {
  javascript: String
  graphQL: String
  jwt: String
  rules: JSON
}

"""A OneGraph Server Info"""
type OneGraphServerInfo {
  """"""
  sha: String!

  """"""
  buildNumber: Int!
}

"""Customizations to a OneGraph schema."""
type OneGraphGraphQLSchema {
  id: String!
  appId: String!
  parentGraphQLSchemaId: String
  parentGraphQLSchema: OneGraphGraphQLSchema
  services: [OneGraphServiceInfo!]!
  salesforceSchema: OneGraphSalesforceSchema

  """External GraphQL schemas for the schema."""
  externalGraphQLSchemas: OneGraphExternalGraphQLSchemaConnection!
  createdAt: String!
  updatedAt: String!
}

enum OneGraphExternalHoneycombConfigDatasetMetricTypeEnum {
  API_CALL
  SUBSCRIPTION_DELIVERY
}

type OneGraphExternalHoneycombConfigDataset {
  """The metric type."""
  metricType: OneGraphExternalHoneycombConfigDatasetMetricTypeEnum!

  """The name of the dataset in Honeycomb."""
  datasetName: String!
}

type OneGraphExternalHoneycombConfig {
  """Id of the app that the external Honeycomb config belongs to."""
  appId: String!

  """The datetime that the Honecomb config was added, in rfc3339 format."""
  createdAt: String!

  """
  The datetime that the Honeycomb config was last updated, in rfc3339 format.
  """
  updatedAt: String!

  """The Honeycomb API token that OneGraph will use to send events."""
  obfuscatedToken: String!

  """If `true`, OneGraph will send events to Honeycomb."""
  active: Boolean!

  """The last error we received while sending events to the Honeycomb API."""
  lastError: String

  """User-provided dataset names"""
  datasets: [OneGraphExternalHoneycombConfigDataset!]!
}

type OneGraphGoogleSiteVerification {
  """The root path that this will be served at."""
  path: String!

  """The content that will be served at the path."""
  body: String!
}

type OneGraphSalesforceSchema {
  """Id of the salesforce schema"""
  id: String!

  """The id of the OneGraph app that the salesforce schema belongs to."""
  appId: String!

  """The datetime that the schema was added, in rfc3339 format."""
  createdAt: String!

  """The datetime that the schema was last updated, in rfc3339 format."""
  updatedAt: String!

  """Salesforce instanceUrl"""
  instanceUrl: String!

  """Salesforce Organization ID"""
  salesforceOrgId: String

  """Whether this is a preview of a change to a Salesforce schema."""
  isPreview: Boolean!

  """The previous salesforce schema, if there was one."""
  previousSalesforceSchema: OneGraphSalesforceSchema
}

enum OneGraphSupportedExternalGraphQLService {
  GRAPHCMS
  WORDPRESS
}

type OneGraphExternalGraphQLSchema {
  """Id of the external graphql schema"""
  id: String!

  """The datetime that the schema was added, in rfc3339 format."""
  createdAt: String!

  """The datetime that the schema was last updated, in rfc3339 format."""
  updatedAt: String!

  """Service of the external graphql schema"""
  service: OneGraphSupportedExternalGraphQLService!

  """GraphQL endpoint of the external graphql schema"""
  endpoint: String!
}

type OneGraphExternalGraphQLSchemaConnection {
  nodes: [OneGraphExternalGraphQLSchema!]!
}

type OneGraphGithubRepositorySubscriptionDelegate {
  id: String!

  """Name with owner (e.g. onegraph/graphiql-exporer) of the GitHub repo."""
  nameWithOwner: String!

  """
  Datetime that the repo was set up to allow non-admin subscriptions (rfc3339 encoded)
  """
  createdAt: String!
}

type OneGraphGithubRepositorySubscriptionDelegateConnection {
  nodes: [OneGraphGithubRepositorySubscriptionDelegate!]!
}

"""Persisted query"""
type OneGraphPersistedQuery {
  """The persisted query's id."""
  id: String!

  """The persisted query's query string."""
  query: String!

  """The default variables provided to the query."""
  fixedVariables: JSON

  """
  The list of variables that the caller of the query is allowed to provide.
  """
  freeVariables: [String!]

  """
  The list of operation names that the caller of the query is allowed to execute. If the field is null, then all operationNames are allowed.
  """
  allowedOperationNames: [String!]

  """The list of user-defined tags that were added to the query"""
  tags: [String!]

  """The user-defined description that was added to the query"""
  description: String

  """The parent of this query, if it has one."""
  parent: OneGraphPersistedQuery
}

"""List of persisted queries."""
type OneGraphPersistedQueryConnection {
  """List of persisted queries."""
  nodes: [OneGraphPersistedQuery!]!

  """Pagination information"""
  pageInfo: PageInfo!
}

"""A custom cors origin"""
type OneGraphCustomCorsOrigin {
  """The friendly service name for the cors origin"""
  friendlyServiceName: String!

  """
  The name of the origin that should be displayed, e.g. oneblog for oneblog.netlify.app.
  """
  displayName: String!

  """The encoded value as a string, used to remove the custom cors origin."""
  encodedValue: String!
}

type OneGraphAppAuthCompletedLog implements OneGraphAppLog {
  """
  Noted whenever an end-user has completed a login for a service when using this app
  """
  service: String!
  friendlyName: String!

  """The user id according to the service they logged into"""
  serviceUserId: String

  """The id of the log"""
  id: String!

  """The time of the log, encoded as rfc3339"""
  createdAt: String!

  """JSON data encoded as a string for this specific event"""
  jsonData(pretty: Boolean = false): String!
}

type OneGraphAppLogJwtWebhookFailed implements OneGraphAppLog {
  """
  The destination webhook where we tried to deliver the JWT for preprocessing when it failed
  """
  destination: String!

  """The numeric HTTP status code we received from the webhook (if any)"""
  responseStatusCode: Int

  """The textual responseBody we received from the webhook (if any)"""
  responseBody: String
  friendlyName: String!

  """The id of the log"""
  id: String!

  """The time of the log, encoded as rfc3339"""
  createdAt: String!

  """JSON data encoded as a string for this specific event"""
  jsonData(pretty: Boolean = false): String!
}

type OneGraphAppLogSubscriptionDeliveryFailed implements OneGraphAppLog {
  """The subscription for the failed delivery attempt"""
  subscription: OneGraphAppSubscription

  """The attempt number for delivering this subscription payload"""
  attempt: Int!
  friendlyName: String!

  """The id of the log"""
  id: String!

  """The time of the log, encoded as rfc3339"""
  createdAt: String!

  """JSON data encoded as a string for this specific event"""
  jsonData(pretty: Boolean = false): String!
}

interface OneGraphAppLog {
  id: String!
  createdAt: String!
  friendlyName: String!
  jsonData(pretty: Boolean = false): String
}

type OneGraphAppLogConnection {
  """Applogs"""
  nodes: [OneGraphAppLog!]!
}

"""An RSA public key used for signing JWTs"""
type OneGraphAppJwtRsaPublicKey {
  """The algorithm associated with this public key"""
  algorithm: String!

  """The n of the rsa key"""
  n: String!

  """The exponent of the rsa key"""
  e: String!
}

"""An HMAC key used for signing JWTs"""
type OneGraphJwtSigningKeyHmac256 implements OneGraphJwtSigningKey {
  """The algorithm associated with this public key"""
  algorithm: OneGraphJwtSigningAlgorithmEnum!

  """The algorithm associated with this public key"""
  family: OneGraphSigningAlgorithmFamilyEnum!

  """The shared secret for this key (if any)"""
  sharedSecret: String
}

"""Signing algorithm for JWTs generated by Onegraph"""
enum OneGraphJwtSigningAlgorithmEnum {
  HMAC_256
  RSA_256
}

"""The family of Signing algorithms"""
enum OneGraphSigningAlgorithmFamilyEnum {
  SYMMETRIC
  ASYMMETRIC
}

"""An RSA public key used for signing JWTs"""
type OneGraphJwtSigningKeyRsa256 implements OneGraphJwtSigningKey {
  """The algorithm associated with this public key"""
  family: OneGraphSigningAlgorithmFamilyEnum!

  """The algorithm associated with this public key"""
  algorithm: OneGraphJwtSigningAlgorithmEnum!
}

interface OneGraphJwtSigningKey {
  """The family of algorithms used for this key"""
  family: OneGraphSigningAlgorithmFamilyEnum!

  """The algorithm associated with this key"""
  algorithm: OneGraphJwtSigningAlgorithmEnum!
}

"""The method of generating JWTs"""
enum OneGraphAppJwtGenerationMethodEnum {
  MANUAL
  AUTH_BUILDER
}

"""JWT settings for the app, useful for SSO."""
type OneGraphAppJwtSettings {
  """A query to run on every user log in to use in generating the JWT token"""
  jwtPreflightQuery: String

  """
  An optional webhook to use for generating the full JWT. Use this and `jwtPreflightQuery` to customize claims. Very useful when used alongside e.g. Hasura or PostGraphile
  """
  jwtWebhookUrl: String

  """
  Whether this app is generating JWTs on login via a manual query/webhook combination, or using OneGraph's AuthGuardian
  """
  jwtGenerationMethod: OneGraphAppJwtGenerationMethodEnum!

  """
  The rules this app is configured to use when generating JWTs on user login
  """
  jwtAuthGuardianRules: JSON

  """The current key used to sign JWTs generated for this app"""
  activeKey: OneGraphJwtSigningKey

  """List of the public keys for an app"""
  publicKeys: [OneGraphAppJwtRsaPublicKey!]

  """The full JWT configuration for Hasura"""
  hasuraConfig: String

  """
  The public well-known JWK url of where to look for public keys when verifying JWT for this app
  """
  jwksUrl: String!
}

"""Status of the subscription"""
enum OneGraphAppSubscriptionsStatusEnumArg {
  ACTIVE
  INACTIVE
}

enum OneGraphAppSubscriptionPayloadDeliveryStatus {
  WAITING
  DELIVERING
  DELIVERED
  FAILED
}

"""Payload for a subscription created by the app"""
type OneGraphAppSubscriptionPayload {
  """Unique id for the payload."""
  id: String!

  """
  Body of the payload or null if the payload is expired. This is the full body of the GraphQL payload, including the `data`, `errors`, and `extensions` fields as JSON.
  """
  body: JSON!

  """
  `true` if the payload body has been deleted. Payload bodies will expire after 1 year.
  """
  isExpired: Boolean!

  """
  The time that this payload was created, in rfc3339 format e.g. `2021-03-24T23:35:03-00:00`
  """
  createdAt: String!

  """
  The delivery status of a subscription, if the subscription has a destination.
  """
  deliveryStatus: OneGraphAppSubscriptionPayloadDeliveryStatus!

  """The number of times we attempted to deliver the payload."""
  deliveryAttempts: Int!

  """
  The last time we attempted to deliver the payload, in rfc3339 format e.g. `2021-03-24T23:35:03-00:00`
  """
  lastDeliveryAttempt: String

  """
  The status code we received from the webhook destination the last time we attempted to deliver the payload. This field will be null for Websocket and Retain-only subscriptions.
  """
  lastStatusCode: Int

  """
  If there was an error delivering the payload to a webhook destination, this field will contain the first 512 bytes of the response we receieved from the server.
  """
  lastError: String
}

"""Payloads for a subscription"""
type OneGraphAppSubscriptionPayloadsConnection {
  """List of subscription payloads"""
  nodes: [OneGraphAppSubscriptionPayload!]!
}

scalar JSON

"""Webhook destination for a OneGraph subscription"""
type OneGraphAppSubscriptionWebhookDestination {
  """Url that the webhook will deliver payloads to."""
  url: String!
}

"""Websocket destination for a OneGraph subscription"""
type OneGraphAppSubscriptionWebsocketDestination {
  """The client-side id for the subscription."""
  clientId: String!
}

"""
Destination for a OneGraph subscription that is only retained and not delivered.
"""
type OneGraphAppSubscriptionRetainedOnlyDestination {
  retainedOnly: Boolean!
}

union OneGraphAppSubscriptionDestination = OneGraphAppSubscriptionRetainedOnlyDestination | OneGraphAppSubscriptionWebsocketDestination | OneGraphAppSubscriptionWebhookDestination

"""Information about a subscription to Salesforce."""
type OneGraphSalesforceSubscriptionInfo {
  """
  The Id of the Salesforce Organization that this subscription is subscription to
  """
  organizationId: String!
}

"""Information about a subscription to gmail."""
type OneGraphGmailWatch {
  """Email address that is being watched."""
  emailAddress: String!
}

"""Subscription created by the app"""
type OneGraphAppSubscription {
  """Unique id for the subscription."""
  id: String!

  """Status of the subscription."""
  status: String!

  """Query that the subscription run."""
  query: String!

  """
  If this is a subscription to Gmail, contains extra information about the Gmail subscription
  """
  gmailWatch: OneGraphGmailWatch

  """
  If this is a subscription to Salesforce, contains extra information about the Salesforce subscription
  """
  salesforceInfo: OneGraphSalesforceSubscriptionInfo

  """Destination for the subscription payloads"""
  destination: OneGraphAppSubscriptionDestination!

  """Reason why this subscription can't be updated if it can't be updated."""
  updatesUnsupportedReason: String

  """The variables that this query was saved with."""
  requestVariables: JSON

  """
  The time that this subscription was created, in rfc3339 format e.g. `2021-03-24T23:35:03-00:00`
  """
  createdAt: String!

  """
  Whether this subscription retains payloads. Payloads are available through the `payload` field on the subscription.
  """
  retainPayloads: Boolean!

  """
  Latest payloads for a subscription, if the subscription was created with `retainPayloads` set to true.
  """
  payloads(
    """Number of payloads to fetch. Defaults to 20, maximum is 100."""
    first: Int = 20
  ): OneGraphAppSubscriptionPayloadsConnection
}

"""
Subscriptions created by the app, with extra information about pagination.
"""
type OneGraphAppSubscriptionsConnection {
  """Pagination information."""
  pageInfo: PageInfo!

  """List of subscriptions created by the app."""
  nodes: [OneGraphAppSubscription!]!
}

"""Custom OAuth client for Adroll"""
type OneGraphAdrollServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Asana"""
type OneGraphAsanaServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Box"""
type OneGraphBoxServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Contentful"""
type OneGraphContentfulServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Dev.to"""
type OneGraphDevToServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Docusign"""
type OneGraphDocusignServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Dribbble"""
type OneGraphDribbbleServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Dropbox"""
type OneGraphDropboxServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Egghead.io"""
type OneGraphEggheadioServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Eventil"""
type OneGraphEventilServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Facebook"""
type OneGraphFacebookServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Firebase"""
type OneGraphFirebaseServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

type OneGraphGitHubAppWebhook {
  signingSecret: String!
  webhookUrl: String!
}

"""Custom OAuth client for GitHub"""
type OneGraphGitHubServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
  gitHubAppWebhook: OneGraphGitHubAppWebhook
}

"""Custom OAuth client for Gmail"""
type OneGraphGmailServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Gong"""
type OneGraphGongServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Google"""
type OneGraphGoogleServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Google Ads"""
type OneGraphGoogleAdsServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Google Analytics"""
type OneGraphGoogleAnalyticsServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Google Calendar"""
type OneGraphGoogleCalendarServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Google Compute"""
type OneGraphGoogleComputeServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Google Docs"""
type OneGraphGoogleDocsServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Google Search Console"""
type OneGraphGoogleSearchConsoleServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Google Translate"""
type OneGraphGoogleTranslateServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Hubspot"""
type OneGraphHubspotServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Intercom"""
type OneGraphIntercomServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Mailchimp"""
type OneGraphMailchimpServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Meetup"""
type OneGraphMeetupServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Netlify"""
type OneGraphNetlifyServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Notion"""
type OneGraphNotionServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Outreach"""
type OneGraphOutreachServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Product Hunt"""
type OneGraphProductHuntServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for QuickBooks"""
type OneGraphQuickbooksServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Salesforce"""
type OneGraphSalesforceServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Sanity"""
type OneGraphSanityServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Slack Event Webhook for an app."""
type OneGraphSlackEventWebhook {
  """Unique identifier."""
  id: String!

  """Custom OAuth service id."""
  serviceAuthId: String!

  """
  The webhook url that should be set as the request url for your Slack app.
  """
  webhookUrl: String!

  """
  Last time that the webhook was verified by Slack, encoded as an []rfc3339](https://tools.ietf.org/html/rfc3339) string. For example: `1985-04-12T23:20:50-00:00``.
  """
  verifiedAt: String

  """
  Date that the webhook was created, encoded as an []rfc3339](https://tools.ietf.org/html/rfc3339) string. For example: `1985-04-12T23:20:50-00:00``.
  """
  createdAt: String!

  """The signing secret, masked."""
  maskedSigningSecret: String

  """The app token, masked."""
  maskedAppToken: String
}

"""Custom OAuth client for Slack"""
type OneGraphSlackServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
  slackEventWebhook: OneGraphSlackEventWebhook
}

"""Custom OAuth client for Spotify"""
type OneGraphSpotifyServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Stripe"""
type OneGraphStripeServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Trello"""
type OneGraphTrelloServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Twilio"""
type OneGraphTwilioServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Twitter"""
type OneGraphTwitterServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Twitch"""
type OneGraphTwitchTvServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for You Need a Budget"""
type OneGraphYnabServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for YouTube"""
type OneGraphYoutubeServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Vercel"""
type OneGraphZeitServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for Zendesk"""
type OneGraphZendeskServiceAuth implements OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""Custom OAuth client for a service"""
interface OneGraphServiceAuth {
  """id for the service auth"""
  id: String!

  """
  The service that the clientId and clientSecret belong to, e.g. "gmail"
  """
  service: String!

  """clientId for the serviceAuth."""
  clientId: String!

  """clientSecret for the serviceAuth."""
  clientSecret: String!

  """
  Optional pubsub topic for gmail auth. Required to use gmail subscriptions with custom OAuth credentials.
  """
  gmailWatchPubSubTopic: String

  """
  Developer token for the Google Ads api. Required to use the Google Ads api.
  """
  googleDeveloperToken: String

  """
  App name for Trello OAuth client. This is the name that will be displayed on the OAuth login form.
  """
  trelloAppName: String

  """Optional scopes to use for the OAuth flow."""
  scopes: [String!]

  """
  If true, the bearer token that is created fetchable by the user whose account the token grants access to.
  """
  revealTokens: Boolean!

  """Custom OAuth redirect URI."""
  customRedirectUri: String

  """Custom CNAME host."""
  cname: String
}

"""A OneGraph Org"""
type OneGraphOrg {
  """The id of the OneGraph Org"""
  id: String!

  """The name of the OneGraph Org"""
  name: String!

  """All OneGraph apps belonging to this organization"""
  apps: [OneGraphApp!]!
}

"""A OneGraph App"""
type OneGraphApp {
  """The id of the OneGraph App"""
  id: String!

  """The description of the OneGraph App"""
  description: String!

  """The subdomain of the OneGraph App"""
  subdomain: String!

  """The name of the OneGraph App"""
  name: String!

  """The origins allowed for this OneGraph App from CORS requests"""
  corsOrigins: [String!]!

  """The id of the OneGraph organization that this app belongs to"""
  orgId: String!

  """The OneGraph organization that this app belongs to"""
  org: OneGraphOrg

  """The queries belonging to this OneGraph app"""
  queries: [OneGraphQuery!]!

  """
  The custom clientId/clientSecret that have been set for services (e.g. Gmail and Slack) that belong to this OneGraph app
  """
  serviceAuths: [OneGraphServiceAuth!]!

  """Subscriptions created with this app"""
  subscriptions(
    """
    Fiter by the Subscription's Salesforce organization Id, if the subscription is to a change in Salesforce..
    """
    salesforceOrganizationId: String

    """
    Fiter by the Subscription's webhook url, if the destination is a webhook.
    """
    webhookUrl: String

    """Fiter by status of the subscription"""
    status: OneGraphAppSubscriptionsStatusEnumArg

    """Fetch items in the list after the specified cursor"""
    after: String

    """How many subsriptions to fetch"""
    first: Int = 25
  ): OneGraphAppSubscriptionsConnection!

  """The JWT settings for this app"""
  jwtSettings: OneGraphAppJwtSettings!

  """Activity related to this app"""
  auditLogs(
    """
    How many log items to pull from the front of the collection, maximum of `250`
    """
    first: Int = 10
  ): OneGraphAppLogConnection!

  """
  Sites on Netlify associated with this app. OneGraph will allow CORS and authentication redirects to all previews, branch, and production deploys of these sites.
  """
  netlifySiteNames: [String!]!

  """Custom cors origins"""
  customCorsOrigins: [OneGraphCustomCorsOrigin!]!

  """List of persisted queries for this app"""
  persistedQueries(
    """Only return persisted queries that have all of the provided tags."""
    tags: [String!]

    """Returns results after the provided cursor."""
    after: String

    """How many persisted queries to return. Defaults to 10, max 100."""
    first: Int = 10
  ): OneGraphPersistedQueryConnection!

  """GitHub repos for the app that can have subscriptions on OneGraph."""
  gitHubRepositorySubscriptionDelegates: OneGraphGithubRepositorySubscriptionDelegateConnection!

  """The Slack channel for AuthGuardian to post into upon user sign-in"""
  authGuardianSlackChannel: String

  """Whether the AuthGuardian Slack integration is enabled"""
  authGuardianSlackIntegrationEnabled: Boolean!

  """External GraphQL schemas for the app."""
  externalGraphQLSchemas: OneGraphExternalGraphQLSchemaConnection!

  """Custom Salesforce schema for the app."""
  salesforceSchema: OneGraphSalesforceSchema

  """
  The domain that must be authorized to receive push notifications from Google for Google Calendar subscriptions.
  """
  googleAuthorizedDomain: String!

  """Google Site Verification for the app"""
  googleSiteVerification: OneGraphGoogleSiteVerification

  """External Honeycomb config for the app"""
  externalHoneycombConfig: OneGraphExternalHoneycombConfig

  """Customizations to the default GraphQL schema"""
  graphQLSchema: OneGraphGraphQLSchema
}

"""A query stored in Onegraph"""
type OneGraphQuery {
  """The id of the GraphQL query"""
  id: String!

  """The id of the app that this GraphQL query belongs to"""
  appId: String!

  """
  Whether a GraphQL query is globally enabled/disabled. Note that even if the query is enabled, a corresponding auth_token must share a tag with this query to use it.
  """
  enabled: Boolean!

  """
  Whether a GraphQL query is shared and publicly viewable, including all of its meta-information.
  """
  public: Boolean!

  """The version (currently a hash of the body) of the GraphQL query"""
  version: String!

  """The body of the GraphQL query"""
  body: String!

  """The name of the GraphQL query"""
  name: String!

  """An optional description of the GraphQL query"""
  description: String

  """The tags (for permissions and organization) of the GraphQL query"""
  tags: [String!]!

  """What time this query was created"""
  createdAtTs: String!

  """What time this query was created in milliseconds from the epoch"""
  createdAtMs: Int!
}

"""A query stored in OneGraph in shortened form for easy sharing"""
type OneGraphShortenedQuery {
  """The id of the shortened OneGraph query"""
  id: String!

  """The full query body of the shortened OneGraph query"""
  query: String!

  """The variables of the shortened OneGraph query"""
  variables: String

  """The pre-selected operation of the shortened OneGraph query"""
  operation: String

  """An optional description of the purpose of the query"""
  description: String

  """The optional short name for the shortened OneGraph query"""
  name: String

  """
  The fully-qualified url for the shortened OneGraph query, used for sharing
  """
  url: String!
}

input OneGraphServiceInfoFilter {
  """Check for any expression in this list"""
  or: [OneGraphServiceInfoFilter!]

  """Filter for services that support Netlify Graph"""
  supportsNetlifyGraph: Boolean

  """Filter for services that support Netlify Api Authentication"""
  supportsNetlifyApiAuthentication: Boolean

  """Filter for services that support custom service auth"""
  supportsCustomServiceAuth: Boolean

  """Filter for services that support OAuth login"""
  supportsOauthLogin: Boolean
}

"""
Root fields for the OneGraph service. Used by OneGraph to build OneGraph.
"""
type OneGraphServiceQuery {
  services(filter: OneGraphServiceInfoFilter): [OneGraphServiceInfo!]!
  shortenedUrl(id: String!): OneGraphShortenedQuery
  queries: [OneGraphQuery!]!
  searchQueries(query: String!): [OneGraphQuery!]!
  apps: [OneGraphApp!]!
  app(
    """App id"""
    id: String!
  ): OneGraphApp!
  orgs: [OneGraphOrg!]!
  org(
    """Org id"""
    id: String!
  ): OneGraphOrg!
  serverInfo: OneGraphServerInfo!
  authGuardianPreview(input: OneGraphSetAuthGuardianInput!): OneGraphSetAuthGuardianResponsePayload

  """
  An identity function. The field will return whatever is provided as the input.
  """
  identity(
    """The input that should be returned."""
    input: JSON
  ): JSON

  """A graphql subscription."""
  graphQLSubscription(
    """The unique id for the app."""
    appId: String!

    """The unique id for the subscription."""
    id: String!
  ): OneGraphAppSubscription

  """Fetch a single persisted query by its id."""
  persistedQuery(
    """The id of the app that the persisted query belongs to."""
    appId: String!

    """The id of the persisted query."""
    id: String!
  ): OneGraphPersistedQuery!

  """Find a GraphQL schema by its id."""
  graphQLSchema(
    """The id of the app that the GraphQL schema belongs to."""
    appId: String!

    """The id of the GraphQL schema."""
    id: String!
  ): OneGraphGraphQLSchema!
  authlifyToken(authlifyTokenId: String!): AuthlifyToken!

  """Personal access token lookup"""
  personalToken(accessToken: String!): OneGraphAccessToken
  netlifyCliEvents(
    """The number of events to fetch. The maximum is 1000."""
    first: Int = 1000
    sessionId: String!
  ): [OneGraphNetlifyCliSessionEvent!]!

  """Netlify CLI sessions, orderd by createdAt descending."""
  netlifyCliSessionsByAppId(
    """The number of sessions to fetch. The maximum is 10."""
    first: Int = 10
    appId: String!
  ): [OneGraphNetlifyCliSession!]!

  """Get a Netlify CLI session by its id."""
  netlifyCliSession(id: String!): OneGraphNetlifyCliSession!
}

input OneGraphServiceUserIds {
  """User id for Adroll"""
  adroll: String

  """User id for Asana"""
  asana: String

  """User id for Box"""
  box: String

  """User id for Contentful"""
  contentful: String

  """User id for Dev.to"""
  devTo: String

  """User id for Docusign"""
  docusign: String

  """User id for Dribbble"""
  dribbble: String

  """User id for Dropbox"""
  dropbox: String

  """User id for Egghead.io"""
  eggheadio: String

  """User id for Eventil"""
  eventil: String

  """User id for Facebook"""
  facebookBusiness: String

  """User id for Firebase"""
  firebase: String

  """User id for GitHub"""
  gitHub: String

  """User id for Gmail"""
  gmail: String

  """User id for Gong"""
  gong: String

  """User id for Google"""
  google: String

  """User id for Google Ads"""
  googleAds: String

  """User id for Google Analytics"""
  googleAnalytics: String

  """User id for Google Calendar"""
  googleCalendar: String

  """User id for Google Compute"""
  googleCompute: String

  """User id for Google Docs"""
  googleDocs: String

  """User id for Google Search Console"""
  googleSearchConsole: String

  """User id for Google Translate"""
  googleTranslate: String

  """User id for Hubspot"""
  hubspot: String

  """User id for Intercom"""
  intercom: String

  """User id for Mailchimp"""
  mailchimp: String

  """User id for Meetup"""
  meetup: String

  """User id for Netlify"""
  netlify: String

  """User id for Notion"""
  notion: String

  """User id for Outreach"""
  outreach: String

  """User id for Product Hunt"""
  productHunt: String

  """User id for QuickBooks"""
  quickbooks: String

  """User id for Salesforce"""
  salesforce: String

  """User id for Sanity"""
  sanity: String

  """User id for Slack"""
  slack: String

  """User id for Spotify"""
  spotify: String

  """User id for Stripe"""
  stripe: String

  """User id for Trello"""
  trello: String

  """User id for Twilio"""
  twilio: String

  """User id for Twitter"""
  twitter: String

  """User id for Twitch"""
  twitchTv: String

  """User id for You Need a Budget"""
  ynab: String

  """User id for YouTube"""
  youTube: String

  """User id for Vercel"""
  zeit: String

  """User id for Zendesk"""
  zendesk: String
}

input OneGraphZendeskAPITokenAuth {
  token: String!
  email: String!
  subdomain: String!
}

input OneGraphUSPSAPIAuth {
  password: String
  userId: String!
}

input OneGraphUPSAPIAuth {
  accessToken: String!
  password: String!
  username: String!
}

input OneGraphTwilioAuth {
  authToken: String!
  accountSid: String!
}

input OneGraphTrelloTokenAuth {
  token: String!
  apiKey: String!
}

"""
Authenticate requests when using the Stripe API on behalf of a connected account using the Stripe-Account header and the connected account’s ID. https://stripe.com/docs/connect/authentication#stripe-account-header
"""
input OneGraphStripeConnectAuthArg {
  """Id of the connected account for which the request is being made."""
  connectedStripeAccountId: String!

  """Your platform account’s secret key."""
  platformSecretKey: String!
}

input OneGraphSalesforceOAuthArg {
  instanceUrl: String!
  token: String!
}

input OneGraphOrbitAuthArg {
  """
  For use with a API key. To generate an api key, see the [Account Settings](https://app.orbit.love/user/edit) in your Orbit dashboard.
  """
  apiKey: String!
}

input OneGraphOpenCollectiveAuthArg {
  """
  For use with a API key. To generate an api key, see the [applications page](https://opencollective.com/applications) in your OpenCollective dashboard.
  """
  apiKey: String!
}

input OneGraphNpmBasicAuth {
  password: String!
  username: String!
}

input OneGraphNpmAuthArg {
  """
  An API or OAuth token with sufficient permissions to publish npm packages
  """
  apiToken: String

  """Basic username/password authentication"""
  basic: OneGraphNpmBasicAuth
}

input OneGraphNetlifyAuthArg {
  oauthToken: String!
}

input OneGraphMuxAPITokenAuthArg {
  secret: String!
  tokenId: String!
}

input OneGraphMuxAuthArg {
  """
  For advanced usage: if you have separately implemented the Mux OAuth flow and have an OAuth token to make calls on behalf of your user, use it with this `oauthToken` argument
  """
  oauthToken: String

  """
  For use with a API access token. To generate an access token ID and secret, see the [settings page](https://dashboard.mux.com/settings/access-tokens) in your Mux dashboard. Will take priority over the `oauthToken` argument if both are provided.
  """
  accessToken: OneGraphMuxAPITokenAuthArg
}

input OneGraphLogdnaServiceAuthArg {
  """
  Service Key from LogDNA. Retrive a service key from [your profile](https://app.logdna.com/manage/profile) under API Keys > Service Keys.
  """
  serviceKey: String!
}

input OneGraphGoogleAdsAuthArg {
  oauthToken: String!

  """
  A developer token from Google allows your app to connect to the Google Ads API.
  
  To retrieve your developer token, sign in to your Manager Account. You must be signed-in to a Google Ads Manager Account before continuing. Navigate to TOOLS & SETTINGS > SETUP > API Center."
  """
  developerToken: String!
}

input OneGraphGongBasicAuthArg {
  accessKeySecret: String!
  accessKey: String!
}

input OneGraphGongAuthArg {
  """
  For advanced usage: if you have separately implemented the Gong OAuth flow and have an OAuth token to make calls on behalf of your user, use it with this `oauthToken` argument
  """
  oauthToken: String

  """
  In the [Gong API Page](https://app.gong.io/company/api) (you must be a technical administrator in Gong), click `Create` to receive an Access Key and an Access Key Secret.
  """
  basic: OneGraphGongBasicAuthArg
}

input OneGraphFedexAPIAuth {
  meterNumber: String!
  accountNumber: String!
  password: String!
  key: String!
}

input OneGraphDevToAuthArg {
  """
  For advanced usage: if you have separately implemented the Dev.to OAuth flow and have an OAuth token to make calls on behalf of your user, use it with this `oauthToken` argument
  """
  oauthToken: String

  """
  For use with a personal API token, see the [Dev.to authentication](https://docs.dev.to/api/#section/Authentication/api_key) docs on generating a token. Will take priority over the `oauthToken` argument if both are provided.
  """
  apiKey: String
}

input OneGraphCloudflareUserAuthArg {
  key: String!
  email: String!
}

input OneGraphChagebeeAuthArg {
  """
  A [Chargebee API key](https://www.chargebee.com/docs/2.0/api_keys.html). To create a key go to **Settings** > **Configure Chargebee** > **API Keys and Webhooks** and then click on the **API Keys** tab.
  """
  apiKey: String!

  """
  The [chargebee site](https://www.chargebee.com/docs/2.0/sites-intro.html). 
  """
  site: String!
}

input OneGraphApolloAuthArg {
  """
  For use with a API key. To generate an api key, see the [Account Settings](https://app.apollo.love/user/edit) in your Apollo dashboard.
  """
  apiKey: String!
}

input OneGraphServiceAuths {
  zendeskAPITokenAuth: OneGraphZendeskAPITokenAuth
  zeitOAuthToken: String
  youtubeOAuthToken: String

  """
  A Wordpress bearer token. This arg is compatible with the `authToken` that is passed as an `Authorization` header in [wp-graphql-jwt-authentication plugin](https://github.com/wp-graphql/wp-graphql-jwt-authentication), or any other plugin that uses a bearer token in the `Authorization` header. 
  """
  wordpressBearerToken: String
  uspsAPIAuth: OneGraphUSPSAPIAuth
  upsAPIAuth: OneGraphUPSAPIAuth
  twilioAuth: OneGraphTwilioAuth
  trelloTokenAuth: OneGraphTrelloTokenAuth
  stripeOAuthToken: String
  stripeConnectAuth: OneGraphStripeConnectAuthArg
  spotifyOAuthToken: String
  slackOAuthToken: String
  salesforceOAuth: OneGraphSalesforceOAuthArg
  productHuntOAuthToken: String
  orbit: OneGraphOrbitAuthArg
  openCollective: OneGraphOpenCollectiveAuthArg
  onegraphToken: String
  npmAuth: OneGraphNpmAuthArg
  netlifyAuth: OneGraphNetlifyAuthArg
  muxAuth: OneGraphMuxAuthArg
  mixpanelApiSecret: String
  logdnaServiceAuth: OneGraphLogdnaServiceAuthArg
  intercomOAuthToken: String
  hubspotOAuthToken: String
  graphCmsToken: String
  googleTranslateOAuthToken: String
  googleSearchConsoleOAuthToken: String
  googleMapsKey: String
  googleDocsOAuthToken: String
  googleComputeOAuthToken: String
  googleCalendarOAuthToken: String
  googleAdsAuth: OneGraphGoogleAdsAuthArg
  googleOAuthToken: String
  gongAuth: OneGraphGongAuthArg
  gmailOAuthToken: String
  gitHubOAuthToken: String
  firebaseOAuthToken: String
  fedexAPIAuth: OneGraphFedexAPIAuth
  facebookOAuthToken: String
  dropboxOAuthToken: String
  dribbbleOAuthToken: String
  devToAuth: OneGraphDevToAuthArg
  crunchbaseUserKey: String
  cloudflareUserAuth: OneGraphCloudflareUserAuthArg
  clearbitAuth: String
  chargebee: OneGraphChagebeeAuthArg
  brexAuth: String
  apollo: OneGraphApolloAuthArg
  airtableApiKey: String
}

"""
The anchor is like two-factor auth for the token. It ensures that the person who adds auth to the token is the same as the person who created the token.
"""
enum OneGraphAccessTokenAnchorEnum {
  """
  Use the logged in OneGraph user. The user must be logged in to the OneGraph dashboard to use this option.
  """
  ONEGRAPH_USER

  """
  Use the logged in Netlify user. The token must have an active Netlify auth to use this option.
  """
  NETLIFY_USER

  """Use the provided Netlify site."""
  NETLIFY_SITE
}

"""Custom data for a OneGraph user auth."""
type OneGraphUserAuthCustomDataForOneGraph {
  """AppId that the tokens applies to."""
  appId: String
}

"""Service-specific data for a user auth."""
union OneGraphUserAuthCustomData = OneGraphUserAuthCustomDataForOneGraph

"""A user auth associated with an access token"""
type OneGraphUserAuth {
  """Service that the auth belongs to."""
  service: OneGraphServiceEnum!

  """Unique id for the logged-in entity on the service."""
  foreignUserId: String!

  """Scopes granted for the service."""
  scopes: [String!]

  """Service-specific data for the user auth"""
  customData: OneGraphUserAuthCustomData
}

"""A OneGraph Access Token"""
type OneGraphAccessToken {
  """Bearer token"""
  token: String!

  """
  Time that the the token expires, measured in seconds since the Unix epoch
  """
  expireDate: Int!

  """Token name, if it is a personal access token"""
  name: String

  """AppId that the token belongs to"""
  appId: String!

  """User auths for the access token"""
  userAuths: [OneGraphUserAuth!]!

  """
  The anchor is like two-factor auth for the token. It ensures that the person who adds auth to the token is the same as the person who created the token.
  """
  anchor: OneGraphAccessTokenAnchorEnum

  """Netlify-specific ID for the token"""
  netlifyId: String
}

"""The settings for a OneGraph User"""
type OneGraphUserSettings {
  """The tours completed by this OneGraph user"""
  completedTours: [String!]!
}

"""A OneGraph User"""
type OneGraphUser {
  """The id of the OneGraph User"""
  id: String!

  """Whether this OneGraph user has confirmed their account"""
  confirmed: Boolean!

  """The primary email of the currently logged-in OneGraph user"""
  email: String!

  """The full name of the currently logged-in OneGraph user"""
  fullName: String!

  """
  The date at which this user agreed to the OneGraph terms of service at https://www.onegraph.com/terms-and-conditions
  """
  agreedToTosAt: Int

  """The settings of the currently logged-in OneGraph user"""
  settings: OneGraphUserSettings!

  """User hash for securely identifying a user with Intercom"""
  intercomUserHash: String!

  """Personal access tokens"""
  personalTokens: [OneGraphAccessToken!]

  """
  The gitHub databaseId if this OneGraph User has associated their account with a GitHub account
  """
  gitHubUserId: String
}

"""A scope that has been granted to the user"""
type OneGraphServiceMetadataGrantedScope {
  """The name of the scope that the underlying service uses."""
  scope: String!

  """
  Details about the scope. This may be null if OneGraph has not mapped out the scope.
  """
  scopeInfo: OneGraphServiceScope
}

"""A version tag contains the mapping between a tag name and a version."""
type GitHubPackageTag implements OneGraphNode & GitHubNode {
  """"""
  id: ID!

  """Identifies the tag name of the version."""
  name: String!

  """Version that the tag is associated with."""
  version: GitHubPackageVersion
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

enum GitHubTeamRepositoryOrderField {
  """Order repositories by creation time"""
  CREATED_AT

  """Order repositories by update time"""
  UPDATED_AT

  """Order repositories by push time"""
  PUSHED_AT

  """Order repositories by name"""
  NAME

  """Order repositories by permission"""
  PERMISSION

  """Order repositories by number of stargazers"""
  STARGAZERS
}

"""Ordering options for team repository connections"""
input GitHubTeamRepositoryOrder {
  """The field to order repositories by."""
  field: GitHubTeamRepositoryOrderField!

  """The ordering direction."""
  direction: GitHubOrderDirection!
}

"""Represents a team repository."""
type GitHubTeamRepositoryEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """"""
  node: GitHubRepository!

  """The permission level the team has on the repository"""
  permission: GitHubRepositoryPermission!
}

"""The connection type for Repository."""
type GitHubTeamRepositoryConnection {
  """A list of edges."""
  edges: [GitHubTeamRepositoryEdge]

  """A list of nodes."""
  nodes: [GitHubRepository]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

enum GitHubTeamMembershipType {
  """Includes only immediate members of the team."""
  IMMEDIATE

  """Includes only child team members for the team."""
  CHILD_TEAM

  """Includes immediate and child team members for the team."""
  ALL
}

enum GitHubTeamMemberOrderField {
  """Order team members by login"""
  LOGIN

  """Order team members by creation time"""
  CREATED_AT
}

"""Ordering options for team member connections"""
input GitHubTeamMemberOrder {
  """The field to order team members by."""
  field: GitHubTeamMemberOrderField!

  """The ordering direction."""
  direction: GitHubOrderDirection!
}

enum GitHubTeamMemberRole {
  """A team maintainer has permission to add and remove team members."""
  MAINTAINER

  """A team member has no administrative permissions on the team."""
  MEMBER
}

"""Represents a user who is a member of a team."""
type GitHubTeamMemberEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The HTTP path to the organization's member access page."""
  memberAccessResourcePath: GitHubURI!

  """The HTTP URL to the organization's member access page."""
  memberAccessUrl: GitHubURI!

  """"""
  node: GitHubUser!

  """The role the member has on the team."""
  role: GitHubTeamMemberRole!
}

"""The connection type for User."""
type GitHubTeamMemberConnection {
  """A list of edges."""
  edges: [GitHubTeamMemberEdge]

  """A list of nodes."""
  nodes: [GitHubUser]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type GitHubOrganizationInvitationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubOrganizationInvitation
}

"""The connection type for OrganizationInvitation."""
type GitHubOrganizationInvitationConnection {
  """A list of edges."""
  edges: [GitHubOrganizationInvitationEdge]

  """A list of nodes."""
  nodes: [GitHubOrganizationInvitation]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

enum GitHubTeamDiscussionOrderField {
  """Allows chronological ordering of team discussions."""
  CREATED_AT
}

"""Ways in which team discussion connections can be ordered."""
input GitHubTeamDiscussionOrder {
  """The field by which to order nodes."""
  field: GitHubTeamDiscussionOrderField!

  """The direction in which to order nodes."""
  direction: GitHubOrderDirection!
}

"""An edge in a connection."""
type GitHubTeamDiscussionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubTeamDiscussion
}

"""The connection type for TeamDiscussion."""
type GitHubTeamDiscussionConnection {
  """A list of edges."""
  edges: [GitHubTeamDiscussionEdge]

  """A list of nodes."""
  nodes: [GitHubTeamDiscussion]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

enum GitHubTeamDiscussionCommentOrderField {
  """
  Allows sequential ordering of team discussion comments (which is equivalent to chronological ordering).
  """
  NUMBER
}

"""Ways in which team discussion comment connections can be ordered."""
input GitHubTeamDiscussionCommentOrder {
  """The field by which to order nodes."""
  field: GitHubTeamDiscussionCommentOrderField!

  """The direction in which to order nodes."""
  direction: GitHubOrderDirection!
}

"""Represents a user that's made a reaction."""
type GitHubReactingUserEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """"""
  node: GitHubUser!

  """The moment when the user made the reaction."""
  reactedAt: GitHubDateTime!
}

"""The connection type for User."""
type GitHubReactingUserConnection {
  """A list of edges."""
  edges: [GitHubReactingUserEdge]

  """A list of nodes."""
  nodes: [GitHubUser]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Represents the rollup for both the check runs and status for a commit."""
type GitHubStatusCheckRollup implements OneGraphNode & GitHubNode {
  """The commit the status and check runs are attached to."""
  commit: GitHubCommit

  """A list of status contexts and check runs for this commit."""
  contexts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubStatusCheckRollupContextConnection!

  """"""
  id: ID!

  """The combined status for the commit."""
  state: GitHubStatusState!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An edge in a connection."""
type GitHubStatusCheckRollupContextEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubStatusCheckRollupContext
}

"""The connection type for StatusCheckRollupContext."""
type GitHubStatusCheckRollupContextConnection {
  """A list of edges."""
  edges: [GitHubStatusCheckRollupContextEdge]

  """A list of nodes."""
  nodes: [GitHubStatusCheckRollupContext]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Represents a commit status."""
type GitHubStatus implements OneGraphNode & GitHubNode {
  """A list of status contexts and check runs for this commit."""
  combinedContexts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubStatusCheckRollupContextConnection!

  """The commit this status is attached to."""
  commit: GitHubCommit

  """Looks up an individual status context by context name."""
  context(
    """The context name."""
    name: String!
  ): GitHubStatusContext

  """The individual status contexts for this commit."""
  contexts: [GitHubStatusContext!]!

  """"""
  id: ID!

  """The combined commit status."""
  state: GitHubStatusState!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Represents an unknown signature on a Commit or Tag."""
type GitHubUnknownSignature implements GitHubGitSignature {
  """Email used to sign this object."""
  email: String!

  """True if the signature is valid and verified by GitHub."""
  isValid: Boolean!

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!

  """ASCII-armored signature header from object."""
  signature: String!

  """GitHub user corresponding to the email signing this commit."""
  signer: GitHubUser

  """
  The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitHubGitSignatureState!

  """True if the signature was made with GitHub's signing key."""
  wasSignedByGitHub: Boolean!
}

"""Represents an S/MIME signature on a Commit or Tag."""
type GitHubSmimeSignature implements GitHubGitSignature {
  """Email used to sign this object."""
  email: String!

  """True if the signature is valid and verified by GitHub."""
  isValid: Boolean!

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!

  """ASCII-armored signature header from object."""
  signature: String!

  """GitHub user corresponding to the email signing this commit."""
  signer: GitHubUser

  """
  The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitHubGitSignatureState!

  """True if the signature was made with GitHub's signing key."""
  wasSignedByGitHub: Boolean!
}

enum GitHubGitSignatureState {
  """Valid signature and verified by GitHub"""
  VALID

  """Invalid signature"""
  INVALID

  """Malformed signature"""
  MALFORMED_SIG

  """Key used for signing not known to GitHub"""
  UNKNOWN_KEY

  """Invalid email used for signing"""
  BAD_EMAIL

  """Email used for signing unverified on GitHub"""
  UNVERIFIED_EMAIL

  """Email used for signing not known to GitHub"""
  NO_USER

  """Unknown signature type"""
  UNKNOWN_SIG_TYPE

  """Unsigned"""
  UNSIGNED

  """
  Internal error - the GPG verification service is unavailable at the moment
  """
  GPGVERIFY_UNAVAILABLE

  """Internal error - the GPG verification service misbehaved"""
  GPGVERIFY_ERROR

  """The usage flags for the key that signed this don't allow signing"""
  NOT_SIGNING_KEY

  """Signing key expired"""
  EXPIRED_KEY

  """Valid signature, pending certificate revocation checking"""
  OCSP_PENDING

  """Valid signature, though certificate revocation check failed"""
  OCSP_ERROR

  """The signing certificate or its chain could not be verified"""
  BAD_CERT

  """One or more certificates in chain has been revoked"""
  OCSP_REVOKED
}

"""Represents a GPG signature on a Commit or Tag."""
type GitHubGpgSignature implements GitHubGitSignature {
  """Email used to sign this object."""
  email: String!

  """True if the signature is valid and verified by GitHub."""
  isValid: Boolean!

  """Hex-encoded ID of the key that signed this object."""
  keyId: String

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!

  """ASCII-armored signature header from object."""
  signature: String!

  """GitHub user corresponding to the email signing this commit."""
  signer: GitHubUser

  """
  The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitHubGitSignatureState!

  """True if the signature was made with GitHub's signing key."""
  wasSignedByGitHub: Boolean!
}

"""Information about a signature (GPG or S/MIME) on a Commit or Tag."""
interface GitHubGitSignature {
  """Email used to sign this object."""
  email: String!

  """True if the signature is valid and verified by GitHub."""
  isValid: Boolean!

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!

  """ASCII-armored signature header from object."""
  signature: String!

  """GitHub user corresponding to the email signing this commit."""
  signer: GitHubUser

  """
  The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitHubGitSignatureState!

  """True if the signature was made with GitHub's signing key."""
  wasSignedByGitHub: Boolean!
}

"""The connection type for Commit."""
type GitHubCommitConnection {
  """A list of edges."""
  edges: [GitHubCommitEdge]

  """A list of nodes."""
  nodes: [GitHubCommit]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Specifies an author for filtering Git commits."""
input GitHubCommitAuthor {
  """
  ID of a User to filter by. If non-null, only commits authored by this user will be returned. This field takes precedence over emails.
  """
  id: ID

  """
  Email addresses to filter by. Commits authored by any of the specified email addresses will be returned.
  """
  emails: [String!]
}

"""An edge in a connection."""
type GitHubCommitEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubCommit
}

"""The connection type for Commit."""
type GitHubCommitHistoryConnection {
  """A list of edges."""
  edges: [GitHubCommitEdge]

  """A list of nodes."""
  nodes: [GitHubCommit]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""The filters that are available when fetching check suites."""
input GitHubCheckSuiteFilter {
  """Filters the check suites created by this application ID."""
  appId: Int

  """Filters the check suites by this name."""
  checkName: String
}

"""An edge in a connection."""
type GitHubCheckSuiteEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubCheckSuite
}

"""The connection type for CheckSuite."""
type GitHubCheckSuiteConnection {
  """A list of edges."""
  edges: [GitHubCheckSuiteEdge]

  """A list of nodes."""
  nodes: [GitHubCheckSuite]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Represents a range of information from a Git blame."""
type GitHubBlameRange {
  """
  Identifies the recency of the change, from 1 (new) to 10 (old). This is calculated as a 2-quantile and determines the length of distance between the median age of all the changes in the file and the recency of the current range's change.
  """
  age: Int!

  """Identifies the line author"""
  commit: GitHubCommit!

  """The ending line for the range"""
  endingLine: Int!

  """The starting line for the range"""
  startingLine: Int!
}

"""Represents a Git blame."""
type GitHubBlame {
  """The list of ranges from a Git blame."""
  ranges: [GitHubBlameRange!]!
}

"""An edge in a connection."""
type GitHubGitActorEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubGitActor
}

"""The connection type for GitActor."""
type GitHubGitActorConnection {
  """A list of edges."""
  edges: [GitHubGitActorEdge]

  """A list of nodes."""
  nodes: [GitHubGitActor]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

enum GitHubPullRequestOrderField {
  """Order pull_requests by creation time"""
  CREATED_AT

  """Order pull_requests by update time"""
  UPDATED_AT
}

"""Ways in which lists of issues can be ordered upon return."""
input GitHubPullRequestOrder {
  """The field in which to order pull requests by."""
  field: GitHubPullRequestOrderField!

  """The direction in which to order pull requests by the specified field."""
  direction: GitHubOrderDirection!
}

enum GitHubPullRequestTimelineItemsItemType {
  """Represents a Git commit part of a pull request."""
  PULL_REQUEST_COMMIT

  """Represents a commit comment thread part of a pull request."""
  PULL_REQUEST_COMMIT_COMMENT_THREAD

  """A review object for a given pull request."""
  PULL_REQUEST_REVIEW

  """A threaded list of comments for a given pull request."""
  PULL_REQUEST_REVIEW_THREAD

  """
  Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
  """
  PULL_REQUEST_REVISION_MARKER

  """
  Represents a 'automatic_base_change_failed' event on a given pull request.
  """
  AUTOMATIC_BASE_CHANGE_FAILED_EVENT

  """
  Represents a 'automatic_base_change_succeeded' event on a given pull request.
  """
  AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT

  """Represents a 'auto_merge_disabled' event on a given pull request."""
  AUTO_MERGE_DISABLED_EVENT

  """Represents a 'auto_merge_enabled' event on a given pull request."""
  AUTO_MERGE_ENABLED_EVENT

  """Represents a 'auto_rebase_enabled' event on a given pull request."""
  AUTO_REBASE_ENABLED_EVENT

  """Represents a 'auto_squash_enabled' event on a given pull request."""
  AUTO_SQUASH_ENABLED_EVENT

  """
  Represents a 'base_ref_changed' event on a given issue or pull request.
  """
  BASE_REF_CHANGED_EVENT

  """Represents a 'base_ref_force_pushed' event on a given pull request."""
  BASE_REF_FORCE_PUSHED_EVENT

  """Represents a 'base_ref_deleted' event on a given pull request."""
  BASE_REF_DELETED_EVENT

  """Represents a 'deployed' event on a given pull request."""
  DEPLOYED_EVENT

  """
  Represents a 'deployment_environment_changed' event on a given pull request.
  """
  DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT

  """Represents a 'head_ref_deleted' event on a given pull request."""
  HEAD_REF_DELETED_EVENT

  """Represents a 'head_ref_force_pushed' event on a given pull request."""
  HEAD_REF_FORCE_PUSHED_EVENT

  """Represents a 'head_ref_restored' event on a given pull request."""
  HEAD_REF_RESTORED_EVENT

  """Represents a 'merged' event on a given pull request."""
  MERGED_EVENT

  """
  Represents a 'review_dismissed' event on a given issue or pull request.
  """
  REVIEW_DISMISSED_EVENT

  """Represents an 'review_requested' event on a given pull request."""
  REVIEW_REQUESTED_EVENT

  """Represents an 'review_request_removed' event on a given pull request."""
  REVIEW_REQUEST_REMOVED_EVENT

  """Represents a 'ready_for_review' event on a given pull request."""
  READY_FOR_REVIEW_EVENT

  """Represents a 'convert_to_draft' event on a given pull request."""
  CONVERT_TO_DRAFT_EVENT

  """Represents a comment on an Issue."""
  ISSUE_COMMENT

  """Represents a mention made by one issue or pull request to another."""
  CROSS_REFERENCED_EVENT

  """
  Represents a 'added_to_project' event on a given issue or pull request.
  """
  ADDED_TO_PROJECT_EVENT

  """Represents an 'assigned' event on any assignable object."""
  ASSIGNED_EVENT

  """Represents a 'closed' event on any `Closable`."""
  CLOSED_EVENT

  """Represents a 'comment_deleted' event on a given issue or pull request."""
  COMMENT_DELETED_EVENT

  """Represents a 'connected' event on a given issue or pull request."""
  CONNECTED_EVENT

  """
  Represents a 'converted_note_to_issue' event on a given issue or pull request.
  """
  CONVERTED_NOTE_TO_ISSUE_EVENT

  """Represents a 'demilestoned' event on a given issue or pull request."""
  DEMILESTONED_EVENT

  """Represents a 'disconnected' event on a given issue or pull request."""
  DISCONNECTED_EVENT

  """Represents a 'labeled' event on a given issue or pull request."""
  LABELED_EVENT

  """Represents a 'locked' event on a given issue or pull request."""
  LOCKED_EVENT

  """
  Represents a 'marked_as_duplicate' event on a given issue or pull request.
  """
  MARKED_AS_DUPLICATE_EVENT

  """Represents a 'mentioned' event on a given issue or pull request."""
  MENTIONED_EVENT

  """Represents a 'milestoned' event on a given issue or pull request."""
  MILESTONED_EVENT

  """
  Represents a 'moved_columns_in_project' event on a given issue or pull request.
  """
  MOVED_COLUMNS_IN_PROJECT_EVENT

  """Represents a 'pinned' event on a given issue or pull request."""
  PINNED_EVENT

  """Represents a 'referenced' event on a given `ReferencedSubject`."""
  REFERENCED_EVENT

  """
  Represents a 'removed_from_project' event on a given issue or pull request.
  """
  REMOVED_FROM_PROJECT_EVENT

  """Represents a 'renamed' event on a given issue or pull request"""
  RENAMED_TITLE_EVENT

  """Represents a 'reopened' event on any `Closable`."""
  REOPENED_EVENT

  """Represents a 'subscribed' event on a given `Subscribable`."""
  SUBSCRIBED_EVENT

  """Represents a 'transferred' event on a given issue or pull request."""
  TRANSFERRED_EVENT

  """Represents an 'unassigned' event on any assignable object."""
  UNASSIGNED_EVENT

  """Represents an 'unlabeled' event on a given issue or pull request."""
  UNLABELED_EVENT

  """Represents an 'unlocked' event on a given issue or pull request."""
  UNLOCKED_EVENT

  """Represents a 'user_blocked' event on a given user."""
  USER_BLOCKED_EVENT

  """
  Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
  """
  UNMARKED_AS_DUPLICATE_EVENT

  """Represents an 'unpinned' event on a given issue or pull request."""
  UNPINNED_EVENT

  """Represents an 'unsubscribed' event on a given `Subscribable`."""
  UNSUBSCRIBED_EVENT
}

"""An edge in a connection."""
type GitHubPullRequestTimelineItemsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubPullRequestTimelineItems
}

"""The connection type for PullRequestTimelineItems."""
type GitHubPullRequestTimelineItemsConnection {
  """A list of edges."""
  edges: [GitHubPullRequestTimelineItemsEdge]

  """
  Identifies the count of items after applying `before` and `after` filters.
  """
  filteredCount: Int!

  """A list of nodes."""
  nodes: [GitHubPullRequestTimelineItems]

  """
  Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing.
  """
  pageCount: Int!

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!

  """Identifies the date and time when the timeline was last updated."""
  updatedAt: GitHubDateTime!
}

"""An edge in a connection."""
type GitHubPullRequestTimelineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubPullRequestTimelineItem
}

"""The connection type for PullRequestTimelineItem."""
type GitHubPullRequestTimelineConnection {
  """A list of edges."""
  edges: [GitHubPullRequestTimelineItemEdge]

  """A list of nodes."""
  nodes: [GitHubPullRequestTimelineItem]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""
A suggestion to review a pull request based on a user's commit history and review comments.
"""
type GitHubSuggestedReviewer {
  """Is this suggestion based on past commits?"""
  isAuthor: Boolean!

  """Is this suggestion based on past review comments?"""
  isCommenter: Boolean!

  """Identifies the user suggested to review the pull request."""
  reviewer: GitHubUser!
}

"""An edge in a connection."""
type GitHubPullRequestReviewThreadEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubPullRequestReviewThread
}

"""Review comment threads for a pull request review."""
type GitHubPullRequestReviewThreadConnection {
  """A list of edges."""
  edges: [GitHubPullRequestReviewThreadEdge]

  """A list of nodes."""
  nodes: [GitHubPullRequestReviewThread]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A request for a user to review a pull request."""
type GitHubReviewRequest implements OneGraphNode & GitHubNode {
  """Whether this request was created for a code owner"""
  asCodeOwner: Boolean!

  """Identifies the primary key from the database."""
  databaseId: Int

  """"""
  id: ID!

  """Identifies the pull request associated with this review request."""
  pullRequest: GitHubPullRequest!

  """The reviewer that is requested."""
  requestedReviewer: GitHubRequestedReviewer
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An edge in a connection."""
type GitHubReviewRequestEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubReviewRequest
}

"""The connection type for ReviewRequest."""
type GitHubReviewRequestConnection {
  """A list of edges."""
  edges: [GitHubReviewRequestEdge]

  """A list of nodes."""
  nodes: [GitHubReviewRequest]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

enum GitHubMergeableState {
  """The pull request can be merged."""
  MERGEABLE

  """The pull request cannot be merged due to merge conflicts."""
  CONFLICTING

  """The mergeability of the pull request is still being calculated."""
  UNKNOWN
}

"""An edge in a connection."""
type GitHubPullRequestReviewEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubPullRequestReview
}

"""The connection type for PullRequestReview."""
type GitHubPullRequestReviewConnection {
  """A list of edges."""
  edges: [GitHubPullRequestReviewEdge]

  """A list of nodes."""
  nodes: [GitHubPullRequestReview]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

enum GitHubFileViewedState {
  """The file has new changes since last viewed."""
  DISMISSED

  """The file has been marked as viewed."""
  VIEWED

  """The file has not been marked as viewed."""
  UNVIEWED
}

"""A file changed in a pull request."""
type GitHubPullRequestChangedFile {
  """The number of additions to the file."""
  additions: Int!

  """The number of deletions to the file."""
  deletions: Int!

  """The path of the file."""
  path: String!

  """The state of the file for the viewer."""
  viewerViewedState: GitHubFileViewedState!
}

"""An edge in a connection."""
type GitHubPullRequestChangedFileEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubPullRequestChangedFile
}

"""The connection type for PullRequestChangedFile."""
type GitHubPullRequestChangedFileConnection {
  """A list of edges."""
  edges: [GitHubPullRequestChangedFileEdge]

  """A list of nodes."""
  nodes: [GitHubPullRequestChangedFile]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type GitHubPullRequestCommitEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubPullRequestCommit
}

"""The connection type for PullRequestCommit."""
type GitHubPullRequestCommitConnection {
  """A list of edges."""
  edges: [GitHubPullRequestCommitEdge]

  """A list of nodes."""
  nodes: [GitHubPullRequestCommit]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Represents an auto-merge request for a pull request"""
type GitHubAutoMergeRequest {
  """The email address of the author of this auto-merge request."""
  authorEmail: String

  """The commit message of the auto-merge request."""
  commitBody: String

  """The commit title of the auto-merge request."""
  commitHeadline: String

  """When was this auto-merge request was enabled."""
  enabledAt: GitHubDateTime

  """The actor who created the auto-merge request."""
  enabledBy: GitHubActor

  """The merge method of the auto-merge request."""
  mergeMethod: GitHubPullRequestMergeMethod!

  """The pull request that this auto-merge request is set against."""
  pullRequest: GitHubPullRequest!
}

"""
Extended email data for the currently-authenticated user.

See the [email address endpoint documentation](https://developer.github.com/v3/users/emails/#list-email-addresses-for-a-user) for more details.
"""
type GitHubUserEmail_oneGraph {
  email: String!
  isPrimary: Boolean!
  isVerified: Boolean!
}

"""Represents a starred repository."""
type GitHubStarredRepositoryEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """"""
  node: GitHubRepository!

  """Identifies when the item was starred."""
  starredAt: GitHubDateTime!
}

"""The connection type for Repository."""
type GitHubStarredRepositoryConnection {
  """A list of edges."""
  edges: [GitHubStarredRepositoryEdge]

  """
  Is the list of stars for this user truncated? This is true for users that have many stars.
  """
  isOverLimit: Boolean!

  """A list of nodes."""
  nodes: [GitHubRepository]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

enum GitHubSavedReplyOrderField {
  """Order saved reply by when they were updated."""
  UPDATED_AT
}

"""Ordering options for saved reply connections."""
input GitHubSavedReplyOrder {
  """The field to order saved replies by."""
  field: GitHubSavedReplyOrderField!

  """The ordering direction."""
  direction: GitHubOrderDirection!
}

"""A Saved Reply is text a user can use to reply quickly."""
type GitHubSavedReply implements OneGraphNode & GitHubNode {
  """The body of the saved reply."""
  body: String!

  """The saved reply body rendered to HTML."""
  bodyHTML: GitHubHTML!

  """Identifies the primary key from the database."""
  databaseId: Int

  """"""
  id: ID!

  """The title of the saved reply."""
  title: String!

  """The user that saved this reply."""
  user: GitHubActor
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An edge in a connection."""
type GitHubSavedReplyEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubSavedReply
}

"""The connection type for SavedReply."""
type GitHubSavedReplyConnection {
  """A list of edges."""
  edges: [GitHubSavedReplyEdge]

  """A list of nodes."""
  nodes: [GitHubSavedReply]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

enum GitHubRepositoryContributionType {
  """Created a commit"""
  COMMIT

  """Created an issue"""
  ISSUE

  """Created a pull request"""
  PULL_REQUEST

  """Created the repository"""
  REPOSITORY

  """Reviewed a pull request"""
  PULL_REQUEST_REVIEW
}

"""A user's public key."""
type GitHubPublicKey implements OneGraphNode & GitHubNode {
  """
  The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  """
  accessedAt: GitHubDateTime

  """
  Identifies the date and time when the key was created. Keys created before March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  """
  createdAt: GitHubDateTime

  """The fingerprint for this PublicKey."""
  fingerprint: String!

  """"""
  id: ID!

  """
  Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  """
  isReadOnly: Boolean

  """The public key string."""
  key: String!

  """
  Identifies the date and time when the key was updated. Keys created before March 5th, 2014 may have inaccurate values. Values will be null for keys not owned by the user.
  """
  updatedAt: GitHubDateTime
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An edge in a connection."""
type GitHubPublicKeyEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubPublicKey
}

"""The connection type for PublicKey."""
type GitHubPublicKeyConnection {
  """A list of edges."""
  edges: [GitHubPublicKeyEdge]

  """A list of nodes."""
  nodes: [GitHubPublicKey]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

enum GitHubGistPrivacy {
  """Public"""
  PUBLIC

  """Secret"""
  SECRET

  """Gists that are public and secret"""
  ALL
}

"""The connection type for User."""
type GitHubFollowingConnection {
  """A list of edges."""
  edges: [GitHubUserEdge]

  """A list of nodes."""
  nodes: [GitHubUser]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""The connection type for User."""
type GitHubFollowerConnection {
  """A list of edges."""
  edges: [GitHubUserEdge]

  """A list of nodes."""
  nodes: [GitHubUser]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type GitHubCreatedRepositoryContributionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubCreatedRepositoryContribution
}

"""The connection type for CreatedRepositoryContribution."""
type GitHubCreatedRepositoryContributionConnection {
  """A list of edges."""
  edges: [GitHubCreatedRepositoryContributionEdge]

  """A list of nodes."""
  nodes: [GitHubCreatedRepositoryContribution]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""
This aggregates pull request reviews made by a user within one repository.
"""
type GitHubPullRequestReviewContributionsByRepository {
  """The pull request review contributions."""
  contributions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for contributions returned from the connection."""
    orderBy: GitHubContributionOrder = {direction: DESC}
  ): GitHubCreatedPullRequestReviewContributionConnection!

  """The repository in which the pull request reviews were made."""
  repository: GitHubRepository!
}

"""An edge in a connection."""
type GitHubCreatedPullRequestReviewContributionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubCreatedPullRequestReviewContribution
}

"""The connection type for CreatedPullRequestReviewContribution."""
type GitHubCreatedPullRequestReviewContributionConnection {
  """A list of edges."""
  edges: [GitHubCreatedPullRequestReviewContributionEdge]

  """A list of nodes."""
  nodes: [GitHubCreatedPullRequestReviewContribution]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""This aggregates pull requests opened by a user within one repository."""
type GitHubPullRequestContributionsByRepository {
  """The pull request contributions."""
  contributions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for contributions returned from the connection."""
    orderBy: GitHubContributionOrder = {direction: DESC}
  ): GitHubCreatedPullRequestContributionConnection!

  """The repository in which the pull requests were opened."""
  repository: GitHubRepository!
}

"""An edge in a connection."""
type GitHubCreatedPullRequestContributionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubCreatedPullRequestContribution
}

"""The connection type for CreatedPullRequestContribution."""
type GitHubCreatedPullRequestContributionConnection {
  """A list of edges."""
  edges: [GitHubCreatedPullRequestContributionEdge]

  """A list of nodes."""
  nodes: [GitHubCreatedPullRequestContribution]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""This aggregates issues opened by a user within one repository."""
type GitHubIssueContributionsByRepository {
  """The issue contributions."""
  contributions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for contributions returned from the connection."""
    orderBy: GitHubContributionOrder = {direction: DESC}
  ): GitHubCreatedIssueContributionConnection!

  """The repository in which the issues were opened."""
  repository: GitHubRepository!
}

"""Ordering options for contribution connections."""
input GitHubContributionOrder {
  """The ordering direction."""
  direction: GitHubOrderDirection!
}

"""An edge in a connection."""
type GitHubCreatedIssueContributionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubCreatedIssueContribution
}

"""The connection type for CreatedIssueContribution."""
type GitHubCreatedIssueContributionConnection {
  """A list of edges."""
  edges: [GitHubCreatedIssueContributionEdge]

  """A list of nodes."""
  nodes: [GitHubCreatedIssueContribution]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

enum GitHubContributionLevel {
  """No contributions occurred."""
  NONE

  """Lowest 25% of days of contributions."""
  FIRST_QUARTILE

  """
  Second lowest 25% of days of contributions. More contributions than the first quartile.
  """
  SECOND_QUARTILE

  """
  Second highest 25% of days of contributions. More contributions than second quartile, less than the fourth quartile.
  """
  THIRD_QUARTILE

  """
  Highest 25% of days of contributions. More contributions than the third quartile.
  """
  FOURTH_QUARTILE
}

"""Represents a single day of contributions on GitHub by a user."""
type GitHubContributionCalendarDay {
  """
  The hex color code that represents how many contributions were made on this day compared to others in the calendar.
  """
  color: String!

  """How many contributions were made by the user on this day."""
  contributionCount: Int!

  """
  Indication of contributions, relative to other days. Can be used to indicate which color to represent this day on a calendar.
  """
  contributionLevel: GitHubContributionLevel!

  """The day this square represents."""
  date: GitHubDate!

  """
  A number representing which day of the week this square represents, e.g., 1 is Monday.
  """
  weekday: Int!
}

"""A week of contributions in a user's contribution graph."""
type GitHubContributionCalendarWeek {
  """The days of contributions in this week."""
  contributionDays: [GitHubContributionCalendarDay!]!

  """The date of the earliest square in this week."""
  firstDay: GitHubDate!
}

"""An ISO-8601 encoded date string."""
scalar GitHubDate

"""A month of contributions in a user's contribution graph."""
type GitHubContributionCalendarMonth {
  """The date of the first day of this month."""
  firstDay: GitHubDate!

  """The name of the month."""
  name: String!

  """How many weeks started in this month."""
  totalWeeks: Int!

  """The year the month occurred in."""
  year: Int!
}

"""A calendar of contributions made on GitHub by a user."""
type GitHubContributionCalendar {
  """
  A list of hex color codes used in this calendar. The darker the color, the more contributions it represents.
  """
  colors: [String!]!

  """
  Determine if the color set was chosen because it's currently Halloween.
  """
  isHalloween: Boolean!

  """A list of the months of contributions in this calendar."""
  months: [GitHubContributionCalendarMonth!]!

  """The count of total contributions in the calendar."""
  totalContributions: Int!

  """A list of the weeks of contributions in this calendar."""
  weeks: [GitHubContributionCalendarWeek!]!
}

enum GitHubCommitContributionOrderField {
  """Order commit contributions by when they were made."""
  OCCURRED_AT

  """Order commit contributions by how many commits they represent."""
  COMMIT_COUNT
}

"""Ordering options for commit contribution connections."""
input GitHubCommitContributionOrder {
  """The field by which to order commit contributions."""
  field: GitHubCommitContributionOrderField!

  """The ordering direction."""
  direction: GitHubOrderDirection!
}

"""Represents a user signing up for a GitHub account."""
type GitHubJoinedGitHubContribution implements GitHubContribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  
  """
  isRestricted: Boolean!

  """When this contribution was made."""
  occurredAt: GitHubDateTime!

  """The HTTP path for this contribution."""
  resourcePath: GitHubURI!

  """The HTTP URL for this contribution."""
  url: GitHubURI!

  """
  The user who made this contribution.
  
  """
  user: GitHubUser!
}

"""
Represents the contribution a user made by leaving a review on a pull request.
"""
type GitHubCreatedPullRequestReviewContribution implements GitHubContribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  
  """
  isRestricted: Boolean!

  """When this contribution was made."""
  occurredAt: GitHubDateTime!

  """The pull request the user reviewed."""
  pullRequest: GitHubPullRequest!

  """The review the user left on the pull request."""
  pullRequestReview: GitHubPullRequestReview!

  """The repository containing the pull request that the user reviewed."""
  repository: GitHubRepository!

  """The HTTP path for this contribution."""
  resourcePath: GitHubURI!

  """The HTTP URL for this contribution."""
  url: GitHubURI!

  """
  The user who made this contribution.
  
  """
  user: GitHubUser!
}

"""
Represents the contribution a user made on GitHub by creating a repository.
"""
type GitHubCreatedRepositoryContribution implements GitHubContribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  
  """
  isRestricted: Boolean!

  """When this contribution was made."""
  occurredAt: GitHubDateTime!

  """The repository that was created."""
  repository: GitHubRepository!

  """The HTTP path for this contribution."""
  resourcePath: GitHubURI!

  """The HTTP URL for this contribution."""
  url: GitHubURI!

  """
  The user who made this contribution.
  
  """
  user: GitHubUser!
}

"""
Represents either a repository the viewer can access or a restricted contribution.
"""
union GitHubCreatedRepositoryOrRestrictedContribution = GitHubCreatedRepositoryContribution | GitHubRestrictedContribution

"""
Represents the contribution a user made on GitHub by opening a pull request.
"""
type GitHubCreatedPullRequestContribution implements GitHubContribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  
  """
  isRestricted: Boolean!

  """When this contribution was made."""
  occurredAt: GitHubDateTime!

  """The pull request that was opened."""
  pullRequest: GitHubPullRequest!

  """The HTTP path for this contribution."""
  resourcePath: GitHubURI!

  """The HTTP URL for this contribution."""
  url: GitHubURI!

  """
  The user who made this contribution.
  
  """
  user: GitHubUser!
}

"""
Represents either a pull request the viewer can access or a restricted contribution.
"""
union GitHubCreatedPullRequestOrRestrictedContribution = GitHubCreatedPullRequestContribution | GitHubRestrictedContribution

"""Represents a private contribution a user made on GitHub."""
type GitHubRestrictedContribution implements GitHubContribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  
  """
  isRestricted: Boolean!

  """When this contribution was made."""
  occurredAt: GitHubDateTime!

  """The HTTP path for this contribution."""
  resourcePath: GitHubURI!

  """The HTTP URL for this contribution."""
  url: GitHubURI!

  """
  The user who made this contribution.
  
  """
  user: GitHubUser!
}

"""
Represents either a issue the viewer can access or a restricted contribution.
"""
union GitHubCreatedIssueOrRestrictedContribution = GitHubCreatedIssueContribution | GitHubRestrictedContribution

"""Represents the contribution a user made on GitHub by opening an issue."""
type GitHubCreatedIssueContribution implements GitHubContribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  
  """
  isRestricted: Boolean!

  """The issue that was opened."""
  issue: GitHubIssue!

  """When this contribution was made."""
  occurredAt: GitHubDateTime!

  """The HTTP path for this contribution."""
  resourcePath: GitHubURI!

  """The HTTP URL for this contribution."""
  url: GitHubURI!

  """
  The user who made this contribution.
  
  """
  user: GitHubUser!
}

"""
Represents a contribution a user made on GitHub, such as opening an issue.
"""
interface GitHubContribution {
  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  
  """
  isRestricted: Boolean!

  """When this contribution was made."""
  occurredAt: GitHubDateTime!

  """The HTTP path for this contribution."""
  resourcePath: GitHubURI!

  """The HTTP URL for this contribution."""
  url: GitHubURI!

  """
  The user who made this contribution.
  
  """
  user: GitHubUser!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type GitHubRepositoryContributorOneGraph {
  """The GitHub id of this contributor."""
  id: String!
  login: String!
  avatarUrl: String
  siteAdmin: Boolean!
  contributionCount: Int!
  user: GitHubUser
}

type GitHubRepositoryContributorConnection {
  """A list of contributors to a repository."""
  nodes: [GitHubRepositoryContributorOneGraph!]!

  """Pagination information for the result"""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type GitHubRepositoryVulnerabilityAlertEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubRepositoryVulnerabilityAlert
}

"""The connection type for RepositoryVulnerabilityAlert."""
type GitHubRepositoryVulnerabilityAlertConnection {
  """A list of edges."""
  edges: [GitHubRepositoryVulnerabilityAlertEdge]

  """A list of nodes."""
  nodes: [GitHubRepositoryVulnerabilityAlert]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

enum GitHubPullRequestMergeMethod {
  """
  Add all commits from the head branch to the base branch with a merge commit.
  """
  MERGE

  """
  Combine all commits from the head branch into a single commit in the base branch.
  """
  SQUASH

  """
  Add all commits from the head branch onto the base branch individually.
  """
  REBASE
}

"""An edge in a connection."""
type GitHubSubmoduleEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubSubmodule
}

"""The connection type for Submodule."""
type GitHubSubmoduleConnection {
  """A list of edges."""
  edges: [GitHubSubmoduleEdge]

  """A list of nodes."""
  nodes: [GitHubSubmodule]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Git SSH string"""
scalar GitHubGitSSHRemote

"""An edge in a connection."""
type GitHubRepositoryTopicEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubRepositoryTopic
}

"""The connection type for RepositoryTopic."""
type GitHubRepositoryTopicConnection {
  """A list of edges."""
  edges: [GitHubRepositoryTopicEdge]

  """A list of nodes."""
  nodes: [GitHubRepositoryTopic]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

enum GitHubReleaseOrderField {
  """Order releases by creation time"""
  CREATED_AT

  """Order releases alphabetically by name"""
  NAME
}

"""Ways in which lists of releases can be ordered upon return."""
input GitHubReleaseOrder {
  """The field in which to order releases by."""
  field: GitHubReleaseOrderField!

  """The direction in which to order releases by the specified field."""
  direction: GitHubOrderDirection!
}

"""An edge in a connection."""
type GitHubReleaseEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubRelease
}

"""The connection type for Release."""
type GitHubReleaseConnection {
  """A list of edges."""
  edges: [GitHubReleaseEdge]

  """A list of nodes."""
  nodes: [GitHubRelease]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

enum GitHubRefOrderField {
  """Order refs by underlying commit date if the ref prefix is refs/tags/"""
  TAG_COMMIT_DATE

  """Order refs by their alphanumeric name"""
  ALPHABETICAL
}

"""Ways in which lists of git refs can be ordered upon return."""
input GitHubRefOrder {
  """The field in which to order refs by."""
  field: GitHubRefOrderField!

  """The direction in which to order refs by the specified field."""
  direction: GitHubOrderDirection!
}

"""A Pinned Issue is a issue pinned to a repository's index page."""
type GitHubPinnedIssue implements OneGraphNode & GitHubNode {
  """Identifies the primary key from the database."""
  databaseId: Int

  """"""
  id: ID!

  """The issue that was pinned."""
  issue: GitHubIssue!

  """The actor that pinned this issue."""
  pinnedBy: GitHubActor!

  """The repository that this issue was pinned to."""
  repository: GitHubRepository!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An edge in a connection."""
type GitHubPinnedIssueEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubPinnedIssue
}

"""The connection type for PinnedIssue."""
type GitHubPinnedIssueConnection {
  """A list of edges."""
  edges: [GitHubPinnedIssueEdge]

  """A list of nodes."""
  nodes: [GitHubPinnedIssue]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type GitHubPinnedDiscussionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubPinnedDiscussion
}

"""The connection type for PinnedDiscussion."""
type GitHubPinnedDiscussionConnection {
  """A list of edges."""
  edges: [GitHubPinnedDiscussionEdge]

  """A list of nodes."""
  nodes: [GitHubPinnedDiscussion]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

enum GitHubMilestoneOrderField {
  """Order milestones by when they are due."""
  DUE_DATE

  """Order milestones by when they were created."""
  CREATED_AT

  """Order milestones by when they were last updated."""
  UPDATED_AT

  """Order milestones by their number."""
  NUMBER
}

"""Ordering options for milestone connections."""
input GitHubMilestoneOrder {
  """The field to order milestones by."""
  field: GitHubMilestoneOrderField!

  """The ordering direction."""
  direction: GitHubOrderDirection!
}

"""An edge in a connection."""
type GitHubMilestoneEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubMilestone
}

"""The connection type for Milestone."""
type GitHubMilestoneConnection {
  """A list of edges."""
  edges: [GitHubMilestoneEdge]

  """A list of nodes."""
  nodes: [GitHubMilestone]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

enum GitHubRepositoryLockReason {
  """The repository is locked due to a move."""
  MOVING

  """The repository is locked due to a billing related reason."""
  BILLING

  """The repository is locked due to a rename."""
  RENAME

  """The repository is locked due to a migration."""
  MIGRATING
}

"""Describes a License's conditions, permissions, and limitations"""
type GitHubLicenseRule {
  """A description of the rule"""
  description: String!

  """The machine-readable rule key"""
  key: String!

  """The human-readable rule label"""
  label: String!
}

"""A repository's open source license"""
type GitHubLicense implements OneGraphNode & GitHubNode {
  """The full text of the license"""
  body: String!

  """The conditions set by the license"""
  conditions: [GitHubLicenseRule]!

  """A human-readable description of the license"""
  description: String

  """Whether the license should be featured"""
  featured: Boolean!

  """Whether the license should be displayed in license pickers"""
  hidden: Boolean!

  """"""
  id: ID!

  """Instructions on how to implement the license"""
  implementation: String

  """The lowercased SPDX ID of the license"""
  key: String!

  """The limitations set by the license"""
  limitations: [GitHubLicenseRule]!

  """The license full name specified by <https://spdx.org/licenses>"""
  name: String!

  """Customary short name if applicable (e.g, GPLv3)"""
  nickname: String

  """The permissions set by the license"""
  permissions: [GitHubLicenseRule]!

  """
  Whether the license is a pseudo-license placeholder (e.g., other, no-license)
  """
  pseudoLicense: Boolean!

  """Short identifier specified by <https://spdx.org/licenses>"""
  spdxId: String

  """URL to the license on <https://choosealicense.com>"""
  url: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

enum GitHubLanguageOrderField {
  """Order languages by the size of all files containing the language"""
  SIZE
}

"""Ordering options for language connections."""
input GitHubLanguageOrder {
  """The field to order languages by."""
  field: GitHubLanguageOrderField!

  """The ordering direction."""
  direction: GitHubOrderDirection!
}

"""Represents the language of a repository."""
type GitHubLanguageEdge {
  """"""
  cursor: String!

  """"""
  node: GitHubLanguage!

  """The number of bytes of code written in the language."""
  size: Int!
}

"""A list of languages associated with the parent."""
type GitHubLanguageConnection {
  """A list of edges."""
  edges: [GitHubLanguageEdge]

  """A list of nodes."""
  nodes: [GitHubLanguage]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!

  """The total size in bytes of files written in that language."""
  totalSize: Int!
}

"""A repository issue template."""
type GitHubIssueTemplate {
  """The template purpose."""
  about: String

  """The suggested issue body."""
  body: String

  """The template name."""
  name: String!

  """The suggested issue title."""
  title: String
}

enum GitHubFundingPlatform {
  """GitHub funding platform."""
  GITHUB

  """Patreon funding platform."""
  PATREON

  """Open Collective funding platform."""
  OPEN_COLLECTIVE

  """Ko-fi funding platform."""
  KO_FI

  """Tidelift funding platform."""
  TIDELIFT

  """Community Bridge funding platform."""
  COMMUNITY_BRIDGE

  """Liberapay funding platform."""
  LIBERAPAY

  """IssueHunt funding platform."""
  ISSUEHUNT

  """Otechie funding platform."""
  OTECHIE

  """Custom funding platform."""
  CUSTOM
}

"""A funding platform link for a repository."""
type GitHubFundingLink {
  """The funding platform this link is for."""
  platform: GitHubFundingPlatform!

  """The configured URL for this funding link."""
  url: GitHubURI!
}

"""An edge in a connection."""
type GitHubDiscussionCategoryEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubDiscussionCategory
}

"""The connection type for DiscussionCategory."""
type GitHubDiscussionCategoryConnection {
  """A list of edges."""
  edges: [GitHubDiscussionCategoryEdge]

  """A list of nodes."""
  nodes: [GitHubDiscussionCategory]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

enum GitHubDeploymentOrderField {
  """Order collection by creation time"""
  CREATED_AT
}

"""Ordering options for deployment connections"""
input GitHubDeploymentOrder {
  """The field to order deployments by."""
  field: GitHubDeploymentOrderField!

  """The ordering direction."""
  direction: GitHubOrderDirection!
}

"""An edge in a connection."""
type GitHubDeploymentEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubDeployment
}

"""The connection type for Deployment."""
type GitHubDeploymentConnection {
  """A list of edges."""
  edges: [GitHubDeploymentEdge]

  """A list of nodes."""
  nodes: [GitHubDeployment]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A repository deploy key."""
type GitHubDeployKey implements OneGraphNode & GitHubNode {
  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """"""
  id: ID!

  """The deploy key."""
  key: String!

  """Whether or not the deploy key is read only."""
  readOnly: Boolean!

  """The deploy key title."""
  title: String!

  """Whether or not the deploy key has been verified."""
  verified: Boolean!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An edge in a connection."""
type GitHubDeployKeyEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubDeployKey
}

"""The connection type for DeployKey."""
type GitHubDeployKeyConnection {
  """A list of edges."""
  edges: [GitHubDeployKeyEdge]

  """A list of nodes."""
  nodes: [GitHubDeployKey]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A repository contact link."""
type GitHubRepositoryContactLink {
  """The contact link purpose."""
  about: String!

  """The contact link name."""
  name: String!

  """The contact link URL."""
  url: GitHubURI!
}

enum GitHubCollaboratorAffiliation {
  """All outside collaborators of an organization-owned subject."""
  OUTSIDE

  """
  All collaborators with permissions to an organization-owned subject, regardless of organization membership status.
  """
  DIRECT

  """All collaborators the authenticated user can see."""
  ALL
}

"""Entities that can be sponsored via GitHub Sponsors"""
union GitHubSponsorableItem = GitHubOrganization | GitHubUser

"""Represents an author of discussion comments in repositories."""
interface GitHubRepositoryDiscussionCommentAuthor {
  """Discussion comments this user has authored."""
  repositoryDiscussionComments(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filter discussion comments to only those in a specific repository."""
    repositoryId: ID

    """
    Filter discussion comments to only those that were marked as the answer
    """
    onlyAnswers: Boolean = false
  ): GitHubDiscussionCommentConnection!
}

"""Represents an author of discussions in repositories."""
interface GitHubRepositoryDiscussionAuthor {
  """Discussions this user has started."""
  repositoryDiscussions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for discussions returned from the connection."""
    orderBy: GitHubDiscussionOrder = {field: CREATED_AT, direction: DESC}

    """Filter discussions to only those in a specific repository."""
    repositoryId: ID

    """
    Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions.
    """
    answered: Boolean
  ): GitHubDiscussionConnection!
}

"""Represents any entity on GitHub that has a profile page."""
interface GitHubProfileOwner {
  """
  Determine if this repository owner has any items that can be pinned to their profile.
  """
  anyPinnableItems(
    """Filter to only a particular kind of pinnable item."""
    type: GitHubPinnableItemType
  ): Boolean!

  """The public profile email."""
  email: String

  """"""
  id: ID!

  """
  Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity.
  """
  itemShowcase: GitHubProfileItemShowcase!

  """The public profile location."""
  location: String

  """The username used to login."""
  login: String!

  """The public profile name."""
  name: String

  """
  A list of repositories and gists this profile owner can pin to their profile.
  """
  pinnableItems(
    """Filter the types of pinnable items that are returned."""
    types: [GitHubPinnableItemType!]

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubPinnableItemConnection!

  """
  A list of repositories and gists this profile owner has pinned to their profile
  """
  pinnedItems(
    """Filter the types of pinned items that are returned."""
    types: [GitHubPinnableItemType!]

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubPinnableItemConnection!

  """
  Returns how many more items this profile owner can pin to their profile.
  """
  pinnedItemsRemaining: Int!

  """Can the viewer pin repositories and gists to the profile?"""
  viewerCanChangePinnedItems: Boolean!

  """The public profile website URL."""
  websiteUrl: GitHubURI
}

"""Types that can grant permissions on a repository to a user"""
union GitHubPermissionGranter = GitHubOrganization | GitHubRepository | GitHubTeam

"""Represents an owner of a package."""
interface GitHubPackageOwner {
  """"""
  id: ID!

  """A list of packages under the owner."""
  packages(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Find packages by their names."""
    names: [String]

    """Find packages in a repository by ID."""
    repositoryId: ID

    """Filter registry package by type."""
    packageType: GitHubPackageType

    """Ordering of the returned packages."""
    orderBy: GitHubPackageOrder = {field: CREATED_AT, direction: DESC}
  ): GitHubPackageConnection!
}

"""Entities that have members who can set status messages."""
interface GitHubMemberStatusable {
  """
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  """
  memberStatuses(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for user statuses returned from the connection."""
    orderBy: GitHubUserStatusOrder = {field: UPDATED_AT, direction: DESC}
  ): GitHubUserStatusConnection!
}

enum GitHubTeamPrivacy {
  """A secret team can only be seen by its members."""
  SECRET

  """
  A visible team can be seen and @mentioned by every member of the organization.
  """
  VISIBLE
}

enum GitHubTeamRole {
  """User has admin rights on the team."""
  ADMIN

  """User is a member of the team."""
  MEMBER
}

enum GitHubSponsorsTierOrderField {
  """Order tiers by creation time."""
  CREATED_AT

  """Order tiers by their monthly price in cents"""
  MONTHLY_PRICE_IN_CENTS
}

"""Ordering options for Sponsors tiers connections."""
input GitHubSponsorsTierOrder {
  """The field to order tiers by."""
  field: GitHubSponsorsTierOrderField!

  """The ordering direction."""
  direction: GitHubOrderDirection!
}

enum GitHubSponsorshipOrderField {
  """Order sponsorship by creation time."""
  CREATED_AT
}

"""Ordering options for sponsorship connections."""
input GitHubSponsorshipOrder {
  """The field to order sponsorship by."""
  field: GitHubSponsorshipOrderField!

  """The ordering direction."""
  direction: GitHubOrderDirection!
}

"""Entities that can be sponsored through GitHub Sponsors"""
interface GitHubSponsorable {
  """True if this user/organization has a GitHub Sponsors listing."""
  hasSponsorsListing: Boolean!

  """Check if the given account is sponsoring this user/organization."""
  isSponsoredBy(
    """The target account's login."""
    accountLogin: String!
  ): Boolean!

  """True if the viewer is sponsored by this user/organization."""
  isSponsoringViewer: Boolean!

  """The GitHub Sponsors listing for this user or organization."""
  sponsorsListing: GitHubSponsorsListing

  """The viewer's sponsorship of this entity."""
  sponsorshipForViewerAsSponsor: GitHubSponsorship

  """This object's sponsorships as the maintainer."""
  sponsorshipsAsMaintainer(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Whether or not to include private sponsorships in the result set"""
    includePrivate: Boolean = false

    """
    Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: GitHubSponsorshipOrder
  ): GitHubSponsorshipConnection!

  """This object's sponsorships as the sponsor."""
  sponsorshipsAsSponsor(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: GitHubSponsorshipOrder
  ): GitHubSponsorshipConnection!

  """Whether or not the viewer is able to sponsor this user/organization."""
  viewerCanSponsor: Boolean!

  """True if the viewer is sponsoring this user/organization."""
  viewerIsSponsoring: Boolean!
}

"""Entities that can sponsor others via GitHub Sponsors"""
union GitHubSponsor = GitHubOrganization | GitHubUser

enum GitHubSponsorshipPrivacy {
  """Public"""
  PUBLIC

  """Private"""
  PRIVATE
}

"""A sponsorship relationship between a sponsor and a maintainer"""
type GitHubSponsorship implements OneGraphNode & GitHubNode {
  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """"""
  id: ID!

  """
  Whether this sponsorship represents a one-time payment versus a recurring sponsorship.
  """
  isOneTimePayment: Boolean!

  """The entity that is being sponsored"""
  maintainer: GitHubUser! @deprecated(reason: "`Sponsorship.maintainer` will be removed. Use `Sponsorship.sponsorable` instead. Removal on 2020-04-01 UTC.")

  """The privacy level for this sponsorship."""
  privacyLevel: GitHubSponsorshipPrivacy!

  """
  The user that is sponsoring. Returns null if the sponsorship is private or if sponsor is not a user.
  """
  sponsor: GitHubUser @deprecated(reason: "`Sponsorship.sponsor` will be removed. Use `Sponsorship.sponsorEntity` instead. Removal on 2020-10-01 UTC.")

  """
  The user or organization that is sponsoring, if you have permission to view them.
  """
  sponsorEntity: GitHubSponsor

  """The entity that is being sponsored"""
  sponsorable: GitHubSponsorable!

  """The associated sponsorship tier"""
  tier: GitHubSponsorsTier

  """
  Identifies the date and time when the current tier was chosen for this sponsorship.
  """
  tierSelectedAt: GitHubDateTime
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An edge in a connection."""
type GitHubSponsorshipEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubSponsorship
}

"""The connection type for Sponsorship."""
type GitHubSponsorshipConnection {
  """A list of edges."""
  edges: [GitHubSponsorshipEdge]

  """A list of nodes."""
  nodes: [GitHubSponsorship]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""
SponsorsTier information only visible to users that can administer the associated Sponsors listing.
"""
type GitHubSponsorsTierAdminInfo {
  """The sponsorships associated with this tier."""
  sponsorships(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Whether or not to include private sponsorships in the result set"""
    includePrivate: Boolean = false

    """
    Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: GitHubSponsorshipOrder
  ): GitHubSponsorshipConnection!
}

"""A GitHub Sponsors tier associated with a GitHub Sponsors listing."""
type GitHubSponsorsTier implements OneGraphNode & GitHubNode {
  """
  SponsorsTier information only visible to users that can administer the associated Sponsors listing.
  """
  adminInfo: GitHubSponsorsTierAdminInfo

  """
  Get a different tier for this tier's maintainer that is at the same frequency as this tier but with a lesser cost. Returns the published tier with the monthly price closest to this tier's without going over.
  """
  closestLesserValueTier: GitHubSponsorsTier

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """The description of the tier."""
  description: String!

  """The tier description rendered to HTML"""
  descriptionHTML: GitHubHTML!

  """"""
  id: ID!

  """
  Whether this tier was chosen at checkout time by the sponsor rather than defined ahead of time by the maintainer who manages the Sponsors listing.
  """
  isCustomAmount: Boolean!

  """Whether this tier is only for use with one-time sponsorships."""
  isOneTime: Boolean!

  """How much this tier costs per month in cents."""
  monthlyPriceInCents: Int!

  """How much this tier costs per month in dollars."""
  monthlyPriceInDollars: Int!

  """The name of the tier."""
  name: String!

  """The sponsors listing that this tier belongs to."""
  sponsorsListing: GitHubSponsorsListing!

  """Identifies the date and time when the object was last updated."""
  updatedAt: GitHubDateTime!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An edge in a connection."""
type GitHubSponsorsTierEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubSponsorsTier
}

"""The connection type for SponsorsTier."""
type GitHubSponsorsTierConnection {
  """A list of edges."""
  edges: [GitHubSponsorsTierEdge]

  """A list of nodes."""
  nodes: [GitHubSponsorsTier]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

enum GitHubSponsorsGoalKind {
  """The goal is about reaching a certain number of sponsors."""
  TOTAL_SPONSORS_COUNT

  """
  The goal is about getting a certain dollar amount from sponsorships each month.
  """
  MONTHLY_SPONSORSHIP_AMOUNT
}

"""
A goal associated with a GitHub Sponsors listing, representing a target the sponsored maintainer would like to attain.
"""
type GitHubSponsorsGoal {
  """A description of the goal from the maintainer."""
  description: String

  """What the objective of this goal is."""
  kind: GitHubSponsorsGoalKind!

  """The percentage representing how complete this goal is, between 0-100."""
  percentComplete: Int!

  """
  What the goal amount is. Represents a dollar amount for monthly sponsorship amount goals. Represents a count of unique sponsors for total sponsors count goals.
  """
  targetValue: Int!

  """A brief summary of the kind and target value of this goal."""
  title: String!
}

"""A GitHub Sponsors listing."""
type GitHubSponsorsListing implements OneGraphNode & GitHubNode {
  """
  The current goal the maintainer is trying to reach with GitHub Sponsors, if any.
  """
  activeGoal: GitHubSponsorsGoal

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """The full description of the listing."""
  fullDescription: String!

  """The full description of the listing rendered to HTML."""
  fullDescriptionHTML: GitHubHTML!

  """"""
  id: ID!

  """The listing's full name."""
  name: String!

  """The short description of the listing."""
  shortDescription: String!

  """The short name of the listing."""
  slug: String!

  """The published tiers for this GitHub Sponsors listing."""
  tiers(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Sponsors tiers returned from the connection."""
    orderBy: GitHubSponsorsTierOrder = {field: MONTHLY_PRICE_IN_CENTS, direction: ASC}
  ): GitHubSponsorsTierConnection
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""
An Identity Provider configured to provision SAML and SCIM identities for Organizations
"""
type GitHubOrganizationIdentityProvider implements OneGraphNode & GitHubNode {
  """
  The digest algorithm used to sign SAML requests for the Identity Provider.
  """
  digestMethod: GitHubURI

  """External Identities provisioned by this Identity Provider"""
  externalIdentities(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubExternalIdentityConnection!

  """"""
  id: ID!

  """
  The x509 certificate used by the Identity Provider to sign assertions and responses.
  """
  idpCertificate: GitHubX509Certificate

  """The Issuer Entity ID for the SAML Identity Provider"""
  issuer: String

  """Organization this Identity Provider belongs to"""
  organization: GitHubOrganization

  """
  The signature algorithm used to sign SAML requests for the Identity Provider.
  """
  signatureMethod: GitHubURI

  """The URL endpoint for the Identity Provider's SAML SSO."""
  ssoUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

enum GitHubDiscussionOrderField {
  """Order discussions by creation time."""
  CREATED_AT

  """Order discussions by most recent modification time."""
  UPDATED_AT
}

"""Ways in which lists of discussions can be ordered upon return."""
input GitHubDiscussionOrder {
  """The field by which to order discussions."""
  field: GitHubDiscussionOrderField!

  """The direction in which to order discussions by the specified field."""
  direction: GitHubOrderDirection!
}

"""An edge in a connection."""
type GitHubDiscussionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubDiscussion
}

"""The connection type for Discussion."""
type GitHubDiscussionConnection {
  """A list of edges."""
  edges: [GitHubDiscussionEdge]

  """A list of nodes."""
  nodes: [GitHubDiscussion]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

enum GitHubRepositoryPrivacy {
  """Public"""
  PUBLIC

  """Private"""
  PRIVATE
}

enum GitHubRepositoryAffiliation {
  """Repositories that are owned by the authenticated user."""
  OWNER

  """Repositories that the user has been added to as a collaborator."""
  COLLABORATOR

  """
  Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.
  """
  ORGANIZATION_MEMBER
}

"""An edge in a connection."""
type GitHubRepositoryEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubRepository
}

"""A list of repositories owned by the subject."""
type GitHubRepositoryConnection {
  """A list of edges."""
  edges: [GitHubRepositoryEdge]

  """A list of nodes."""
  nodes: [GitHubRepository]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!

  """The total size in kilobytes of all repositories in the connection."""
  totalDiskUsage: Int!
}

enum GitHubProjectOrderField {
  """Order projects by creation time"""
  CREATED_AT

  """Order projects by update time"""
  UPDATED_AT

  """Order projects by name"""
  NAME
}

"""Ways in which lists of projects can be ordered upon return."""
input GitHubProjectOrder {
  """The field in which to order projects by."""
  field: GitHubProjectOrderField!

  """The direction in which to order projects by the specified field."""
  direction: GitHubOrderDirection!
}

"""An edge in a connection."""
type GitHubProjectEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubProject
}

"""A list of projects associated with the owner."""
type GitHubProjectConnection {
  """A list of edges."""
  edges: [GitHubProjectEdge]

  """A list of nodes."""
  nodes: [GitHubProject]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

enum GitHubPackageOrderField {
  """Order packages by creation time"""
  CREATED_AT
}

"""Ways in which lists of packages can be ordered upon return."""
input GitHubPackageOrder {
  """The field in which to order packages by."""
  field: GitHubPackageOrderField

  """The direction in which to order packages by the specified field."""
  direction: GitHubOrderDirection
}

enum GitHubPackageVersionOrderField {
  """Order package versions by creation time"""
  CREATED_AT
}

"""Ways in which lists of package versions can be ordered upon return."""
input GitHubPackageVersionOrder {
  """The field in which to order package versions by."""
  field: GitHubPackageVersionOrderField

  """
  The direction in which to order package versions by the specified field.
  """
  direction: GitHubOrderDirection
}

"""An edge in a connection."""
type GitHubPackageVersionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubPackageVersion
}

"""The connection type for PackageVersion."""
type GitHubPackageVersionConnection {
  """A list of edges."""
  edges: [GitHubPackageVersionEdge]

  """A list of nodes."""
  nodes: [GitHubPackageVersion]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""
Represents a object that contains package activity statistics such as downloads.
"""
type GitHubPackageStatistics {
  """Number of times the package was downloaded since it was created."""
  downloadsTotalCount: Int!
}

enum GitHubPackageType {
  """An npm package."""
  NPM

  """A rubygems package."""
  RUBYGEMS

  """A maven package."""
  MAVEN

  """A docker image."""
  DOCKER

  """A debian package."""
  DEBIAN

  """A nuget package."""
  NUGET

  """A python package."""
  PYPI
}

"""
Represents a object that contains package version activity statistics such as downloads.
"""
type GitHubPackageVersionStatistics {
  """Number of times the package was downloaded since it was created."""
  downloadsTotalCount: Int!
}

enum GitHubPackageFileOrderField {
  """Order package files by creation time"""
  CREATED_AT
}

"""Ways in which lists of package files can be ordered upon return."""
input GitHubPackageFileOrder {
  """The field in which to order package files by."""
  field: GitHubPackageFileOrderField

  """The direction in which to order package files by the specified field."""
  direction: GitHubOrderDirection
}

"""A file in a package version."""
type GitHubPackageFile implements OneGraphNode & GitHubNode {
  """"""
  id: ID!

  """MD5 hash of the file."""
  md5: String

  """Name of the file."""
  name: String!

  """The package version this file belongs to."""
  packageVersion: GitHubPackageVersion

  """SHA1 hash of the file."""
  sha1: String

  """SHA256 hash of the file."""
  sha256: String

  """Size of the file in bytes."""
  size: Int

  """Identifies the date and time when the object was last updated."""
  updatedAt: GitHubDateTime!

  """URL to download the asset."""
  url: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An edge in a connection."""
type GitHubPackageFileEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubPackageFile
}

"""The connection type for PackageFile."""
type GitHubPackageFileConnection {
  """A list of edges."""
  edges: [GitHubPackageFileEdge]

  """A list of nodes."""
  nodes: [GitHubPackageFile]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Information about a specific package version."""
type GitHubPackageVersion implements OneGraphNode & GitHubNode {
  """List of files associated with this package version"""
  files(
    """Ordering of the returned package files."""
    orderBy: GitHubPackageFileOrder = {field: CREATED_AT, direction: ASC}

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubPackageFileConnection!

  """"""
  id: ID!

  """The package associated with this version."""
  package: GitHubPackage

  """The platform this version was built for."""
  platform: String

  """Whether or not this version is a pre-release."""
  preRelease: Boolean!

  """The README of this package version."""
  readme: String

  """The release associated with this package version."""
  release: GitHubRelease

  """Statistics about package activity."""
  statistics: GitHubPackageVersionStatistics

  """The package version summary."""
  summary: String

  """The version string."""
  version: String!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Information for an uploaded package."""
type GitHubPackage implements OneGraphNode & GitHubNode {
  """"""
  id: ID!

  """Find the latest version for the package."""
  latestVersion: GitHubPackageVersion

  """Identifies the name of the package."""
  name: String!

  """Identifies the type of the package."""
  packageType: GitHubPackageType!

  """The repository this package belongs to."""
  repository: GitHubRepository

  """Statistics about package activity."""
  statistics: GitHubPackageStatistics

  """Find package version by version string."""
  version(
    """The package version."""
    version: String!
  ): GitHubPackageVersion

  """list of versions for this package"""
  versions(
    """Ordering of the returned packages."""
    orderBy: GitHubPackageVersionOrder = {field: CREATED_AT, direction: DESC}

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubPackageVersionConnection!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An edge in a connection."""
type GitHubPackageEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubPackage
}

"""The connection type for Package."""
type GitHubPackageConnection {
  """A list of edges."""
  edges: [GitHubPackageEdge]

  """A list of nodes."""
  nodes: [GitHubPackage]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

enum GitHubOrganizationMemberRole {
  """The user is a member of the organization."""
  MEMBER

  """The user is an administrator of the organization."""
  ADMIN
}

"""Represents a user within an organization."""
type GitHubOrganizationMemberEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """
  Whether the organization member has two factor enabled or not. Returns null if information is not available to viewer.
  """
  hasTwoFactorEnabled: Boolean

  """The item at the end of the edge."""
  node: GitHubUser

  """The role this user has in the organization."""
  role: GitHubOrganizationMemberRole
}

"""The connection type for User."""
type GitHubOrganizationMemberConnection {
  """A list of edges."""
  edges: [GitHubOrganizationMemberEdge]

  """A list of nodes."""
  nodes: [GitHubUser]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

enum GitHubUserStatusOrderField {
  """Order user statuses by when they were updated."""
  UPDATED_AT
}

"""Ordering options for user status connections."""
input GitHubUserStatusOrder {
  """The field to order user statuses by."""
  field: GitHubUserStatusOrderField!

  """The ordering direction."""
  direction: GitHubOrderDirection!
}

"""The user's description of what they're currently doing."""
type GitHubUserStatus implements OneGraphNode & GitHubNode {
  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """An emoji summarizing the user's status."""
  emoji: String

  """The status emoji as HTML."""
  emojiHTML: GitHubHTML

  """If set, the status will not be shown after this date."""
  expiresAt: GitHubDateTime

  """ID of the object."""
  id: ID!

  """
  Whether this status indicates the user is not fully available on GitHub.
  """
  indicatesLimitedAvailability: Boolean!

  """A brief message describing what the user is doing."""
  message: String

  """
  The organization whose members can see this status. If null, this status is publicly visible.
  """
  organization: GitHubOrganization

  """Identifies the date and time when the object was last updated."""
  updatedAt: GitHubDateTime!

  """The user who has this status."""
  user: GitHubUser!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An edge in a connection."""
type GitHubUserStatusEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubUserStatus
}

"""The connection type for UserStatus."""
type GitHubUserStatusConnection {
  """A list of edges."""
  edges: [GitHubUserStatusEdge]

  """A list of nodes."""
  nodes: [GitHubUserStatus]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type GitHubPinnableItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubPinnableItem
}

"""The connection type for PinnableItem."""
type GitHubPinnableItemConnection {
  """A list of edges."""
  edges: [GitHubPinnableItemEdge]

  """A list of nodes."""
  nodes: [GitHubPinnableItem]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""
A curatable list of repositories relating to a repository owner, which defaults to showing the most popular repositories they own.
"""
type GitHubProfileItemShowcase {
  """Whether or not the owner has pinned any repositories or gists."""
  hasPinnedItems: Boolean!

  """
  The repositories and gists in the showcase. If the profile owner has any pinned items, those will be returned. Otherwise, the profile owner's popular repositories will be returned.
  """
  items(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubPinnableItemConnection!
}

enum GitHubRepositoryInteractionLimitOrigin {
  """A limit that is configured at the repository level."""
  REPOSITORY

  """A limit that is configured at the organization level."""
  ORGANIZATION

  """A limit that is configured at the user-wide level."""
  USER
}

enum GitHubRepositoryInteractionLimit {
  """
  Users that have recently created their account will be unable to interact with the repository.
  """
  EXISTING_USERS

  """
  Users that have not previously committed to a repository’s default branch will be unable to interact with the repository.
  """
  CONTRIBUTORS_ONLY

  """
  Users that are not collaborators will not be able to interact with the repository.
  """
  COLLABORATORS_ONLY

  """No interaction limits are enabled."""
  NO_LIMIT
}

"""Repository interaction limit that applies to this object."""
type GitHubRepositoryInteractionAbility {
  """The time the currently active limit expires."""
  expiresAt: GitHubDateTime

  """The current limit that is enabled on this object."""
  limit: GitHubRepositoryInteractionLimit!

  """The origin of the currently active interaction limit."""
  origin: GitHubRepositoryInteractionLimitOrigin!
}

"""An edge in a connection."""
type GitHubEnterpriseUserAccountEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubEnterpriseUserAccount
}

"""The connection type for EnterpriseUserAccount."""
type GitHubEnterpriseUserAccountConnection {
  """A list of edges."""
  edges: [GitHubEnterpriseUserAccountEdge]

  """A list of nodes."""
  nodes: [GitHubEnterpriseUserAccount]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

enum GitHubEnterpriseEnabledSettingValue {
  """The setting is enabled for organizations in the enterprise."""
  ENABLED

  """There is no policy set for organizations in the enterprise."""
  NO_POLICY
}

enum GitHubIdentityProviderConfigurationState {
  """Authentication with an identity provider is configured and enforced."""
  ENFORCED

  """
  Authentication with an identity provider is configured but not enforced.
  """
  CONFIGURED

  """Authentication with an identity provider is not configured."""
  UNCONFIGURED
}

enum GitHubSamlSignatureAlgorithm {
  """RSA-SHA1"""
  RSA_SHA1

  """RSA-SHA256"""
  RSA_SHA256

  """RSA-SHA384"""
  RSA_SHA384

  """RSA-SHA512"""
  RSA_SHA512
}

"""A valid x509 certificate string"""
scalar GitHubX509Certificate

"""SCIM attributes for the External Identity"""
type GitHubExternalIdentityScimAttributes {
  """The emails associated with the SCIM identity"""
  emails: [GitHubUserEmailMetadata!]

  """Family name of the SCIM identity"""
  familyName: String

  """Given name of the SCIM identity"""
  givenName: String

  """The groups linked to this identity in IDP"""
  groups: [String!]

  """The userName of the SCIM identity"""
  username: String
}

"""Email attributes from External Identity"""
type GitHubUserEmailMetadata {
  """Boolean to identify primary emails"""
  primary: Boolean

  """Type of email"""
  type: String

  """Email id"""
  value: String!
}

"""SAML attributes for the External Identity"""
type GitHubExternalIdentitySamlAttributes {
  """The emails associated with the SAML identity"""
  emails: [GitHubUserEmailMetadata!]

  """Family name of the SAML identity"""
  familyName: String

  """Given name of the SAML identity"""
  givenName: String

  """The groups linked to this identity in IDP"""
  groups: [String!]

  """The NameID of the SAML identity"""
  nameId: String

  """The userName of the SAML identity"""
  username: String
}

"""An external identity provisioned by SAML SSO or SCIM."""
type GitHubExternalIdentity implements OneGraphNode & GitHubNode {
  """The GUID for this identity"""
  guid: String!

  """"""
  id: ID!

  """Organization invitation for this SCIM-provisioned external identity"""
  organizationInvitation: GitHubOrganizationInvitation

  """SAML Identity attributes"""
  samlIdentity: GitHubExternalIdentitySamlAttributes

  """SCIM Identity attributes"""
  scimIdentity: GitHubExternalIdentityScimAttributes

  """
  User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member.
  """
  user: GitHubUser
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An edge in a connection."""
type GitHubExternalIdentityEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubExternalIdentity
}

"""The connection type for ExternalIdentity."""
type GitHubExternalIdentityConnection {
  """A list of edges."""
  edges: [GitHubExternalIdentityEdge]

  """A list of nodes."""
  nodes: [GitHubExternalIdentity]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

enum GitHubSamlDigestAlgorithm {
  """SHA1"""
  SHA1

  """SHA256"""
  SHA256

  """SHA384"""
  SHA384

  """SHA512"""
  SHA512
}

"""
An identity provider configured to provision identities for an enterprise.
"""
type GitHubEnterpriseIdentityProvider implements OneGraphNode & GitHubNode {
  """
  The digest algorithm used to sign SAML requests for the identity provider.
  """
  digestMethod: GitHubSamlDigestAlgorithm

  """The enterprise this identity provider belongs to."""
  enterprise: GitHubEnterprise

  """ExternalIdentities provisioned by this identity provider."""
  externalIdentities(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubExternalIdentityConnection!

  """"""
  id: ID!

  """
  The x509 certificate used by the identity provider to sign assertions and responses.
  """
  idpCertificate: GitHubX509Certificate

  """The Issuer Entity ID for the SAML identity provider."""
  issuer: String

  """
  Recovery codes that can be used by admins to access the enterprise if the identity provider is unavailable.
  """
  recoveryCodes: [String!]

  """
  The signature algorithm used to sign SAML requests for the identity provider.
  """
  signatureMethod: GitHubSamlSignatureAlgorithm

  """The URL endpoint for the identity provider's SAML SSO."""
  ssoUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An invitation to be a member in an enterprise organization."""
type GitHubEnterprisePendingMemberInvitationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """Whether the invitation has a license for the enterprise."""
  isUnlicensed: Boolean! @deprecated(reason: "All pending members consume a license Removal on 2020-07-01 UTC.")

  """The item at the end of the edge."""
  node: GitHubOrganizationInvitation
}

"""The connection type for OrganizationInvitation."""
type GitHubEnterprisePendingMemberInvitationConnection {
  """A list of edges."""
  edges: [GitHubEnterprisePendingMemberInvitationEdge]

  """A list of nodes."""
  nodes: [GitHubOrganizationInvitation]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!

  """Identifies the total count of unique users in the connection."""
  totalUniqueUserCount: Int!
}

"""
A user with an invitation to be a collaborator on a repository owned by an organization in an enterprise.
"""
type GitHubEnterprisePendingCollaboratorEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """
  Whether the invited collaborator does not have a license for the enterprise.
  """
  isUnlicensed: Boolean! @deprecated(reason: "All pending collaborators consume a license Removal on 2021-01-01 UTC.")

  """The item at the end of the edge."""
  node: GitHubUser

  """The enterprise organization repositories this user is a member of."""
  repositories(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for repositories."""
    orderBy: GitHubRepositoryOrder = {field: NAME, direction: ASC}
  ): GitHubEnterpriseRepositoryInfoConnection!
}

"""The connection type for User."""
type GitHubEnterprisePendingCollaboratorConnection {
  """A list of edges."""
  edges: [GitHubEnterprisePendingCollaboratorEdge]

  """A list of nodes."""
  nodes: [GitHubUser]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

enum GitHubRepositoryInvitationOrderField {
  """Order repository invitations by creation time"""
  CREATED_AT

  """Order repository invitations by invitee login"""
  INVITEE_LOGIN @deprecated(reason: "`INVITEE_LOGIN` is no longer a valid field value. Repository invitations can now be associated with an email, not only an invitee. Removal on 2020-10-01 UTC.")
}

"""Ordering options for repository invitation connections."""
input GitHubRepositoryInvitationOrder {
  """The field to order repository invitations by."""
  field: GitHubRepositoryInvitationOrderField!

  """The ordering direction."""
  direction: GitHubOrderDirection!
}

"""A subset of repository info."""
interface GitHubRepositoryInfo {
  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """The description of the repository."""
  description: String

  """The description of the repository rendered to HTML."""
  descriptionHTML: GitHubHTML!

  """
  Returns how many forks there are of this repository in the whole network.
  """
  forkCount: Int!

  """Indicates if the repository has issues feature enabled."""
  hasIssuesEnabled: Boolean!

  """Indicates if the repository has the Projects feature enabled."""
  hasProjectsEnabled: Boolean!

  """Indicates if the repository has wiki feature enabled."""
  hasWikiEnabled: Boolean!

  """The repository's URL."""
  homepageUrl: GitHubURI

  """Indicates if the repository is unmaintained."""
  isArchived: Boolean!

  """Identifies if the repository is a fork."""
  isFork: Boolean!

  """
  Indicates if a repository is either owned by an organization, or is a private fork of an organization repository.
  """
  isInOrganization: Boolean!

  """Indicates if the repository has been locked or not."""
  isLocked: Boolean!

  """Identifies if the repository is a mirror."""
  isMirror: Boolean!

  """Identifies if the repository is private or internal."""
  isPrivate: Boolean!

  """
  Identifies if the repository is a template that can be used to generate new repositories.
  """
  isTemplate: Boolean!

  """The license associated with the repository"""
  licenseInfo: GitHubLicense

  """The reason the repository has been locked."""
  lockReason: GitHubRepositoryLockReason

  """The repository's original mirror URL."""
  mirrorUrl: GitHubURI

  """The name of the repository."""
  name: String!

  """The repository's name with owner."""
  nameWithOwner: String!

  """The image used to represent this repository in Open Graph data."""
  openGraphImageUrl: GitHubURI!

  """The User owner of the repository."""
  owner: GitHubRepositoryOwner!

  """Identifies when the repository was last pushed to."""
  pushedAt: GitHubDateTime

  """The HTTP path for this repository"""
  resourcePath: GitHubURI!

  """
  A description of the repository, rendered to HTML without any links in it.
  """
  shortDescriptionHTML(
    """How many characters to return."""
    limit: Int = 200
  ): GitHubHTML!

  """Identifies the date and time when the object was last updated."""
  updatedAt: GitHubDateTime!

  """The HTTP URL for this repository"""
  url: GitHubURI!

  """
  Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar.
  """
  usesCustomOpenGraphImage: Boolean!
}

"""An invitation for a user to be added to a repository."""
type GitHubRepositoryInvitation implements OneGraphNode & GitHubNode {
  """The email address that received the invitation."""
  email: String

  """"""
  id: ID!

  """The user who received the invitation."""
  invitee: GitHubUser

  """The user who created the invitation."""
  inviter: GitHubUser!

  """The permalink for this repository invitation."""
  permalink: GitHubURI!

  """The permission granted on this repository by this invitation."""
  permission: GitHubRepositoryPermission!

  """The Repository the user is invited to."""
  repository: GitHubRepositoryInfo
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An edge in a connection."""
type GitHubRepositoryInvitationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubRepositoryInvitation
}

"""The connection type for RepositoryInvitation."""
type GitHubRepositoryInvitationConnection {
  """A list of edges."""
  edges: [GitHubRepositoryInvitationEdge]

  """A list of nodes."""
  nodes: [GitHubRepositoryInvitation]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

enum GitHubEnterpriseAdministratorInvitationOrderField {
  """Order enterprise administrator member invitations by creation time"""
  CREATED_AT
}

"""Ordering options for enterprise administrator invitation connections"""
input GitHubEnterpriseAdministratorInvitationOrder {
  """The field to order enterprise administrator invitations by."""
  field: GitHubEnterpriseAdministratorInvitationOrderField!

  """The ordering direction."""
  direction: GitHubOrderDirection!
}

"""
An invitation for a user to become an owner or billing manager of an enterprise.
"""
type GitHubEnterpriseAdministratorInvitation implements OneGraphNode & GitHubNode {
  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """The email of the person who was invited to the enterprise."""
  email: String

  """The enterprise the invitation is for."""
  enterprise: GitHubEnterprise!

  """"""
  id: ID!

  """The user who was invited to the enterprise."""
  invitee: GitHubUser

  """The user who created the invitation."""
  inviter: GitHubUser

  """
  The invitee's pending role in the enterprise (owner or billing_manager).
  """
  role: GitHubEnterpriseAdministratorRole!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An edge in a connection."""
type GitHubEnterpriseAdministratorInvitationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubEnterpriseAdministratorInvitation
}

"""The connection type for EnterpriseAdministratorInvitation."""
type GitHubEnterpriseAdministratorInvitationConnection {
  """A list of edges."""
  edges: [GitHubEnterpriseAdministratorInvitationEdge]

  """A list of nodes."""
  nodes: [GitHubEnterpriseAdministratorInvitation]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

enum GitHubRepositoryVisibility {
  """The repository is visible only to those with explicit access."""
  PRIVATE

  """The repository is visible to everyone."""
  PUBLIC

  """The repository is visible only to users in the same business."""
  INTERNAL
}

enum GitHubRepositoryOrderField {
  """Order repositories by creation time"""
  CREATED_AT

  """Order repositories by update time"""
  UPDATED_AT

  """Order repositories by push time"""
  PUSHED_AT

  """Order repositories by name"""
  NAME

  """Order repositories by number of stargazers"""
  STARGAZERS
}

"""Ordering options for repository connections"""
input GitHubRepositoryOrder {
  """The field to order repositories by."""
  field: GitHubRepositoryOrderField!

  """The ordering direction."""
  direction: GitHubOrderDirection!
}

"""A subset of repository information queryable from an enterprise."""
type GitHubEnterpriseRepositoryInfo implements OneGraphNode & GitHubNode {
  """"""
  id: ID!

  """Identifies if the repository is private or internal."""
  isPrivate: Boolean!

  """The repository's name."""
  name: String!

  """The repository's name with owner."""
  nameWithOwner: String!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An edge in a connection."""
type GitHubEnterpriseRepositoryInfoEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubEnterpriseRepositoryInfo
}

"""The connection type for EnterpriseRepositoryInfo."""
type GitHubEnterpriseRepositoryInfoConnection {
  """A list of edges."""
  edges: [GitHubEnterpriseRepositoryInfoEdge]

  """A list of nodes."""
  nodes: [GitHubEnterpriseRepositoryInfo]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""
A User who is an outside collaborator of an enterprise through one or more organizations.
"""
type GitHubEnterpriseOutsideCollaboratorEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """
  Whether the outside collaborator does not have a license for the enterprise.
  """
  isUnlicensed: Boolean! @deprecated(reason: "All outside collaborators consume a license Removal on 2021-01-01 UTC.")

  """The item at the end of the edge."""
  node: GitHubUser

  """The enterprise organization repositories this user is a member of."""
  repositories(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for repositories."""
    orderBy: GitHubRepositoryOrder = {field: NAME, direction: ASC}
  ): GitHubEnterpriseRepositoryInfoConnection!
}

"""The connection type for User."""
type GitHubEnterpriseOutsideCollaboratorConnection {
  """A list of edges."""
  edges: [GitHubEnterpriseOutsideCollaboratorEdge]

  """A list of nodes."""
  nodes: [GitHubUser]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

enum GitHubNotificationRestrictionSettingValue {
  """The setting is enabled for the owner."""
  ENABLED

  """The setting is disabled for the owner."""
  DISABLED
}

enum GitHubEnterpriseMembersCanMakePurchasesSettingValue {
  """The setting is enabled for organizations in the enterprise."""
  ENABLED

  """The setting is disabled for organizations in the enterprise."""
  DISABLED
}

enum GitHubOrganizationMembersCanCreateRepositoriesSettingValue {
  """Members will be able to create public and private repositories."""
  ALL

  """Members will be able to create only private repositories."""
  PRIVATE

  """Members will not be able to create public or private repositories."""
  DISABLED
}

enum GitHubEnterpriseMembersCanCreateRepositoriesSettingValue {
  """
  Organization administrators choose whether to allow members to create repositories.
  """
  NO_POLICY

  """Members will be able to create public and private repositories."""
  ALL

  """Members will be able to create only public repositories."""
  PUBLIC

  """Members will be able to create only private repositories."""
  PRIVATE

  """Members will not be able to create public or private repositories."""
  DISABLED
}

enum GitHubIpAllowListEntryOrderField {
  """Order IP allow list entries by creation time."""
  CREATED_AT

  """Order IP allow list entries by the allow list value."""
  ALLOW_LIST_VALUE
}

"""Ordering options for IP allow list entry connections."""
input GitHubIpAllowListEntryOrder {
  """The field to order IP allow list entries by."""
  field: GitHubIpAllowListEntryOrderField!

  """The ordering direction."""
  direction: GitHubOrderDirection!
}

"""Types that can own an IP allow list."""
union GitHubIpAllowListOwner = GitHubEnterprise | GitHubOrganization

"""
An IP address or range of addresses that is allowed to access an owner's resources.
"""
type GitHubIpAllowListEntry implements OneGraphNode & GitHubNode {
  """A single IP address or range of IP addresses in CIDR notation."""
  allowListValue: String!

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """"""
  id: ID!

  """Whether the entry is currently active."""
  isActive: Boolean!

  """The name of the IP allow list entry."""
  name: String

  """The owner of the IP allow list entry."""
  owner: GitHubIpAllowListOwner!

  """Identifies the date and time when the object was last updated."""
  updatedAt: GitHubDateTime!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An edge in a connection."""
type GitHubIpAllowListEntryEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubIpAllowListEntry
}

"""The connection type for IpAllowListEntry."""
type GitHubIpAllowListEntryConnection {
  """A list of edges."""
  edges: [GitHubIpAllowListEntryEdge]

  """A list of nodes."""
  nodes: [GitHubIpAllowListEntry]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

enum GitHubIpAllowListEnabledSettingValue {
  """The setting is enabled for the owner."""
  ENABLED

  """The setting is disabled for the owner."""
  DISABLED
}

enum GitHubEnterpriseServerInstallationOrderField {
  """Order Enterprise Server installations by host name"""
  HOST_NAME

  """Order Enterprise Server installations by customer name"""
  CUSTOMER_NAME

  """Order Enterprise Server installations by creation time"""
  CREATED_AT
}

"""Ordering options for Enterprise Server installation connections."""
input GitHubEnterpriseServerInstallationOrder {
  """The field to order Enterprise Server installations by."""
  field: GitHubEnterpriseServerInstallationOrderField!

  """The ordering direction."""
  direction: GitHubOrderDirection!
}

enum GitHubEnterpriseServerUserAccountsUploadOrderField {
  """Order user accounts uploads by creation time"""
  CREATED_AT
}

"""
Ordering options for Enterprise Server user accounts upload connections.
"""
input GitHubEnterpriseServerUserAccountsUploadOrder {
  """The field to order user accounts uploads by."""
  field: GitHubEnterpriseServerUserAccountsUploadOrderField!

  """The ordering direction."""
  direction: GitHubOrderDirection!
}

enum GitHubEnterpriseServerUserAccountsUploadSyncState {
  """The synchronization of the upload is pending."""
  PENDING

  """The synchronization of the upload succeeded."""
  SUCCESS

  """The synchronization of the upload failed."""
  FAILURE
}

"""A user accounts upload from an Enterprise Server installation."""
type GitHubEnterpriseServerUserAccountsUpload implements OneGraphNode & GitHubNode {
  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """The enterprise to which this upload belongs."""
  enterprise: GitHubEnterprise!

  """
  The Enterprise Server installation for which this upload was generated.
  """
  enterpriseServerInstallation: GitHubEnterpriseServerInstallation!

  """"""
  id: ID!

  """The name of the file uploaded."""
  name: String!

  """The synchronization state of the upload"""
  syncState: GitHubEnterpriseServerUserAccountsUploadSyncState!

  """Identifies the date and time when the object was last updated."""
  updatedAt: GitHubDateTime!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An edge in a connection."""
type GitHubEnterpriseServerUserAccountsUploadEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubEnterpriseServerUserAccountsUpload
}

"""The connection type for EnterpriseServerUserAccountsUpload."""
type GitHubEnterpriseServerUserAccountsUploadConnection {
  """A list of edges."""
  edges: [GitHubEnterpriseServerUserAccountsUploadEdge]

  """A list of nodes."""
  nodes: [GitHubEnterpriseServerUserAccountsUpload]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

enum GitHubEnterpriseServerUserAccountOrderField {
  """Order user accounts by login"""
  LOGIN

  """
  Order user accounts by creation time on the Enterprise Server installation
  """
  REMOTE_CREATED_AT
}

"""Ordering options for Enterprise Server user account connections."""
input GitHubEnterpriseServerUserAccountOrder {
  """The field to order user accounts by."""
  field: GitHubEnterpriseServerUserAccountOrderField!

  """The ordering direction."""
  direction: GitHubOrderDirection!
}

enum GitHubEnterpriseServerUserAccountEmailOrderField {
  """Order emails by email"""
  EMAIL
}

"""Ordering options for Enterprise Server user account email connections."""
input GitHubEnterpriseServerUserAccountEmailOrder {
  """The field to order emails by."""
  field: GitHubEnterpriseServerUserAccountEmailOrderField!

  """The ordering direction."""
  direction: GitHubOrderDirection!
}

"""
An email belonging to a user account on an Enterprise Server installation.
"""
type GitHubEnterpriseServerUserAccountEmail implements OneGraphNode & GitHubNode {
  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """The email address."""
  email: String!

  """"""
  id: ID!

  """
  Indicates whether this is the primary email of the associated user account.
  """
  isPrimary: Boolean!

  """Identifies the date and time when the object was last updated."""
  updatedAt: GitHubDateTime!

  """The user account to which the email belongs."""
  userAccount: GitHubEnterpriseServerUserAccount!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An edge in a connection."""
type GitHubEnterpriseServerUserAccountEmailEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubEnterpriseServerUserAccountEmail
}

"""The connection type for EnterpriseServerUserAccountEmail."""
type GitHubEnterpriseServerUserAccountEmailConnection {
  """A list of edges."""
  edges: [GitHubEnterpriseServerUserAccountEmailEdge]

  """A list of nodes."""
  nodes: [GitHubEnterpriseServerUserAccountEmail]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A user account on an Enterprise Server installation."""
type GitHubEnterpriseServerUserAccount implements OneGraphNode & GitHubNode {
  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """User emails belonging to this user account."""
  emails(
    """
    Ordering options for Enterprise Server user account emails returned from the connection.
    """
    orderBy: GitHubEnterpriseServerUserAccountEmailOrder = {field: EMAIL, direction: ASC}

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubEnterpriseServerUserAccountEmailConnection!

  """The Enterprise Server installation on which this user account exists."""
  enterpriseServerInstallation: GitHubEnterpriseServerInstallation!

  """"""
  id: ID!

  """
  Whether the user account is a site administrator on the Enterprise Server installation.
  """
  isSiteAdmin: Boolean!

  """The login of the user account on the Enterprise Server installation."""
  login: String!

  """
  The profile name of the user account on the Enterprise Server installation.
  """
  profileName: String

  """
  The date and time when the user account was created on the Enterprise Server installation.
  """
  remoteCreatedAt: GitHubDateTime!

  """The ID of the user account on the Enterprise Server installation."""
  remoteUserId: Int!

  """Identifies the date and time when the object was last updated."""
  updatedAt: GitHubDateTime!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An edge in a connection."""
type GitHubEnterpriseServerUserAccountEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubEnterpriseServerUserAccount
}

"""The connection type for EnterpriseServerUserAccount."""
type GitHubEnterpriseServerUserAccountConnection {
  """A list of edges."""
  edges: [GitHubEnterpriseServerUserAccountEdge]

  """A list of nodes."""
  nodes: [GitHubEnterpriseServerUserAccount]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An Enterprise Server installation."""
type GitHubEnterpriseServerInstallation implements OneGraphNode & GitHubNode {
  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """The customer name to which the Enterprise Server installation belongs."""
  customerName: String!

  """The host name of the Enterprise Server installation."""
  hostName: String!

  """"""
  id: ID!

  """
  Whether or not the installation is connected to an Enterprise Server installation via GitHub Connect.
  """
  isConnected: Boolean!

  """Identifies the date and time when the object was last updated."""
  updatedAt: GitHubDateTime!

  """User accounts on this Enterprise Server installation."""
  userAccounts(
    """
    Ordering options for Enterprise Server user accounts returned from the connection.
    """
    orderBy: GitHubEnterpriseServerUserAccountOrder = {field: LOGIN, direction: ASC}

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubEnterpriseServerUserAccountConnection!

  """User accounts uploads for the Enterprise Server installation."""
  userAccountsUploads(
    """
    Ordering options for Enterprise Server user accounts uploads returned from the connection.
    """
    orderBy: GitHubEnterpriseServerUserAccountsUploadOrder = {field: CREATED_AT, direction: DESC}

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubEnterpriseServerUserAccountsUploadConnection!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An edge in a connection."""
type GitHubEnterpriseServerInstallationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubEnterpriseServerInstallation
}

"""The connection type for EnterpriseServerInstallation."""
type GitHubEnterpriseServerInstallationConnection {
  """A list of edges."""
  edges: [GitHubEnterpriseServerInstallationEdge]

  """A list of nodes."""
  nodes: [GitHubEnterpriseServerInstallation]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

enum GitHubVerifiableDomainOrderField {
  """Order verifiable domains by the domain name."""
  DOMAIN

  """Order verifiable domains by their creation date."""
  CREATED_AT
}

"""Ordering options for verifiable domain connections."""
input GitHubVerifiableDomainOrder {
  """The field to order verifiable domains by."""
  field: GitHubVerifiableDomainOrderField!

  """The ordering direction."""
  direction: GitHubOrderDirection!
}

enum GitHubDefaultRepositoryPermissionField {
  """No access"""
  NONE

  """Can read repos by default"""
  READ

  """Can read and write repos by default"""
  WRITE

  """Can read, write, and administrate repos by default"""
  ADMIN
}

enum GitHubEnterpriseDefaultRepositoryPermissionSettingValue {
  """
  Organizations in the enterprise choose default repository permissions for their members.
  """
  NO_POLICY

  """
  Organization members will be able to clone, pull, push, and add new collaborators to all organization repositories.
  """
  ADMIN

  """
  Organization members will be able to clone, pull, and push all organization repositories.
  """
  WRITE

  """
  Organization members will be able to clone and pull all organization repositories.
  """
  READ

  """
  Organization members will only be able to clone and pull public repositories.
  """
  NONE
}

enum GitHubEnterpriseEnabledDisabledSettingValue {
  """The setting is enabled for organizations in the enterprise."""
  ENABLED

  """The setting is disabled for organizations in the enterprise."""
  DISABLED

  """There is no policy set for organizations in the enterprise."""
  NO_POLICY
}

enum GitHubEnterpriseAdministratorRole {
  """Represents an owner of the enterprise account."""
  OWNER

  """Represents a billing manager of the enterprise account."""
  BILLING_MANAGER
}

"""A User who is an administrator of an enterprise."""
type GitHubEnterpriseAdministratorEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubUser

  """The role of the administrator."""
  role: GitHubEnterpriseAdministratorRole!
}

"""The connection type for User."""
type GitHubEnterpriseAdministratorConnection {
  """A list of edges."""
  edges: [GitHubEnterpriseAdministratorEdge]

  """A list of nodes."""
  nodes: [GitHubUser]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Enterprise information only visible to enterprise owners."""
type GitHubEnterpriseOwnerInfo {
  """A list of all of the administrators for this enterprise."""
  admins(
    """The search string to look for."""
    query: String

    """The role to filter by."""
    role: GitHubEnterpriseAdministratorRole

    """Ordering options for administrators returned from the connection."""
    orderBy: GitHubEnterpriseMemberOrder = {field: LOGIN, direction: ASC}

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubEnterpriseAdministratorConnection!

  """
  A list of users in the enterprise who currently have two-factor authentication disabled.
  """
  affiliatedUsersWithTwoFactorDisabled(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubUserConnection!

  """
  Whether or not affiliated users with two-factor authentication disabled exist in the enterprise.
  """
  affiliatedUsersWithTwoFactorDisabledExist: Boolean!

  """
  The setting value for whether private repository forking is enabled for repositories in organizations in this enterprise.
  """
  allowPrivateRepositoryForkingSetting: GitHubEnterpriseEnabledDisabledSettingValue!

  """
  A list of enterprise organizations configured with the provided private repository forking setting value.
  """
  allowPrivateRepositoryForkingSettingOrganizations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """The setting value to find organizations for."""
    value: Boolean!

    """Ordering options for organizations with this setting."""
    orderBy: GitHubOrganizationOrder = {field: LOGIN, direction: ASC}
  ): GitHubOrganizationConnection!

  """
  The setting value for base repository permissions for organizations in this enterprise.
  """
  defaultRepositoryPermissionSetting: GitHubEnterpriseDefaultRepositoryPermissionSettingValue!

  """
  A list of enterprise organizations configured with the provided default repository permission.
  """
  defaultRepositoryPermissionSettingOrganizations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """The permission to find organizations for."""
    value: GitHubDefaultRepositoryPermissionField!

    """Ordering options for organizations with this setting."""
    orderBy: GitHubOrganizationOrder = {field: LOGIN, direction: ASC}
  ): GitHubOrganizationConnection!

  """A list of domains owned by the enterprise."""
  domains(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filter whether or not the domain is verified."""
    isVerified: Boolean

    """Ordering options for verifiable domains returned."""
    orderBy: GitHubVerifiableDomainOrder = {field: DOMAIN, direction: ASC}
  ): GitHubVerifiableDomainConnection!

  """Enterprise Server installations owned by the enterprise."""
  enterpriseServerInstallations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Whether or not to only return installations discovered via GitHub Connect.
    """
    connectedOnly: Boolean = false

    """Ordering options for Enterprise Server installations returned."""
    orderBy: GitHubEnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}
  ): GitHubEnterpriseServerInstallationConnection!

  """
  The setting value for whether the enterprise has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: GitHubIpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the enterprise.
  """
  ipAllowListEntries(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for IP allow list entries returned."""
    orderBy: GitHubIpAllowListEntryOrder = {field: ALLOW_LIST_VALUE, direction: ASC}
  ): GitHubIpAllowListEntryConnection!

  """
  Whether or not the default repository permission is currently being updated.
  """
  isUpdatingDefaultRepositoryPermission: Boolean!

  """
  Whether the two-factor authentication requirement is currently being enforced.
  """
  isUpdatingTwoFactorRequirement: Boolean!

  """
  The setting value for whether organization members with admin permissions on a repository can change repository visibility.
  """
  membersCanChangeRepositoryVisibilitySetting: GitHubEnterpriseEnabledDisabledSettingValue!

  """
  A list of enterprise organizations configured with the provided can change repository visibility setting value.
  """
  membersCanChangeRepositoryVisibilitySettingOrganizations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """The setting value to find organizations for."""
    value: Boolean!

    """Ordering options for organizations with this setting."""
    orderBy: GitHubOrganizationOrder = {field: LOGIN, direction: ASC}
  ): GitHubOrganizationConnection!

  """
  The setting value for whether members of organizations in the enterprise can create internal repositories.
  """
  membersCanCreateInternalRepositoriesSetting: Boolean

  """
  The setting value for whether members of organizations in the enterprise can create private repositories.
  """
  membersCanCreatePrivateRepositoriesSetting: Boolean

  """
  The setting value for whether members of organizations in the enterprise can create public repositories.
  """
  membersCanCreatePublicRepositoriesSetting: Boolean

  """
  The setting value for whether members of organizations in the enterprise can create repositories.
  """
  membersCanCreateRepositoriesSetting: GitHubEnterpriseMembersCanCreateRepositoriesSettingValue

  """
  A list of enterprise organizations configured with the provided repository creation setting value.
  """
  membersCanCreateRepositoriesSettingOrganizations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """The setting to find organizations for."""
    value: GitHubOrganizationMembersCanCreateRepositoriesSettingValue!

    """Ordering options for organizations with this setting."""
    orderBy: GitHubOrganizationOrder = {field: LOGIN, direction: ASC}
  ): GitHubOrganizationConnection!

  """
  The setting value for whether members with admin permissions for repositories can delete issues.
  """
  membersCanDeleteIssuesSetting: GitHubEnterpriseEnabledDisabledSettingValue!

  """
  A list of enterprise organizations configured with the provided members can delete issues setting value.
  """
  membersCanDeleteIssuesSettingOrganizations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """The setting value to find organizations for."""
    value: Boolean!

    """Ordering options for organizations with this setting."""
    orderBy: GitHubOrganizationOrder = {field: LOGIN, direction: ASC}
  ): GitHubOrganizationConnection!

  """
  The setting value for whether members with admin permissions for repositories can delete or transfer repositories.
  """
  membersCanDeleteRepositoriesSetting: GitHubEnterpriseEnabledDisabledSettingValue!

  """
  A list of enterprise organizations configured with the provided members can delete repositories setting value.
  """
  membersCanDeleteRepositoriesSettingOrganizations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """The setting value to find organizations for."""
    value: Boolean!

    """Ordering options for organizations with this setting."""
    orderBy: GitHubOrganizationOrder = {field: LOGIN, direction: ASC}
  ): GitHubOrganizationConnection!

  """
  The setting value for whether members of organizations in the enterprise can invite outside collaborators.
  """
  membersCanInviteCollaboratorsSetting: GitHubEnterpriseEnabledDisabledSettingValue!

  """
  A list of enterprise organizations configured with the provided members can invite collaborators setting value.
  """
  membersCanInviteCollaboratorsSettingOrganizations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """The setting value to find organizations for."""
    value: Boolean!

    """Ordering options for organizations with this setting."""
    orderBy: GitHubOrganizationOrder = {field: LOGIN, direction: ASC}
  ): GitHubOrganizationConnection!

  """
  Indicates whether members of this enterprise's organizations can purchase additional services for those organizations.
  """
  membersCanMakePurchasesSetting: GitHubEnterpriseMembersCanMakePurchasesSettingValue!

  """
  The setting value for whether members with admin permissions for repositories can update protected branches.
  """
  membersCanUpdateProtectedBranchesSetting: GitHubEnterpriseEnabledDisabledSettingValue!

  """
  A list of enterprise organizations configured with the provided members can update protected branches setting value.
  """
  membersCanUpdateProtectedBranchesSettingOrganizations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """The setting value to find organizations for."""
    value: Boolean!

    """Ordering options for organizations with this setting."""
    orderBy: GitHubOrganizationOrder = {field: LOGIN, direction: ASC}
  ): GitHubOrganizationConnection!

  """The setting value for whether members can view dependency insights."""
  membersCanViewDependencyInsightsSetting: GitHubEnterpriseEnabledDisabledSettingValue!

  """
  A list of enterprise organizations configured with the provided members can view dependency insights setting value.
  """
  membersCanViewDependencyInsightsSettingOrganizations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """The setting value to find organizations for."""
    value: Boolean!

    """Ordering options for organizations with this setting."""
    orderBy: GitHubOrganizationOrder = {field: LOGIN, direction: ASC}
  ): GitHubOrganizationConnection!

  """
  Indicates if email notification delivery for this enterprise is restricted to verified domains.
  """
  notificationDeliveryRestrictionEnabledSetting: GitHubNotificationRestrictionSettingValue!

  """
  The setting value for whether organization projects are enabled for organizations in this enterprise.
  """
  organizationProjectsSetting: GitHubEnterpriseEnabledDisabledSettingValue!

  """
  A list of enterprise organizations configured with the provided organization projects setting value.
  """
  organizationProjectsSettingOrganizations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """The setting value to find organizations for."""
    value: Boolean!

    """Ordering options for organizations with this setting."""
    orderBy: GitHubOrganizationOrder = {field: LOGIN, direction: ASC}
  ): GitHubOrganizationConnection!

  """
  A list of outside collaborators across the repositories in the enterprise.
  """
  outsideCollaborators(
    """The login of one specific outside collaborator."""
    login: String

    """The search string to look for."""
    query: String

    """
    Ordering options for outside collaborators returned from the connection.
    """
    orderBy: GitHubEnterpriseMemberOrder = {field: LOGIN, direction: ASC}

    """
    Only return outside collaborators on repositories with this visibility.
    """
    visibility: GitHubRepositoryVisibility

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubEnterpriseOutsideCollaboratorConnection!

  """A list of pending administrator invitations for the enterprise."""
  pendingAdminInvitations(
    """The search string to look for."""
    query: String

    """
    Ordering options for pending enterprise administrator invitations returned from the connection.
    """
    orderBy: GitHubEnterpriseAdministratorInvitationOrder = {field: CREATED_AT, direction: DESC}

    """The role to filter by."""
    role: GitHubEnterpriseAdministratorRole

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubEnterpriseAdministratorInvitationConnection!

  """
  A list of pending collaborator invitations across the repositories in the enterprise.
  """
  pendingCollaboratorInvitations(
    """The search string to look for."""
    query: String

    """
    Ordering options for pending repository collaborator invitations returned from the connection.
    """
    orderBy: GitHubRepositoryInvitationOrder = {field: CREATED_AT, direction: DESC}

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubRepositoryInvitationConnection!

  """
  A list of pending collaborators across the repositories in the enterprise.
  """
  pendingCollaborators(
    """The search string to look for."""
    query: String

    """
    Ordering options for pending repository collaborator invitations returned from the connection.
    """
    orderBy: GitHubRepositoryInvitationOrder = {field: CREATED_AT, direction: DESC}

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubEnterprisePendingCollaboratorConnection! @deprecated(reason: "Repository invitations can now be associated with an email, not only an invitee. Use the `pendingCollaboratorInvitations` field instead. Removal on 2020-10-01 UTC.")

  """
  A list of pending member invitations for organizations in the enterprise.
  """
  pendingMemberInvitations(
    """The search string to look for."""
    query: String

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubEnterprisePendingMemberInvitationConnection!

  """
  The setting value for whether repository projects are enabled in this enterprise.
  """
  repositoryProjectsSetting: GitHubEnterpriseEnabledDisabledSettingValue!

  """
  A list of enterprise organizations configured with the provided repository projects setting value.
  """
  repositoryProjectsSettingOrganizations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """The setting value to find organizations for."""
    value: Boolean!

    """Ordering options for organizations with this setting."""
    orderBy: GitHubOrganizationOrder = {field: LOGIN, direction: ASC}
  ): GitHubOrganizationConnection!

  """The SAML Identity Provider for the enterprise."""
  samlIdentityProvider: GitHubEnterpriseIdentityProvider

  """
  A list of enterprise organizations configured with the SAML single sign-on setting value.
  """
  samlIdentityProviderSettingOrganizations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """The setting value to find organizations for."""
    value: GitHubIdentityProviderConfigurationState!

    """Ordering options for organizations with this setting."""
    orderBy: GitHubOrganizationOrder = {field: LOGIN, direction: ASC}
  ): GitHubOrganizationConnection!

  """A list of members with a support entitlement."""
  supportEntitlements(
    """
    Ordering options for support entitlement users returned from the connection.
    """
    orderBy: GitHubEnterpriseMemberOrder = {field: LOGIN, direction: ASC}

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubEnterpriseMemberConnection!

  """
  The setting value for whether team discussions are enabled for organizations in this enterprise.
  """
  teamDiscussionsSetting: GitHubEnterpriseEnabledDisabledSettingValue!

  """
  A list of enterprise organizations configured with the provided team discussions setting value.
  """
  teamDiscussionsSettingOrganizations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """The setting value to find organizations for."""
    value: Boolean!

    """Ordering options for organizations with this setting."""
    orderBy: GitHubOrganizationOrder = {field: LOGIN, direction: ASC}
  ): GitHubOrganizationConnection!

  """
  The setting value for whether the enterprise requires two-factor authentication for its organizations and users.
  """
  twoFactorRequiredSetting: GitHubEnterpriseEnabledSettingValue!

  """
  A list of enterprise organizations configured with the two-factor authentication setting value.
  """
  twoFactorRequiredSettingOrganizations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """The setting value to find organizations for."""
    value: Boolean!

    """Ordering options for organizations with this setting."""
    orderBy: GitHubOrganizationOrder = {field: LOGIN, direction: ASC}
  ): GitHubOrganizationConnection!
}

enum GitHubEnterpriseMemberOrderField {
  """Order enterprise members by login"""
  LOGIN

  """Order enterprise members by creation time"""
  CREATED_AT
}

"""Ordering options for enterprise member connections."""
input GitHubEnterpriseMemberOrder {
  """The field to order enterprise members by."""
  field: GitHubEnterpriseMemberOrderField!

  """The ordering direction."""
  direction: GitHubOrderDirection!
}

enum GitHubEnterpriseUserDeployment {
  """The user is part of a GitHub Enterprise Cloud deployment."""
  CLOUD

  """The user is part of a GitHub Enterprise Server deployment."""
  SERVER
}

enum GitHubOrganizationOrderField {
  """Order organizations by creation time"""
  CREATED_AT

  """Order organizations by login"""
  LOGIN
}

"""Ordering options for organization connections."""
input GitHubOrganizationOrder {
  """The field to order organizations by."""
  field: GitHubOrganizationOrderField!

  """The ordering direction."""
  direction: GitHubOrderDirection!
}

enum GitHubEnterpriseUserAccountMembershipRole {
  """The user is a member of the enterprise membership."""
  MEMBER

  """The user is an owner of the enterprise membership."""
  OWNER
}

"""An enterprise organization that a user is a member of."""
type GitHubEnterpriseOrganizationMembershipEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubOrganization

  """The role of the user in the enterprise membership."""
  role: GitHubEnterpriseUserAccountMembershipRole!
}

"""The connection type for Organization."""
type GitHubEnterpriseOrganizationMembershipConnection {
  """A list of edges."""
  edges: [GitHubEnterpriseOrganizationMembershipEdge]

  """A list of nodes."""
  nodes: [GitHubOrganization]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""
An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations.
"""
type GitHubEnterpriseUserAccount implements OneGraphNode & GitHubActor & GitHubNode {
  """A URL pointing to the enterprise user account's public avatar."""
  avatarUrl(
    """The size of the resulting square image."""
    size: Int
  ): GitHubURI!

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """The enterprise in which this user account exists."""
  enterprise: GitHubEnterprise!

  """"""
  id: ID!

  """
  An identifier for the enterprise user account, a login or email address
  """
  login: String!

  """The name of the enterprise user account"""
  name: String

  """A list of enterprise organizations this user is a member of."""
  organizations(
    """The search string to look for."""
    query: String

    """Ordering options for organizations returned from the connection."""
    orderBy: GitHubOrganizationOrder = {field: LOGIN, direction: ASC}

    """The role of the user in the enterprise organization."""
    role: GitHubEnterpriseUserAccountMembershipRole

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubEnterpriseOrganizationMembershipConnection!

  """The HTTP path for this user."""
  resourcePath: GitHubURI!

  """Identifies the date and time when the object was last updated."""
  updatedAt: GitHubDateTime!

  """The HTTP URL for this user."""
  url: GitHubURI!

  """The user within the enterprise."""
  user: GitHubUser
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An object that is a member of an enterprise."""
union GitHubEnterpriseMember = GitHubEnterpriseUserAccount | GitHubUser

"""
A User who is a member of an enterprise through one or more organizations.
"""
type GitHubEnterpriseMemberEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """Whether the user does not have a license for the enterprise."""
  isUnlicensed: Boolean! @deprecated(reason: "All members consume a license Removal on 2021-01-01 UTC.")

  """The item at the end of the edge."""
  node: GitHubEnterpriseMember
}

"""The connection type for EnterpriseMember."""
type GitHubEnterpriseMemberConnection {
  """A list of edges."""
  edges: [GitHubEnterpriseMemberEdge]

  """A list of nodes."""
  nodes: [GitHubEnterpriseMember]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""
Enterprise billing information visible to enterprise billing managers and owners.
"""
type GitHubEnterpriseBillingInfo {
  """The number of licenseable users/emails across the enterprise."""
  allLicensableUsersCount: Int!

  """
  The number of data packs used by all organizations owned by the enterprise.
  """
  assetPacks: Int!

  """
  The number of available seats across all owned organizations based on the unique number of billable users.
  """
  availableSeats: Int! @deprecated(reason: "`availableSeats` will be replaced with `totalAvailableLicenses` to provide more clarity on the value being returned Use EnterpriseBillingInfo.totalAvailableLicenses instead. Removal on 2020-01-01 UTC.")

  """
  The bandwidth quota in GB for all organizations owned by the enterprise.
  """
  bandwidthQuota: Float!

  """
  The bandwidth usage in GB for all organizations owned by the enterprise.
  """
  bandwidthUsage: Float!

  """The bandwidth usage as a percentage of the bandwidth quota."""
  bandwidthUsagePercentage: Int!

  """The total seats across all organizations owned by the enterprise."""
  seats: Int! @deprecated(reason: "`seats` will be replaced with `totalLicenses` to provide more clarity on the value being returned Use EnterpriseBillingInfo.totalLicenses instead. Removal on 2020-01-01 UTC.")

  """The storage quota in GB for all organizations owned by the enterprise."""
  storageQuota: Float!

  """The storage usage in GB for all organizations owned by the enterprise."""
  storageUsage: Float!

  """The storage usage as a percentage of the storage quota."""
  storageUsagePercentage: Int!

  """
  The number of available licenses across all owned organizations based on the unique number of billable users.
  """
  totalAvailableLicenses: Int!

  """The total number of licenses allocated."""
  totalLicenses: Int!
}

"""
An account to manage multiple organizations with consolidated policy and billing.
"""
type GitHubEnterprise implements OneGraphNode & GitHubNode {
  """A URL pointing to the enterprise's public avatar."""
  avatarUrl(
    """The size of the resulting square image."""
    size: Int
  ): GitHubURI!

  """Enterprise billing information visible to enterprise billing managers."""
  billingInfo: GitHubEnterpriseBillingInfo

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """Identifies the primary key from the database."""
  databaseId: Int

  """The description of the enterprise."""
  description: String

  """The description of the enterprise as HTML."""
  descriptionHTML: GitHubHTML!

  """"""
  id: ID!

  """The location of the enterprise."""
  location: String

  """A list of users who are members of this enterprise."""
  members(
    """Only return members within the organizations with these logins"""
    organizationLogins: [String!]

    """The search string to look for."""
    query: String

    """Ordering options for members returned from the connection."""
    orderBy: GitHubEnterpriseMemberOrder = {field: LOGIN, direction: ASC}

    """The role of the user in the enterprise organization or server."""
    role: GitHubEnterpriseUserAccountMembershipRole

    """Only return members within the selected GitHub Enterprise deployment"""
    deployment: GitHubEnterpriseUserDeployment

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubEnterpriseMemberConnection!

  """The name of the enterprise."""
  name: String!

  """A list of organizations that belong to this enterprise."""
  organizations(
    """The search string to look for."""
    query: String

    """Ordering options for organizations returned from the connection."""
    orderBy: GitHubOrganizationOrder = {field: LOGIN, direction: ASC}

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubOrganizationConnection!

  """Enterprise information only visible to enterprise owners."""
  ownerInfo: GitHubEnterpriseOwnerInfo

  """The HTTP path for this enterprise."""
  resourcePath: GitHubURI!

  """The URL-friendly identifier for the enterprise."""
  slug: String!

  """The HTTP URL for this enterprise."""
  url: GitHubURI!

  """A list of user accounts on this enterprise."""
  userAccounts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubEnterpriseUserAccountConnection!

  """Is the current viewer an admin of this enterprise?"""
  viewerIsAdmin: Boolean!

  """The URL of the enterprise website."""
  websiteUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Types that can own a verifiable domain."""
union GitHubVerifiableDomainOwner = GitHubEnterprise | GitHubOrganization

"""A domain that can be verified for an organization or an enterprise."""
type GitHubVerifiableDomain implements OneGraphNode & GitHubNode {
  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """Identifies the primary key from the database."""
  databaseId: Int

  """The DNS host name that should be used for verification."""
  dnsHostName: GitHubURI

  """The unicode encoded domain."""
  domain: GitHubURI!

  """
  Whether a TXT record for verification with the expected host name was found.
  """
  hasFoundHostName: Boolean!

  """
  Whether a TXT record for verification with the expected verification token was found.
  """
  hasFoundVerificationToken: Boolean!

  """"""
  id: ID!

  """
  Whether this domain is required to exist for an organization or enterprise policy to be enforced.
  """
  isRequiredForPolicyEnforcement: Boolean!

  """Whether or not the domain is verified."""
  isVerified: Boolean!

  """The owner of the domain."""
  owner: GitHubVerifiableDomainOwner!

  """The punycode encoded domain."""
  punycodeEncodedDomain: GitHubURI!

  """The time that the current verification token will expire."""
  tokenExpirationTime: GitHubDateTime

  """Identifies the date and time when the object was last updated."""
  updatedAt: GitHubDateTime!

  """The current verification token for the domain."""
  verificationToken: String
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An edge in a connection."""
type GitHubVerifiableDomainEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubVerifiableDomain
}

"""The connection type for VerifiableDomain."""
type GitHubVerifiableDomainConnection {
  """A list of edges."""
  edges: [GitHubVerifiableDomainEdge]

  """A list of nodes."""
  nodes: [GitHubVerifiableDomain]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

enum GitHubAuditLogOrderField {
  """Order audit log entries by timestamp"""
  CREATED_AT
}

"""Ordering options for Audit Log connections."""
input GitHubAuditLogOrder {
  """The field to order Audit Logs by."""
  field: GitHubAuditLogOrderField

  """The ordering direction."""
  direction: GitHubOrderDirection
}

"""Audit log entry for a repository_visibility_change.enable event."""
type GitHubRepositoryVisibilityChangeEnableAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubEnterpriseAuditEntryData & GitHubNode & GitHubOrganizationAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """The HTTP path for this enterprise."""
  enterpriseResourcePath: GitHubURI

  """The slug of the enterprise."""
  enterpriseSlug: String

  """The HTTP URL for this enterprise."""
  enterpriseUrl: GitHubURI

  """"""
  id: ID!

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Audit log entry for a repository_visibility_change.disable event."""
type GitHubRepositoryVisibilityChangeDisableAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubEnterpriseAuditEntryData & GitHubNode & GitHubOrganizationAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """The HTTP path for this enterprise."""
  enterpriseResourcePath: GitHubURI

  """The slug of the enterprise."""
  enterpriseSlug: String

  """The HTTP URL for this enterprise."""
  enterpriseUrl: GitHubURI

  """"""
  id: ID!

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""
Audit log entry for a org.update_member_repository_invitation_permission event.
"""
type GitHubOrgUpdateMemberRepositoryInvitationPermissionAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOrganizationAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """
  Can outside collaborators be invited to repositories in the organization.
  """
  canInviteOutsideCollaboratorsToRepositories: Boolean

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """"""
  id: ID!

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

enum GitHubOrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility {
  """
  All organization members are restricted from creating any repositories.
  """
  ALL

  """
  All organization members are restricted from creating public repositories.
  """
  PUBLIC

  """All organization members are allowed to create any repositories."""
  NONE

  """
  All organization members are restricted from creating private repositories.
  """
  PRIVATE

  """
  All organization members are restricted from creating internal repositories.
  """
  INTERNAL

  """
  All organization members are restricted from creating public or internal repositories.
  """
  PUBLIC_INTERNAL

  """
  All organization members are restricted from creating private or internal repositories.
  """
  PRIVATE_INTERNAL

  """
  All organization members are restricted from creating public or private repositories.
  """
  PUBLIC_PRIVATE
}

"""
Audit log entry for a org.update_member_repository_creation_permission event.
"""
type GitHubOrgUpdateMemberRepositoryCreationPermissionAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOrganizationAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """Can members create repositories in the organization."""
  canCreateRepositories: Boolean

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """"""
  id: ID!

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI

  """
  The permission for visibility level of repositories for this organization.
  """
  visibility: GitHubOrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

enum GitHubOrgUpdateMemberAuditEntryPermission {
  """Can read and clone repositories."""
  READ

  """Can read, clone, push, and add collaborators to repositories."""
  ADMIN
}

"""Audit log entry for a org.update_member event."""
type GitHubOrgUpdateMemberAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOrganizationAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """"""
  id: ID!

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The new member permission level for the organization."""
  permission: GitHubOrgUpdateMemberAuditEntryPermission

  """The former member permission level for the organization."""
  permissionWas: GitHubOrgUpdateMemberAuditEntryPermission

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

enum GitHubOrgUpdateDefaultRepositoryPermissionAuditEntryPermission {
  """Can read and clone repositories."""
  READ

  """Can read, clone and push to repositories."""
  WRITE

  """Can read, clone, push, and add collaborators to repositories."""
  ADMIN

  """No default permission value."""
  NONE
}

"""Audit log entry for a org.update_default_repository_permission"""
type GitHubOrgUpdateDefaultRepositoryPermissionAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOrganizationAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """"""
  id: ID!

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The new default repository permission level for the organization."""
  permission: GitHubOrgUpdateDefaultRepositoryPermissionAuditEntryPermission

  """The former default repository permission level for the organization."""
  permissionWas: GitHubOrgUpdateDefaultRepositoryPermissionAuditEntryPermission

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Audit log entry for a org.unblock_user"""
type GitHubOrgUnblockUserAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOrganizationAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The user being unblocked by the organization."""
  blockedUser: GitHubUser

  """The username of the blocked user."""
  blockedUserName: String

  """The HTTP path for the blocked user."""
  blockedUserResourcePath: GitHubURI

  """The HTTP URL for the blocked user."""
  blockedUserUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """"""
  id: ID!

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Audit log entry for a team.remove_repository event."""
type GitHubTeamRemoveRepositoryAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOrganizationAuditEntryData & GitHubRepositoryAuditEntryData & GitHubTeamAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """"""
  id: ID!

  """Whether the team was mapped to an LDAP Group."""
  isLdapMapped: Boolean

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The repository associated with the action"""
  repository: GitHubRepository

  """The name of the repository"""
  repositoryName: String

  """The HTTP path for the repository"""
  repositoryResourcePath: GitHubURI

  """The HTTP URL for the repository"""
  repositoryUrl: GitHubURI

  """The team associated with the action"""
  team: GitHubTeam

  """The name of the team"""
  teamName: String

  """The HTTP path for this team"""
  teamResourcePath: GitHubURI

  """The HTTP URL for this team"""
  teamUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Audit log entry for a team.remove_member event."""
type GitHubTeamRemoveMemberAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOrganizationAuditEntryData & GitHubTeamAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """"""
  id: ID!

  """Whether the team was mapped to an LDAP Group."""
  isLdapMapped: Boolean

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The team associated with the action"""
  team: GitHubTeam

  """The name of the team"""
  teamName: String

  """The HTTP path for this team"""
  teamResourcePath: GitHubURI

  """The HTTP URL for this team"""
  teamUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Audit log entry for a team.change_parent_team event."""
type GitHubTeamChangeParentTeamAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOrganizationAuditEntryData & GitHubTeamAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """"""
  id: ID!

  """Whether the team was mapped to an LDAP Group."""
  isLdapMapped: Boolean

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The new parent team."""
  parentTeam: GitHubTeam

  """The name of the new parent team"""
  parentTeamName: String

  """The name of the former parent team"""
  parentTeamNameWas: String

  """The HTTP path for the parent team"""
  parentTeamResourcePath: GitHubURI

  """The HTTP URL for the parent team"""
  parentTeamUrl: GitHubURI

  """The former parent team."""
  parentTeamWas: GitHubTeam

  """The HTTP path for the previous parent team"""
  parentTeamWasResourcePath: GitHubURI

  """The HTTP URL for the previous parent team"""
  parentTeamWasUrl: GitHubURI

  """The team associated with the action"""
  team: GitHubTeam

  """The name of the team"""
  teamName: String

  """The HTTP path for this team"""
  teamResourcePath: GitHubURI

  """The HTTP URL for this team"""
  teamUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Audit log entry for a team.add_member event."""
type GitHubTeamAddMemberAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOrganizationAuditEntryData & GitHubTeamAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """"""
  id: ID!

  """Whether the team was mapped to an LDAP Group."""
  isLdapMapped: Boolean

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The team associated with the action"""
  team: GitHubTeam

  """The name of the team"""
  teamName: String

  """The HTTP path for this team"""
  teamResourcePath: GitHubURI

  """The HTTP URL for this team"""
  teamUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Metadata for a team membership for org.restore_member actions"""
type GitHubOrgRestoreMemberMembershipTeamAuditEntryData implements GitHubTeamAuditEntryData {
  """The team associated with the action"""
  team: GitHubTeam

  """The name of the team"""
  teamName: String

  """The HTTP path for this team"""
  teamResourcePath: GitHubURI

  """The HTTP URL for this team"""
  teamUrl: GitHubURI
}

"""Metadata for an audit entry with action team.*"""
interface GitHubTeamAuditEntryData {
  """The team associated with the action"""
  team: GitHubTeam

  """The name of the team"""
  teamName: String

  """The HTTP path for this team"""
  teamResourcePath: GitHubURI

  """The HTTP URL for this team"""
  teamUrl: GitHubURI
}

"""Audit log entry for a team.add_repository event."""
type GitHubTeamAddRepositoryAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOrganizationAuditEntryData & GitHubRepositoryAuditEntryData & GitHubTeamAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """"""
  id: ID!

  """Whether the team was mapped to an LDAP Group."""
  isLdapMapped: Boolean

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The repository associated with the action"""
  repository: GitHubRepository

  """The name of the repository"""
  repositoryName: String

  """The HTTP path for the repository"""
  repositoryResourcePath: GitHubURI

  """The HTTP URL for the repository"""
  repositoryUrl: GitHubURI

  """The team associated with the action"""
  team: GitHubTeam

  """The name of the team"""
  teamName: String

  """The HTTP path for this team"""
  teamResourcePath: GitHubURI

  """The HTTP URL for this team"""
  teamUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

enum GitHubRepoRemoveMemberAuditEntryVisibility {
  """The repository is visible only to users in the same business."""
  INTERNAL

  """The repository is visible only to those with explicit access."""
  PRIVATE

  """The repository is visible to everyone."""
  PUBLIC
}

"""Audit log entry for a repo.remove_member event."""
type GitHubRepoRemoveMemberAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOrganizationAuditEntryData & GitHubRepositoryAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """"""
  id: ID!

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The repository associated with the action"""
  repository: GitHubRepository

  """The name of the repository"""
  repositoryName: String

  """The HTTP path for the repository"""
  repositoryResourcePath: GitHubURI

  """The HTTP URL for the repository"""
  repositoryUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI

  """The visibility of the repository"""
  visibility: GitHubRepoRemoveMemberAuditEntryVisibility
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

enum GitHubRepoDestroyAuditEntryVisibility {
  """The repository is visible only to users in the same business."""
  INTERNAL

  """The repository is visible only to those with explicit access."""
  PRIVATE

  """The repository is visible to everyone."""
  PUBLIC
}

"""Audit log entry for a repo.destroy event."""
type GitHubRepoDestroyAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOrganizationAuditEntryData & GitHubRepositoryAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """"""
  id: ID!

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The repository associated with the action"""
  repository: GitHubRepository

  """The name of the repository"""
  repositoryName: String

  """The HTTP path for the repository"""
  repositoryResourcePath: GitHubURI

  """The HTTP URL for the repository"""
  repositoryUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI

  """The visibility of the repository"""
  visibility: GitHubRepoDestroyAuditEntryVisibility
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

enum GitHubRepoCreateAuditEntryVisibility {
  """The repository is visible only to users in the same business."""
  INTERNAL

  """The repository is visible only to those with explicit access."""
  PRIVATE

  """The repository is visible to everyone."""
  PUBLIC
}

"""Audit log entry for a repo.create event."""
type GitHubRepoCreateAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOrganizationAuditEntryData & GitHubRepositoryAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """The name of the parent repository for this forked repository."""
  forkParentName: String

  """The name of the root repository for this network."""
  forkSourceName: String

  """"""
  id: ID!

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The repository associated with the action"""
  repository: GitHubRepository

  """The name of the repository"""
  repositoryName: String

  """The HTTP path for the repository"""
  repositoryResourcePath: GitHubURI

  """The HTTP URL for the repository"""
  repositoryUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI

  """The visibility of the repository"""
  visibility: GitHubRepoCreateAuditEntryVisibility
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Audit log entry for a repo.config.unlock_anonymous_git_access event."""
type GitHubRepoConfigUnlockAnonymousGitAccessAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOrganizationAuditEntryData & GitHubRepositoryAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """"""
  id: ID!

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The repository associated with the action"""
  repository: GitHubRepository

  """The name of the repository"""
  repositoryName: String

  """The HTTP path for the repository"""
  repositoryResourcePath: GitHubURI

  """The HTTP URL for the repository"""
  repositoryUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Audit log entry for a repo.config.lock_anonymous_git_access event."""
type GitHubRepoConfigLockAnonymousGitAccessAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOrganizationAuditEntryData & GitHubRepositoryAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """"""
  id: ID!

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The repository associated with the action"""
  repository: GitHubRepository

  """The name of the repository"""
  repositoryName: String

  """The HTTP path for the repository"""
  repositoryResourcePath: GitHubURI

  """The HTTP URL for the repository"""
  repositoryUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Audit log entry for a repo.config.enable_sockpuppet_disallowed event."""
type GitHubRepoConfigEnableSockpuppetDisallowedAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOrganizationAuditEntryData & GitHubRepositoryAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """"""
  id: ID!

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The repository associated with the action"""
  repository: GitHubRepository

  """The name of the repository"""
  repositoryName: String

  """The HTTP path for the repository"""
  repositoryResourcePath: GitHubURI

  """The HTTP URL for the repository"""
  repositoryUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Audit log entry for a repo.config.enable_contributors_only event."""
type GitHubRepoConfigEnableContributorsOnlyAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOrganizationAuditEntryData & GitHubRepositoryAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """"""
  id: ID!

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The repository associated with the action"""
  repository: GitHubRepository

  """The name of the repository"""
  repositoryName: String

  """The HTTP path for the repository"""
  repositoryResourcePath: GitHubURI

  """The HTTP URL for the repository"""
  repositoryUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Audit log entry for a repo.config.enable_collaborators_only event."""
type GitHubRepoConfigEnableCollaboratorsOnlyAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOrganizationAuditEntryData & GitHubRepositoryAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """"""
  id: ID!

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The repository associated with the action"""
  repository: GitHubRepository

  """The name of the repository"""
  repositoryName: String

  """The HTTP path for the repository"""
  repositoryResourcePath: GitHubURI

  """The HTTP URL for the repository"""
  repositoryUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Audit log entry for a repo.config.enable_anonymous_git_access event."""
type GitHubRepoConfigEnableAnonymousGitAccessAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOrganizationAuditEntryData & GitHubRepositoryAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """"""
  id: ID!

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The repository associated with the action"""
  repository: GitHubRepository

  """The name of the repository"""
  repositoryName: String

  """The HTTP path for the repository"""
  repositoryResourcePath: GitHubURI

  """The HTTP URL for the repository"""
  repositoryUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Audit log entry for a repo.config.disable_sockpuppet_disallowed event."""
type GitHubRepoConfigDisableSockpuppetDisallowedAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOrganizationAuditEntryData & GitHubRepositoryAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """"""
  id: ID!

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The repository associated with the action"""
  repository: GitHubRepository

  """The name of the repository"""
  repositoryName: String

  """The HTTP path for the repository"""
  repositoryResourcePath: GitHubURI

  """The HTTP URL for the repository"""
  repositoryUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Audit log entry for a repo.config.disable_contributors_only event."""
type GitHubRepoConfigDisableContributorsOnlyAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOrganizationAuditEntryData & GitHubRepositoryAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """"""
  id: ID!

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The repository associated with the action"""
  repository: GitHubRepository

  """The name of the repository"""
  repositoryName: String

  """The HTTP path for the repository"""
  repositoryResourcePath: GitHubURI

  """The HTTP URL for the repository"""
  repositoryUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Audit log entry for a repo.config.disable_collaborators_only event."""
type GitHubRepoConfigDisableCollaboratorsOnlyAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOrganizationAuditEntryData & GitHubRepositoryAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """"""
  id: ID!

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The repository associated with the action"""
  repository: GitHubRepository

  """The name of the repository"""
  repositoryName: String

  """The HTTP path for the repository"""
  repositoryResourcePath: GitHubURI

  """The HTTP URL for the repository"""
  repositoryUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Audit log entry for a repo.config.disable_anonymous_git_access event."""
type GitHubRepoConfigDisableAnonymousGitAccessAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOrganizationAuditEntryData & GitHubRepositoryAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """"""
  id: ID!

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The repository associated with the action"""
  repository: GitHubRepository

  """The name of the repository"""
  repositoryName: String

  """The HTTP path for the repository"""
  repositoryResourcePath: GitHubURI

  """The HTTP URL for the repository"""
  repositoryUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

enum GitHubRepoChangeMergeSettingAuditEntryMergeType {
  """The pull request is added to the base branch in a merge commit."""
  MERGE

  """
  Commits from the pull request are added onto the base branch individually without a merge commit.
  """
  REBASE

  """
  The pull request's commits are squashed into a single commit before they are merged to the base branch.
  """
  SQUASH
}

"""Audit log entry for a repo.change_merge_setting event."""
type GitHubRepoChangeMergeSettingAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOrganizationAuditEntryData & GitHubRepositoryAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """"""
  id: ID!

  """
  Whether the change was to enable (true) or disable (false) the merge type
  """
  isEnabled: Boolean

  """The merge method affected by the change"""
  mergeType: GitHubRepoChangeMergeSettingAuditEntryMergeType

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The repository associated with the action"""
  repository: GitHubRepository

  """The name of the repository"""
  repositoryName: String

  """The HTTP path for the repository"""
  repositoryResourcePath: GitHubURI

  """The HTTP URL for the repository"""
  repositoryUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

enum GitHubRepoArchivedAuditEntryVisibility {
  """The repository is visible only to users in the same business."""
  INTERNAL

  """The repository is visible only to those with explicit access."""
  PRIVATE

  """The repository is visible to everyone."""
  PUBLIC
}

"""Audit log entry for a repo.archived event."""
type GitHubRepoArchivedAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOrganizationAuditEntryData & GitHubRepositoryAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """"""
  id: ID!

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The repository associated with the action"""
  repository: GitHubRepository

  """The name of the repository"""
  repositoryName: String

  """The HTTP path for the repository"""
  repositoryResourcePath: GitHubURI

  """The HTTP URL for the repository"""
  repositoryUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI

  """The visibility of the repository"""
  visibility: GitHubRepoArchivedAuditEntryVisibility
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Audit log entry for a repo.remove_topic event."""
type GitHubRepoRemoveTopicAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOrganizationAuditEntryData & GitHubRepositoryAuditEntryData & GitHubTopicAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """"""
  id: ID!

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The repository associated with the action"""
  repository: GitHubRepository

  """The name of the repository"""
  repositoryName: String

  """The HTTP path for the repository"""
  repositoryResourcePath: GitHubURI

  """The HTTP URL for the repository"""
  repositoryUrl: GitHubURI

  """The name of the topic added to the repository"""
  topic: GitHubTopic

  """The name of the topic added to the repository"""
  topicName: String

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Metadata for an audit entry with a topic."""
interface GitHubTopicAuditEntryData {
  """The name of the topic added to the repository"""
  topic: GitHubTopic

  """The name of the topic added to the repository"""
  topicName: String
}

"""Types that can be pinned to a profile page."""
union GitHubPinnableItem = GitHubGist | GitHubRepository

"""Represents an owner of a Repository."""
interface GitHubRepositoryOwner {
  """A URL pointing to the owner's public avatar."""
  avatarUrl(
    """The size of the resulting square image."""
    size: Int
  ): GitHubURI!

  """"""
  id: ID!

  """The username used to login."""
  login: String!

  """A list of repositories that the user owns."""
  repositories(
    """If non-null, filters repositories according to privacy"""
    privacy: GitHubRepositoryPrivacy

    """Ordering options for repositories returned from the connection"""
    orderBy: GitHubRepositoryOrder

    """
    Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns.
    """
    affiliations: [GitHubRepositoryAffiliation]

    """
    Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns.
    """
    ownerAffiliations: [GitHubRepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean
  ): GitHubRepositoryConnection!

  """Find Repository."""
  repository(
    """Name of Repository to find."""
    name: String!
  ): GitHubRepository

  """The HTTP URL for the owner."""
  resourcePath: GitHubURI!

  """The HTTP URL for the owner."""
  url: GitHubURI!
}

enum GitHubGistOrderField {
  """Order gists by creation time"""
  CREATED_AT

  """Order gists by update time"""
  UPDATED_AT

  """Order gists by push time"""
  PUSHED_AT
}

"""Ordering options for gist connections"""
input GitHubGistOrder {
  """The field to order repositories by."""
  field: GitHubGistOrderField!

  """The ordering direction."""
  direction: GitHubOrderDirection!
}

"""An edge in a connection."""
type GitHubGistEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubGist
}

"""The connection type for Gist."""
type GitHubGistConnection {
  """A list of edges."""
  edges: [GitHubGistEdge]

  """A list of nodes."""
  nodes: [GitHubGist]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Represents a given language found in repositories."""
type GitHubLanguage implements OneGraphNode & GitHubNode {
  """The color defined for the current language."""
  color: String

  """"""
  id: ID!

  """The name of the current language."""
  name: String!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""A file in a gist."""
type GitHubGistFile {
  """
  The file name encoded to remove characters that are invalid in URL paths.
  """
  encodedName: String

  """The gist file encoding."""
  encoding: String

  """The file extension from the file name."""
  extension: String

  """Indicates if this file is an image."""
  isImage: Boolean!

  """Whether the file's contents were truncated."""
  isTruncated: Boolean!

  """The programming language this file is written in."""
  language: GitHubLanguage

  """The gist file name."""
  name: String

  """The gist file size in bytes."""
  size: Int

  """UTF8 text data or null if the file is binary"""
  text(
    """Optionally truncate the returned file to this length."""
    truncate: Int
  ): String
}

"""A subject that may be upvoted."""
interface GitHubVotable {
  """Number of upvotes that this subject has received."""
  upvoteCount: Int!

  """
  Whether or not the current user can add or remove an upvote on this subject.
  """
  viewerCanUpvote: Boolean!

  """Whether or not the current user has already upvoted this subject."""
  viewerHasUpvoted: Boolean!
}

"""A public description of a Marketplace category."""
type GitHubMarketplaceCategory implements OneGraphNode & GitHubNode {
  """The category's description."""
  description: String

  """
  The technical description of how apps listed in this category work with GitHub.
  """
  howItWorks: String

  """"""
  id: ID!

  """The category's name."""
  name: String!

  """How many Marketplace listings have this as their primary category."""
  primaryListingCount: Int!

  """The HTTP path for this Marketplace category."""
  resourcePath: GitHubURI!

  """How many Marketplace listings have this as their secondary category."""
  secondaryListingCount: Int!

  """The short name of the category used in its URL."""
  slug: String!

  """The HTTP URL for this Marketplace category."""
  url: GitHubURI!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""A listing in the GitHub integration marketplace."""
type GitHubMarketplaceListing implements OneGraphNode & GitHubNode {
  """The GitHub App this listing represents."""
  app: GitHubApp

  """URL to the listing owner's company site."""
  companyUrl: GitHubURI

  """
  The HTTP path for configuring access to the listing's integration or OAuth app
  """
  configurationResourcePath: GitHubURI!

  """
  The HTTP URL for configuring access to the listing's integration or OAuth app
  """
  configurationUrl: GitHubURI!

  """URL to the listing's documentation."""
  documentationUrl: GitHubURI

  """The listing's detailed description."""
  extendedDescription: String

  """The listing's detailed description rendered to HTML."""
  extendedDescriptionHTML: GitHubHTML!

  """The listing's introductory description."""
  fullDescription: String!

  """The listing's introductory description rendered to HTML."""
  fullDescriptionHTML: GitHubHTML!

  """Does this listing have any plans with a free trial?"""
  hasPublishedFreeTrialPlans: Boolean!

  """Does this listing have a terms of service link?"""
  hasTermsOfService: Boolean!

  """Whether the creator of the app is a verified org"""
  hasVerifiedOwner: Boolean!

  """A technical description of how this app works with GitHub."""
  howItWorks: String

  """The listing's technical description rendered to HTML."""
  howItWorksHTML: GitHubHTML!

  """"""
  id: ID!

  """URL to install the product to the viewer's account or organization."""
  installationUrl: GitHubURI

  """Whether this listing's app has been installed for the current viewer"""
  installedForViewer: Boolean!

  """Whether this listing has been removed from the Marketplace."""
  isArchived: Boolean!

  """
  Whether this listing is still an editable draft that has not been submitted for review and is not publicly visible in the Marketplace.
  """
  isDraft: Boolean!

  """
  Whether the product this listing represents is available as part of a paid plan.
  """
  isPaid: Boolean!

  """Whether this listing has been approved for display in the Marketplace."""
  isPublic: Boolean!

  """
  Whether this listing has been rejected by GitHub for display in the Marketplace.
  """
  isRejected: Boolean!

  """
  Whether this listing has been approved for unverified display in the Marketplace.
  """
  isUnverified: Boolean!

  """
  Whether this draft listing has been submitted for review for approval to be unverified in the Marketplace.
  """
  isUnverifiedPending: Boolean!

  """
  Whether this draft listing has been submitted for review from GitHub for approval to be verified in the Marketplace.
  """
  isVerificationPendingFromDraft: Boolean!

  """
  Whether this unverified listing has been submitted for review from GitHub for approval to be verified in the Marketplace.
  """
  isVerificationPendingFromUnverified: Boolean!

  """
  Whether this listing has been approved for verified display in the Marketplace.
  """
  isVerified: Boolean!

  """The hex color code, without the leading '#', for the logo background."""
  logoBackgroundColor: String!

  """URL for the listing's logo image."""
  logoUrl(
    """The size in pixels of the resulting square image."""
    size: Int = 400
  ): GitHubURI

  """The listing's full name."""
  name: String!

  """
  The listing's very short description without a trailing period or ampersands.
  """
  normalizedShortDescription: String!

  """URL to the listing's detailed pricing."""
  pricingUrl: GitHubURI

  """The category that best describes the listing."""
  primaryCategory: GitHubMarketplaceCategory!

  """
  URL to the listing's privacy policy, may return an empty string for listings that do not require a privacy policy URL.
  """
  privacyPolicyUrl: GitHubURI!

  """The HTTP path for the Marketplace listing."""
  resourcePath: GitHubURI!

  """The URLs for the listing's screenshots."""
  screenshotUrls: [String]!

  """An alternate category that describes the listing."""
  secondaryCategory: GitHubMarketplaceCategory

  """The listing's very short description."""
  shortDescription: String!

  """The short name of the listing used in its URL."""
  slug: String!

  """URL to the listing's status page."""
  statusUrl: GitHubURI

  """An email address for support for this listing's app."""
  supportEmail: String

  """
  Either a URL or an email address for support for this listing's app, may return an empty string for listings that do not require a support URL.
  """
  supportUrl: GitHubURI!

  """URL to the listing's terms of service."""
  termsOfServiceUrl: GitHubURI

  """The HTTP URL for the Marketplace listing."""
  url: GitHubURI!

  """Can the current viewer add plans for this Marketplace listing."""
  viewerCanAddPlans: Boolean!

  """Can the current viewer approve this Marketplace listing."""
  viewerCanApprove: Boolean!

  """Can the current viewer delist this Marketplace listing."""
  viewerCanDelist: Boolean!

  """Can the current viewer edit this Marketplace listing."""
  viewerCanEdit: Boolean!

  """
  Can the current viewer edit the primary and secondary category of this
  Marketplace listing.
  
  """
  viewerCanEditCategories: Boolean!

  """Can the current viewer edit the plans for this Marketplace listing."""
  viewerCanEditPlans: Boolean!

  """
  Can the current viewer return this Marketplace listing to draft state
  so it becomes editable again.
  
  """
  viewerCanRedraft: Boolean!

  """
  Can the current viewer reject this Marketplace listing by returning it to
  an editable draft state or rejecting it entirely.
  
  """
  viewerCanReject: Boolean!

  """
  Can the current viewer request this listing be reviewed for display in
  the Marketplace as verified.
  
  """
  viewerCanRequestApproval: Boolean!

  """
  Indicates whether the current user has an active subscription to this Marketplace listing.
  
  """
  viewerHasPurchased: Boolean!

  """
  Indicates if the current user has purchased a subscription to this Marketplace listing
  for all of the organizations the user owns.
  
  """
  viewerHasPurchasedForAllOrganizations: Boolean!

  """
  Does the current viewer role allow them to administer this Marketplace listing.
  
  """
  viewerIsListingAdmin: Boolean!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""The results of a search."""
union GitHubSearchResultItem = GitHubApp | GitHubDiscussion | GitHubIssue | GitHubMarketplaceListing | GitHubOrganization | GitHubPullRequest | GitHubRepository | GitHubUser

enum GitHubSubscriptionState {
  """The User is only notified when participating or @mentioned."""
  UNSUBSCRIBED

  """The User is notified of all conversations."""
  SUBSCRIBED

  """The User is never notified."""
  IGNORED
}

enum GitHubIssueTimelineItemsItemType {
  """Represents a comment on an Issue."""
  ISSUE_COMMENT

  """Represents a mention made by one issue or pull request to another."""
  CROSS_REFERENCED_EVENT

  """
  Represents a 'added_to_project' event on a given issue or pull request.
  """
  ADDED_TO_PROJECT_EVENT

  """Represents an 'assigned' event on any assignable object."""
  ASSIGNED_EVENT

  """Represents a 'closed' event on any `Closable`."""
  CLOSED_EVENT

  """Represents a 'comment_deleted' event on a given issue or pull request."""
  COMMENT_DELETED_EVENT

  """Represents a 'connected' event on a given issue or pull request."""
  CONNECTED_EVENT

  """
  Represents a 'converted_note_to_issue' event on a given issue or pull request.
  """
  CONVERTED_NOTE_TO_ISSUE_EVENT

  """Represents a 'demilestoned' event on a given issue or pull request."""
  DEMILESTONED_EVENT

  """Represents a 'disconnected' event on a given issue or pull request."""
  DISCONNECTED_EVENT

  """Represents a 'labeled' event on a given issue or pull request."""
  LABELED_EVENT

  """Represents a 'locked' event on a given issue or pull request."""
  LOCKED_EVENT

  """
  Represents a 'marked_as_duplicate' event on a given issue or pull request.
  """
  MARKED_AS_DUPLICATE_EVENT

  """Represents a 'mentioned' event on a given issue or pull request."""
  MENTIONED_EVENT

  """Represents a 'milestoned' event on a given issue or pull request."""
  MILESTONED_EVENT

  """
  Represents a 'moved_columns_in_project' event on a given issue or pull request.
  """
  MOVED_COLUMNS_IN_PROJECT_EVENT

  """Represents a 'pinned' event on a given issue or pull request."""
  PINNED_EVENT

  """Represents a 'referenced' event on a given `ReferencedSubject`."""
  REFERENCED_EVENT

  """
  Represents a 'removed_from_project' event on a given issue or pull request.
  """
  REMOVED_FROM_PROJECT_EVENT

  """Represents a 'renamed' event on a given issue or pull request"""
  RENAMED_TITLE_EVENT

  """Represents a 'reopened' event on any `Closable`."""
  REOPENED_EVENT

  """Represents a 'subscribed' event on a given `Subscribable`."""
  SUBSCRIBED_EVENT

  """Represents a 'transferred' event on a given issue or pull request."""
  TRANSFERRED_EVENT

  """Represents an 'unassigned' event on any assignable object."""
  UNASSIGNED_EVENT

  """Represents an 'unlabeled' event on a given issue or pull request."""
  UNLABELED_EVENT

  """Represents an 'unlocked' event on a given issue or pull request."""
  UNLOCKED_EVENT

  """Represents a 'user_blocked' event on a given user."""
  USER_BLOCKED_EVENT

  """
  Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
  """
  UNMARKED_AS_DUPLICATE_EVENT

  """Represents an 'unpinned' event on a given issue or pull request."""
  UNPINNED_EVENT

  """Represents an 'unsubscribed' event on a given `Subscribable`."""
  UNSUBSCRIBED_EVENT
}

"""An edge in a connection."""
type GitHubIssueTimelineItemsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubIssueTimelineItems
}

"""The connection type for IssueTimelineItems."""
type GitHubIssueTimelineItemsConnection {
  """A list of edges."""
  edges: [GitHubIssueTimelineItemsEdge]

  """
  Identifies the count of items after applying `before` and `after` filters.
  """
  filteredCount: Int!

  """A list of nodes."""
  nodes: [GitHubIssueTimelineItems]

  """
  Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing.
  """
  pageCount: Int!

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!

  """Identifies the date and time when the timeline was last updated."""
  updatedAt: GitHubDateTime!
}

"""An edge in a connection."""
type GitHubIssueTimelineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubIssueTimelineItem
}

"""The connection type for IssueTimelineItem."""
type GitHubIssueTimelineConnection {
  """A list of edges."""
  edges: [GitHubIssueTimelineItemEdge]

  """A list of nodes."""
  nodes: [GitHubIssueTimelineItem]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Comments that can be updated."""
interface GitHubUpdatableComment {
  """Reasons why the current viewer can not update this comment."""
  viewerCannotUpdateReasons: [GitHubCommentCannotUpdateReason!]!
}

enum GitHubUserBlockDuration {
  """The user was blocked for 1 day"""
  ONE_DAY

  """The user was blocked for 3 days"""
  THREE_DAYS

  """The user was blocked for 7 days"""
  ONE_WEEK

  """The user was blocked for 30 days"""
  ONE_MONTH

  """The user was blocked permanently"""
  PERMANENT
}

"""Represents a 'user_blocked' event on a given user."""
type GitHubUserBlockedEvent implements OneGraphNode & GitHubNode {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """Number of days that the user was blocked for."""
  blockDuration: GitHubUserBlockDuration!

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """"""
  id: ID!

  """The user who was blocked."""
  subject: GitHubUser
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Represents an 'unsubscribed' event on a given `Subscribable`."""
type GitHubUnsubscribedEvent implements OneGraphNode & GitHubNode {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """"""
  id: ID!

  """Object referenced by event."""
  subscribable: GitHubSubscribable!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Represents an 'unpinned' event on a given issue or pull request."""
type GitHubUnpinnedEvent implements OneGraphNode & GitHubNode {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """"""
  id: ID!

  """Identifies the issue associated with the event."""
  issue: GitHubIssue!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""
Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
"""
type GitHubUnmarkedAsDuplicateEvent implements OneGraphNode & GitHubNode {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """
  The authoritative issue or pull request which has been duplicated by another.
  """
  canonical: GitHubIssueOrPullRequest

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """
  The issue or pull request which has been marked as a duplicate of another.
  """
  duplicate: GitHubIssueOrPullRequest

  """"""
  id: ID!

  """Canonical and duplicate belong to different repositories."""
  isCrossRepository: Boolean!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Represents an 'unlocked' event on a given issue or pull request."""
type GitHubUnlockedEvent implements OneGraphNode & GitHubNode {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """"""
  id: ID!

  """Object that was unlocked."""
  lockable: GitHubLockable!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Represents an 'unlabeled' event on a given issue or pull request."""
type GitHubUnlabeledEvent implements OneGraphNode & GitHubNode {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """"""
  id: ID!

  """Identifies the label associated with the 'unlabeled' event."""
  label: GitHubLabel!

  """Identifies the `Labelable` associated with the event."""
  labelable: GitHubLabelable!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Represents an 'unassigned' event on any assignable object."""
type GitHubUnassignedEvent implements OneGraphNode & GitHubNode {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """Identifies the assignable associated with the event."""
  assignable: GitHubAssignable!

  """Identifies the user or mannequin that was unassigned."""
  assignee: GitHubAssignee

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """"""
  id: ID!

  """Identifies the subject (user) who was unassigned."""
  user: GitHubUser @deprecated(reason: "Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.")
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Represents a 'transferred' event on a given issue or pull request."""
type GitHubTransferredEvent implements OneGraphNode & GitHubNode {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """The repository this came from"""
  fromRepository: GitHubRepository

  """"""
  id: ID!

  """Identifies the issue associated with the event."""
  issue: GitHubIssue!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Entities that can be subscribed to for web and email notifications."""
interface GitHubSubscribable {
  """"""
  id: ID!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!

  """
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  """
  viewerSubscription: GitHubSubscriptionState
}

"""Represents a 'subscribed' event on a given `Subscribable`."""
type GitHubSubscribedEvent implements OneGraphNode & GitHubNode {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """"""
  id: ID!

  """Object referenced by event."""
  subscribable: GitHubSubscribable!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Represents an 'review_requested' event on a given pull request."""
type GitHubReviewRequestedEvent implements OneGraphNode & GitHubNode {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """"""
  id: ID!

  """PullRequest referenced by event."""
  pullRequest: GitHubPullRequest!

  """Identifies the reviewer whose review was requested."""
  requestedReviewer: GitHubRequestedReviewer
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Types that can be requested reviewers."""
union GitHubRequestedReviewer = GitHubMannequin | GitHubTeam | GitHubUser

"""Represents an 'review_request_removed' event on a given pull request."""
type GitHubReviewRequestRemovedEvent implements OneGraphNode & GitHubNode {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """"""
  id: ID!

  """PullRequest referenced by event."""
  pullRequest: GitHubPullRequest!

  """Identifies the reviewer whose review request was removed."""
  requestedReviewer: GitHubRequestedReviewer
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Represents a 'reopened' event on any `Closable`."""
type GitHubReopenedEvent implements OneGraphNode & GitHubNode {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """Object that was reopened."""
  closable: GitHubClosable!

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """"""
  id: ID!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An object which has a renamable title"""
union GitHubRenamedTitleSubject = GitHubIssue | GitHubPullRequest

"""Represents a 'renamed' event on a given issue or pull request"""
type GitHubRenamedTitleEvent implements OneGraphNode & GitHubNode {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """Identifies the current title of the issue or pull request."""
  currentTitle: String!

  """"""
  id: ID!

  """Identifies the previous title of the issue or pull request."""
  previousTitle: String!

  """Subject that was renamed."""
  subject: GitHubRenamedTitleSubject!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""
Represents a 'removed_from_project' event on a given issue or pull request.
"""
type GitHubRemovedFromProjectEvent implements OneGraphNode & GitHubNode {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """Identifies the primary key from the database."""
  databaseId: Int

  """"""
  id: ID!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Represents a 'referenced' event on a given `ReferencedSubject`."""
type GitHubReferencedEvent implements OneGraphNode & GitHubNode {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """Identifies the commit associated with the 'referenced' event."""
  commit: GitHubCommit

  """Identifies the repository associated with the 'referenced' event."""
  commitRepository: GitHubRepository!

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """"""
  id: ID!

  """Reference originated in a different repository."""
  isCrossRepository: Boolean!

  """
  Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference.
  """
  isDirectReference: Boolean!

  """Object referenced by event."""
  subject: GitHubReferencedSubject!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""
Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
"""
type GitHubPullRequestRevisionMarker {
  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """The last commit the viewer has seen."""
  lastSeenCommit: GitHubCommit!

  """The pull request to which the marker belongs."""
  pullRequest: GitHubPullRequest!
}

enum GitHubDiffSide {
  """The left side of the diff."""
  LEFT

  """The right side of the diff."""
  RIGHT
}

"""A threaded list of comments for a given pull request."""
type GitHubPullRequestReviewThread implements OneGraphNode & GitHubNode {
  """A list of pull request comments associated with the thread."""
  comments(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Skips the first _n_ elements in the list."""
    skip: Int
  ): GitHubPullRequestReviewCommentConnection!

  """The side of the diff on which this thread was placed."""
  diffSide: GitHubDiffSide!

  """"""
  id: ID!

  """Whether or not the thread has been collapsed (outdated or resolved)"""
  isCollapsed: Boolean!

  """Indicates whether this thread was outdated by newer changes."""
  isOutdated: Boolean!

  """Whether this thread has been resolved"""
  isResolved: Boolean!

  """The line in the file to which this thread refers"""
  line: Int

  """The original line in the file to which this thread refers."""
  originalLine: Int

  """
  The original start line in the file to which this thread refers (multi-line only).
  """
  originalStartLine: Int

  """Identifies the file path of this thread."""
  path: String!

  """Identifies the pull request associated with this thread."""
  pullRequest: GitHubPullRequest!

  """Identifies the repository associated with this thread."""
  repository: GitHubRepository!

  """The user who resolved this thread"""
  resolvedBy: GitHubUser

  """
  The side of the diff that the first line of the thread starts on (multi-line only)
  """
  startDiffSide: GitHubDiffSide

  """
  The start line in the file to which this thread refers (multi-line only)
  """
  startLine: Int

  """Indicates whether the current viewer can reply to this thread."""
  viewerCanReply: Boolean!

  """Whether or not the viewer can resolve this thread"""
  viewerCanResolve: Boolean!

  """Whether or not the viewer can unresolve this thread"""
  viewerCanUnresolve: Boolean!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

enum GitHubSecurityVulnerabilityOrderField {
  """Order vulnerability by update time"""
  UPDATED_AT
}

"""Ordering options for security vulnerability connections"""
input GitHubSecurityVulnerabilityOrder {
  """The field to order security vulnerabilities by."""
  field: GitHubSecurityVulnerabilityOrderField!

  """The ordering direction."""
  direction: GitHubOrderDirection!
}

enum GitHubSecurityAdvisoryEcosystem {
  """Ruby gems hosted at RubyGems.org"""
  RUBYGEMS

  """JavaScript packages hosted at npmjs.com"""
  NPM

  """Python packages hosted at PyPI.org"""
  PIP

  """Java artifacts hosted at the Maven central repository"""
  MAVEN

  """.NET packages hosted at the NuGet Gallery"""
  NUGET

  """PHP packages hosted at packagist.org"""
  COMPOSER
}

"""An individual package"""
type GitHubSecurityAdvisoryPackage {
  """The ecosystem the package belongs to, e.g. RUBYGEMS, NPM"""
  ecosystem: GitHubSecurityAdvisoryEcosystem!

  """The package name"""
  name: String!
}

"""An individual package version"""
type GitHubSecurityAdvisoryPackageVersion {
  """The package name or version"""
  identifier: String!
}

"""An individual vulnerability within an Advisory"""
type GitHubSecurityVulnerability {
  """The Advisory associated with this Vulnerability"""
  advisory: GitHubSecurityAdvisory!

  """The first version containing a fix for the vulnerability"""
  firstPatchedVersion: GitHubSecurityAdvisoryPackageVersion

  """A description of the vulnerable package"""
  package: GitHubSecurityAdvisoryPackage!

  """The severity of the vulnerability within this package"""
  severity: GitHubSecurityAdvisorySeverity!

  """When the vulnerability was last updated"""
  updatedAt: GitHubDateTime!

  """
  A string that describes the vulnerable package versions.
  This string follows a basic syntax with a few forms.
  + `= 0.2.0` denotes a single vulnerable version.
  + `<= 1.0.8` denotes a version range up to and including the specified version
  + `< 0.1.11` denotes a version range up to, but excluding, the specified version
  + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
  + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
  
  """
  vulnerableVersionRange: String!
}

"""An edge in a connection."""
type GitHubSecurityVulnerabilityEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubSecurityVulnerability
}

"""The connection type for SecurityVulnerability."""
type GitHubSecurityVulnerabilityConnection {
  """A list of edges."""
  edges: [GitHubSecurityVulnerabilityEdge]

  """A list of nodes."""
  nodes: [GitHubSecurityVulnerability]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

enum GitHubSecurityAdvisorySeverity {
  """Low."""
  LOW

  """Moderate."""
  MODERATE

  """High."""
  HIGH

  """Critical."""
  CRITICAL
}

"""A GitHub Security Advisory Reference"""
type GitHubSecurityAdvisoryReference {
  """A publicly accessible reference"""
  url: GitHubURI!
}

"""A GitHub Security Advisory Identifier"""
type GitHubSecurityAdvisoryIdentifier {
  """The identifier type, e.g. GHSA, CVE"""
  type: String!

  """The identifier"""
  value: String!
}

"""A common weakness enumeration"""
type GitHubCWE implements OneGraphNode & GitHubNode {
  """The id of the CWE"""
  cweId: String!

  """A detailed description of this CWE"""
  description: String!

  """ID of the object."""
  id: ID!

  """The name of this CWE"""
  name: String!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An edge in a connection."""
type GitHubCWEEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubCWE
}

"""The connection type for CWE."""
type GitHubCWEConnection {
  """A list of edges."""
  edges: [GitHubCWEEdge]

  """A list of nodes."""
  nodes: [GitHubCWE]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""The Common Vulnerability Scoring System"""
type GitHubCVSS {
  """The CVSS score associated with this advisory"""
  score: Float!

  """The CVSS vector string associated with this advisory"""
  vectorString: String
}

"""A GitHub Security Advisory"""
type GitHubSecurityAdvisory implements OneGraphNode & GitHubNode {
  """The CVSS associated with this advisory"""
  cvss: GitHubCVSS!

  """CWEs associated with this Advisory"""
  cwes(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubCWEConnection!

  """Identifies the primary key from the database."""
  databaseId: Int

  """This is a long plaintext description of the advisory"""
  description: String!

  """The GitHub Security Advisory ID"""
  ghsaId: String!

  """"""
  id: ID!

  """A list of identifiers for this advisory"""
  identifiers: [GitHubSecurityAdvisoryIdentifier!]!

  """The permalink for the advisory's dependabot alerts page"""
  notificationsPermalink: GitHubURI

  """The organization that originated the advisory"""
  origin: String!

  """The permalink for the advisory"""
  permalink: GitHubURI

  """When the advisory was published"""
  publishedAt: GitHubDateTime!

  """A list of references for this advisory"""
  references: [GitHubSecurityAdvisoryReference!]!

  """The severity of the advisory"""
  severity: GitHubSecurityAdvisorySeverity!

  """A short plaintext summary of the advisory"""
  summary: String!

  """When the advisory was last updated"""
  updatedAt: GitHubDateTime!

  """Vulnerabilities associated with this Advisory"""
  vulnerabilities(
    """Ordering options for the returned topics."""
    orderBy: GitHubSecurityVulnerabilityOrder = {field: UPDATED_AT, direction: DESC}

    """An ecosystem to filter vulnerabilities by."""
    ecosystem: GitHubSecurityAdvisoryEcosystem

    """A package name to filter vulnerabilities by."""
    package: String

    """A list of severities to filter vulnerabilities by."""
    severities: [GitHubSecurityAdvisorySeverity!]

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubSecurityVulnerabilityConnection!

  """When the advisory was withdrawn, if it has been withdrawn"""
  withdrawnAt: GitHubDateTime
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""A alert for a repository with an affected vulnerability."""
type GitHubRepositoryVulnerabilityAlert implements OneGraphNode & GitHubNode & GitHubRepositoryNode {
  """When was the alert created?"""
  createdAt: GitHubDateTime!

  """The reason the alert was dismissed"""
  dismissReason: String

  """When was the alert dismissed?"""
  dismissedAt: GitHubDateTime

  """The user who dismissed the alert"""
  dismisser: GitHubUser

  """"""
  id: ID!

  """The associated repository"""
  repository: GitHubRepository!

  """The associated security advisory"""
  securityAdvisory: GitHubSecurityAdvisory

  """The associated security vulnerability"""
  securityVulnerability: GitHubSecurityVulnerability

  """The vulnerable manifest filename"""
  vulnerableManifestFilename: String!

  """The vulnerable manifest path"""
  vulnerableManifestPath: String!

  """The vulnerable requirements"""
  vulnerableRequirements: String
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

enum GitHubPinnedDiscussionGradient {
  """A gradient of red to orange"""
  RED_ORANGE

  """A gradient of blue to mint"""
  BLUE_MINT

  """A gradient of blue to purple"""
  BLUE_PURPLE

  """A gradient of pink to blue"""
  PINK_BLUE

  """A gradient of purple to coral"""
  PURPLE_CORAL
}

enum GitHubPinnedDiscussionPattern {
  """A solid dot pattern"""
  DOT_FILL

  """A plus sign pattern"""
  PLUS

  """A friendly octocat face pattern"""
  OCTOFACE

  """An upward-facing chevron pattern"""
  CHEVRON_UP

  """A hollow dot pattern"""
  DOT

  """A heart pattern"""
  HEART_FILL
}

"""
A Pinned Discussion is a discussion pinned to a repository's index page.
"""
type GitHubPinnedDiscussion implements OneGraphNode & GitHubNode & GitHubRepositoryNode {
  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """Identifies the primary key from the database."""
  databaseId: Int

  """The discussion that was pinned."""
  discussion: GitHubDiscussion!

  """Color stops of the chosen gradient"""
  gradientStopColors: [String!]!

  """"""
  id: ID!

  """Background texture pattern"""
  pattern: GitHubPinnedDiscussionPattern!

  """The actor that pinned this discussion."""
  pinnedBy: GitHubActor!

  """Preconfigured background gradient option"""
  preconfiguredGradient: GitHubPinnedDiscussionGradient

  """The repository associated with this node."""
  repository: GitHubRepository!

  """Identifies the date and time when the object was last updated."""
  updatedAt: GitHubDateTime!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""A category for discussions in a repository."""
type GitHubDiscussionCategory implements OneGraphNode & GitHubNode & GitHubRepositoryNode {
  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """A description of this category."""
  description: String

  """An emoji representing this category."""
  emoji: String!

  """This category's emoji rendered as HTML."""
  emojiHTML: GitHubHTML!

  """"""
  id: ID!

  """
  Whether or not discussions in this category support choosing an answer with the markDiscussionCommentAsAnswer mutation.
  """
  isAnswerable: Boolean!

  """The name of this category."""
  name: String!

  """The repository associated with this node."""
  repository: GitHubRepository!

  """Identifies the date and time when the object was last updated."""
  updatedAt: GitHubDateTime!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""A thread of comments on a commit."""
type GitHubCommitCommentThread implements OneGraphNode & GitHubNode & GitHubRepositoryNode {
  """The comments that exist in this thread."""
  comments(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubCommitCommentConnection!

  """The commit the comments were made on."""
  commit: GitHubCommit

  """"""
  id: ID!

  """The file the comments were made on."""
  path: String

  """The position in the diff for the commit that the comment was made on."""
  position: Int

  """The repository associated with this node."""
  repository: GitHubRepository!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Represents a object that belongs to a repository."""
interface GitHubRepositoryNode {
  """The repository associated with this node."""
  repository: GitHubRepository!
}

"""Represents a commit comment thread part of a pull request."""
type GitHubPullRequestCommitCommentThread implements OneGraphNode & GitHubNode & GitHubRepositoryNode {
  """The comments that exist in this thread."""
  comments(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubCommitCommentConnection!

  """The commit the comments were made on."""
  commit: GitHubCommit!

  """"""
  id: ID!

  """The file the comments were made on."""
  path: String

  """The position in the diff for the commit that the comment was made on."""
  position: Int

  """The pull request this commit comment thread belongs to"""
  pullRequest: GitHubPullRequest!

  """The repository associated with this node."""
  repository: GitHubRepository!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Represents a 'pinned' event on a given issue or pull request."""
type GitHubPinnedEvent implements OneGraphNode & GitHubNode {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """"""
  id: ID!

  """Identifies the issue associated with the event."""
  issue: GitHubIssue!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""
Represents a 'moved_columns_in_project' event on a given issue or pull request.
"""
type GitHubMovedColumnsInProjectEvent implements OneGraphNode & GitHubNode {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """Identifies the primary key from the database."""
  databaseId: Int

  """"""
  id: ID!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Represents a 'milestoned' event on a given issue or pull request."""
type GitHubMilestonedEvent implements OneGraphNode & GitHubNode {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """"""
  id: ID!

  """Identifies the milestone title associated with the 'milestoned' event."""
  milestoneTitle: String!

  """Object referenced by event."""
  subject: GitHubMilestoneItem!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Represents a 'mentioned' event on a given issue or pull request."""
type GitHubMentionedEvent implements OneGraphNode & GitHubNode {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """Identifies the primary key from the database."""
  databaseId: Int

  """"""
  id: ID!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Used for return value of Repository.issueOrPullRequest."""
union GitHubIssueOrPullRequest = GitHubIssue | GitHubPullRequest

"""
Represents a 'marked_as_duplicate' event on a given issue or pull request.
"""
type GitHubMarkedAsDuplicateEvent implements OneGraphNode & GitHubNode {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """
  The authoritative issue or pull request which has been duplicated by another.
  """
  canonical: GitHubIssueOrPullRequest

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """
  The issue or pull request which has been marked as a duplicate of another.
  """
  duplicate: GitHubIssueOrPullRequest

  """"""
  id: ID!

  """Canonical and duplicate belong to different repositories."""
  isCrossRepository: Boolean!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An object that can be locked."""
interface GitHubLockable {
  """Reason that the conversation was locked."""
  activeLockReason: GitHubLockReason

  """`true` if the object is locked"""
  locked: Boolean!
}

"""Represents a 'locked' event on a given issue or pull request."""
type GitHubLockedEvent implements OneGraphNode & GitHubNode {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """"""
  id: ID!

  """Reason that the conversation was locked (optional)."""
  lockReason: GitHubLockReason

  """Object that was locked."""
  lockable: GitHubLockable!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An object that can have labels assigned to it."""
interface GitHubLabelable {
  """A list of labels associated with the object."""
  labels(
    """Ordering options for labels returned from the connection."""
    orderBy: GitHubLabelOrder = {field: CREATED_AT, direction: ASC}

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubLabelConnection
}

"""Represents a 'labeled' event on a given issue or pull request."""
type GitHubLabeledEvent implements OneGraphNode & GitHubNode {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """"""
  id: ID!

  """Identifies the label associated with the 'labeled' event."""
  label: GitHubLabel!

  """Identifies the `Labelable` associated with the event."""
  labelable: GitHubLabelable!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Represents a 'head_ref_restored' event on a given pull request."""
type GitHubHeadRefRestoredEvent implements OneGraphNode & GitHubNode {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """"""
  id: ID!

  """PullRequest referenced by event."""
  pullRequest: GitHubPullRequest!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Represents a 'head_ref_force_pushed' event on a given pull request."""
type GitHubHeadRefForcePushedEvent implements OneGraphNode & GitHubNode {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """Identifies the after commit SHA for the 'head_ref_force_pushed' event."""
  afterCommit: GitHubCommit

  """
  Identifies the before commit SHA for the 'head_ref_force_pushed' event.
  """
  beforeCommit: GitHubCommit

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """"""
  id: ID!

  """PullRequest referenced by event."""
  pullRequest: GitHubPullRequest!

  """
  Identifies the fully qualified ref name for the 'head_ref_force_pushed' event.
  """
  ref: GitHubRef
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Represents a 'head_ref_deleted' event on a given pull request."""
type GitHubHeadRefDeletedEvent implements OneGraphNode & GitHubNode {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """Identifies the Ref associated with the `head_ref_deleted` event."""
  headRef: GitHubRef

  """
  Identifies the name of the Ref associated with the `head_ref_deleted` event.
  """
  headRefName: String!

  """"""
  id: ID!

  """PullRequest referenced by event."""
  pullRequest: GitHubPullRequest!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Represents a 'disconnected' event on a given issue or pull request."""
type GitHubDisconnectedEvent implements OneGraphNode & GitHubNode {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """"""
  id: ID!

  """Reference originated in a different repository."""
  isCrossRepository: Boolean!

  """Issue or pull request from which the issue was disconnected."""
  source: GitHubReferencedSubject!

  """Issue or pull request which was disconnected."""
  subject: GitHubReferencedSubject!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""
Represents a 'deployment_environment_changed' event on a given pull request.
"""
type GitHubDeploymentEnvironmentChangedEvent implements OneGraphNode & GitHubNode {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """The deployment status that updated the deployment environment."""
  deploymentStatus: GitHubDeploymentStatus!

  """"""
  id: ID!

  """PullRequest referenced by event."""
  pullRequest: GitHubPullRequest!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An edge in a connection."""
type GitHubDeploymentStatusEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubDeploymentStatus
}

"""The connection type for DeploymentStatus."""
type GitHubDeploymentStatusConnection {
  """A list of edges."""
  edges: [GitHubDeploymentStatusEdge]

  """A list of nodes."""
  nodes: [GitHubDeploymentStatus]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

enum GitHubDeploymentState {
  """The pending deployment was not updated after 30 minutes."""
  ABANDONED

  """The deployment is currently active."""
  ACTIVE

  """An inactive transient deployment."""
  DESTROYED

  """The deployment experienced an error."""
  ERROR

  """The deployment has failed."""
  FAILURE

  """The deployment is inactive."""
  INACTIVE

  """The deployment is pending."""
  PENDING

  """The deployment has queued"""
  QUEUED

  """The deployment is in progress."""
  IN_PROGRESS

  """The deployment is waiting."""
  WAITING
}

enum GitHubDeploymentStatusState {
  """The deployment is pending."""
  PENDING

  """The deployment was successful."""
  SUCCESS

  """The deployment has failed."""
  FAILURE

  """The deployment is inactive."""
  INACTIVE

  """The deployment experienced an error."""
  ERROR

  """The deployment is queued"""
  QUEUED

  """The deployment is in progress."""
  IN_PROGRESS

  """The deployment is waiting."""
  WAITING
}

"""Describes the status of a given deployment attempt."""
type GitHubDeploymentStatus implements OneGraphNode & GitHubNode {
  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """Identifies the actor who triggered the deployment."""
  creator: GitHubActor!

  """Identifies the deployment associated with status."""
  deployment: GitHubDeployment!

  """Identifies the description of the deployment."""
  description: String

  """Identifies the environment URL of the deployment."""
  environmentUrl: GitHubURI

  """"""
  id: ID!

  """Identifies the log URL of the deployment."""
  logUrl: GitHubURI

  """Identifies the current state of the deployment."""
  state: GitHubDeploymentStatusState!

  """Identifies the date and time when the object was last updated."""
  updatedAt: GitHubDateTime!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Represents triggered deployment instance."""
type GitHubDeployment implements OneGraphNode & GitHubNode {
  """Identifies the commit sha of the deployment."""
  commit: GitHubCommit

  """
  Identifies the oid of the deployment commit, even if the commit has been deleted.
  """
  commitOid: String!

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """Identifies the actor who triggered the deployment."""
  creator: GitHubActor!

  """Identifies the primary key from the database."""
  databaseId: Int

  """The deployment description."""
  description: String

  """The latest environment to which this deployment was made."""
  environment: String

  """"""
  id: ID!

  """The latest environment to which this deployment was made."""
  latestEnvironment: String

  """The latest status of this deployment."""
  latestStatus: GitHubDeploymentStatus

  """The original environment to which this deployment was made."""
  originalEnvironment: String

  """Extra information that a deployment system might need."""
  payload: String

  """
  Identifies the Ref of the deployment, if the deployment was created by ref.
  """
  ref: GitHubRef

  """Identifies the repository associated with the deployment."""
  repository: GitHubRepository!

  """The current state of the deployment."""
  state: GitHubDeploymentState

  """A list of statuses associated with the deployment."""
  statuses(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubDeploymentStatusConnection

  """The deployment task."""
  task: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: GitHubDateTime!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Represents a 'deployed' event on a given pull request."""
type GitHubDeployedEvent implements OneGraphNode & GitHubNode {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """Identifies the primary key from the database."""
  databaseId: Int

  """The deployment associated with the 'deployed' event."""
  deployment: GitHubDeployment!

  """"""
  id: ID!

  """PullRequest referenced by event."""
  pullRequest: GitHubPullRequest!

  """The ref associated with the 'deployed' event."""
  ref: GitHubRef
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Types that can be inside a Milestone."""
union GitHubMilestoneItem = GitHubIssue | GitHubPullRequest

"""Represents a 'demilestoned' event on a given issue or pull request."""
type GitHubDemilestonedEvent implements OneGraphNode & GitHubNode {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """"""
  id: ID!

  """
  Identifies the milestone title associated with the 'demilestoned' event.
  """
  milestoneTitle: String!

  """Object referenced by event."""
  subject: GitHubMilestoneItem!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""
Represents a 'converted_note_to_issue' event on a given issue or pull request.
"""
type GitHubConvertedNoteToIssueEvent implements OneGraphNode & GitHubNode {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """Identifies the primary key from the database."""
  databaseId: Int

  """"""
  id: ID!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

enum GitHubPullRequestReviewState {
  """A review that has not yet been submitted."""
  PENDING

  """An informational review."""
  COMMENTED

  """A review allowing the pull request to merge."""
  APPROVED

  """A review blocking the pull request from merging."""
  CHANGES_REQUESTED

  """A review that has been dismissed."""
  DISMISSED
}

"""
Represents a 'review_dismissed' event on a given issue or pull request.
"""
type GitHubReviewDismissedEvent implements OneGraphNode & GitHubNode & GitHubUniformResourceLocatable {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """Identifies the primary key from the database."""
  databaseId: Int

  """
  Identifies the optional message associated with the 'review_dismissed' event.
  """
  dismissalMessage: String

  """
  Identifies the optional message associated with the event, rendered to HTML.
  """
  dismissalMessageHTML: String

  """"""
  id: ID!

  """
  Identifies the previous state of the review with the 'review_dismissed' event.
  """
  previousReviewState: GitHubPullRequestReviewState!

  """PullRequest referenced by event."""
  pullRequest: GitHubPullRequest!

  """Identifies the commit which caused the review to become stale."""
  pullRequestCommit: GitHubPullRequestCommit

  """The HTTP path for this review dismissed event."""
  resourcePath: GitHubURI!

  """Identifies the review associated with the 'review_dismissed' event."""
  review: GitHubPullRequestReview

  """The HTTP URL for this review dismissed event."""
  url: GitHubURI!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""A repository-topic connects a repository to a topic."""
type GitHubRepositoryTopic implements OneGraphNode & GitHubNode & GitHubUniformResourceLocatable {
  """"""
  id: ID!

  """The HTTP path for this repository-topic."""
  resourcePath: GitHubURI!

  """The topic."""
  topic: GitHubTopic!

  """The HTTP URL for this repository-topic."""
  url: GitHubURI!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""A release asset contains the content for a release asset."""
type GitHubReleaseAsset implements OneGraphNode & GitHubNode {
  """The asset's content-type"""
  contentType: String!

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """The number of times this asset was downloaded"""
  downloadCount: Int!

  """
  Identifies the URL where you can download the release asset via the browser.
  """
  downloadUrl: GitHubURI!

  """"""
  id: ID!

  """Identifies the title of the release asset."""
  name: String!

  """Release that the asset is associated with"""
  release: GitHubRelease

  """The size (in bytes) of the asset"""
  size: Int!

  """Identifies the date and time when the object was last updated."""
  updatedAt: GitHubDateTime!

  """The user that performed the upload"""
  uploadedBy: GitHubUser!

  """Identifies the URL of the release asset."""
  url: GitHubURI!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An edge in a connection."""
type GitHubReleaseAssetEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubReleaseAsset
}

"""The connection type for ReleaseAsset."""
type GitHubReleaseAssetConnection {
  """A list of edges."""
  edges: [GitHubReleaseAssetEdge]

  """A list of nodes."""
  nodes: [GitHubReleaseAsset]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A release contains the content for a release."""
type GitHubRelease implements OneGraphNode & GitHubNode & GitHubUniformResourceLocatable {
  """The author of the release"""
  author: GitHubUser

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """The description of the release."""
  description: String

  """The description of this release rendered to HTML."""
  descriptionHTML: GitHubHTML

  """"""
  id: ID!

  """Whether or not the release is a draft"""
  isDraft: Boolean!

  """Whether or not the release is the latest releast"""
  isLatest: Boolean!

  """Whether or not the release is a prerelease"""
  isPrerelease: Boolean!

  """The title of the release."""
  name: String

  """Identifies the date and time when the release was created."""
  publishedAt: GitHubDateTime

  """List of releases assets which are dependent on this release."""
  releaseAssets(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """A list of names to filter the assets by."""
    name: String
  ): GitHubReleaseAssetConnection!

  """The repository that the release belongs to."""
  repository: GitHubRepository!

  """The HTTP path for this issue"""
  resourcePath: GitHubURI!

  """
  A description of the release, rendered to HTML without any links in it.
  """
  shortDescriptionHTML(
    """How many characters to return."""
    limit: Int = 200
  ): GitHubHTML

  """The Git tag the release points to"""
  tag: GitHubRef

  """The tag commit for this release."""
  tagCommit: GitHubCommit

  """The name of the release's Git tag"""
  tagName: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: GitHubDateTime!

  """The HTTP URL for this issue"""
  url: GitHubURI!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Represents a 'ready_for_review' event on a given pull request."""
type GitHubReadyForReviewEvent implements OneGraphNode & GitHubNode & GitHubUniformResourceLocatable {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """"""
  id: ID!

  """PullRequest referenced by event."""
  pullRequest: GitHubPullRequest!

  """The HTTP path for this ready for review event."""
  resourcePath: GitHubURI!

  """The HTTP URL for this ready for review event."""
  url: GitHubURI!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Represents a Git commit part of a pull request."""
type GitHubPullRequestCommit implements OneGraphNode & GitHubNode & GitHubUniformResourceLocatable {
  """The Git commit object"""
  commit: GitHubCommit!

  """"""
  id: ID!

  """The pull request this commit belongs to"""
  pullRequest: GitHubPullRequest!

  """The HTTP path for this pull request commit"""
  resourcePath: GitHubURI!

  """The HTTP URL for this pull request commit"""
  url: GitHubURI!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Represents a 'merged' event on a given pull request."""
type GitHubMergedEvent implements OneGraphNode & GitHubNode & GitHubUniformResourceLocatable {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """Identifies the commit associated with the `merge` event."""
  commit: GitHubCommit

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """"""
  id: ID!

  """Identifies the Ref associated with the `merge` event."""
  mergeRef: GitHubRef

  """Identifies the name of the Ref associated with the `merge` event."""
  mergeRefName: String!

  """PullRequest referenced by event."""
  pullRequest: GitHubPullRequest!

  """The HTTP path for this merged event."""
  resourcePath: GitHubURI!

  """The HTTP URL for this merged event."""
  url: GitHubURI!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Represents a mention made by one issue or pull request to another."""
type GitHubCrossReferencedEvent implements OneGraphNode & GitHubNode & GitHubUniformResourceLocatable {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """"""
  id: ID!

  """Reference originated in a different repository."""
  isCrossRepository: Boolean!

  """Identifies when the reference was made."""
  referencedAt: GitHubDateTime!

  """The HTTP path for this pull request."""
  resourcePath: GitHubURI!

  """Issue or pull request that made the reference."""
  source: GitHubReferencedSubject!

  """Issue or pull request to which the reference was made."""
  target: GitHubReferencedSubject!

  """The HTTP URL for this pull request."""
  url: GitHubURI!

  """Checks if the target will be closed when the source is merged."""
  willCloseTarget: Boolean!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Types that can be inside a StatusCheckRollup context."""
union GitHubStatusCheckRollupContext = GitHubCheckRun | GitHubStatusContext

enum GitHubStatusState {
  """Status is expected."""
  EXPECTED

  """Status is errored."""
  ERROR

  """Status is failing."""
  FAILURE

  """Status is pending."""
  PENDING

  """Status is successful."""
  SUCCESS
}

"""Represents an individual commit status context"""
type GitHubStatusContext implements OneGraphNode & GitHubNode & GitHubRequirableByPullRequest {
  """
  The avatar of the OAuth application or the user that created the status
  """
  avatarUrl(
    """The size of the resulting square image."""
    size: Int = 40
  ): GitHubURI

  """This commit this status context is attached to."""
  commit: GitHubCommit

  """The name of this status context."""
  context: String!

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """The actor who created this status context."""
  creator: GitHubActor

  """The description for this status context."""
  description: String

  """"""
  id: ID!

  """
  Whether this is required to pass before merging for a specific pull request.
  """
  isRequired(
    """The id of the pull request this is required for"""
    pullRequestId: ID

    """The number of the pull request this is required for"""
    pullRequestNumber: Int
  ): Boolean!

  """The state of this status context."""
  state: GitHubStatusState!

  """The URL for this status context."""
  targetUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Represents a type that can be required by a pull request for merging."""
interface GitHubRequirableByPullRequest {
  """
  Whether this is required to pass before merging for a specific pull request.
  """
  isRequired(
    """The id of the pull request this is required for"""
    pullRequestId: ID

    """The number of the pull request this is required for"""
    pullRequestNumber: Int
  ): Boolean!
}

"""A Git push."""
type GitHubPush implements OneGraphNode & GitHubNode {
  """"""
  id: ID!

  """The SHA after the push"""
  nextSha: GitHubGitObjectID

  """The permalink for this push."""
  permalink: GitHubURI!

  """The SHA before the push"""
  previousSha: GitHubGitObjectID

  """The user who pushed"""
  pusher: GitHubUser!

  """The repository that was pushed to"""
  repository: GitHubRepository!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

enum GitHubCheckConclusionState {
  """The check suite or run requires action."""
  ACTION_REQUIRED

  """The check suite or run has timed out."""
  TIMED_OUT

  """The check suite or run has been cancelled."""
  CANCELLED

  """The check suite or run has failed."""
  FAILURE

  """The check suite or run has succeeded."""
  SUCCESS

  """The check suite or run was neutral."""
  NEUTRAL

  """The check suite or run was skipped."""
  SKIPPED

  """The check suite or run has failed at startup."""
  STARTUP_FAILURE

  """
  The check suite or run was marked stale by GitHub. Only GitHub can use this conclusion.
  """
  STALE
}

enum GitHubCheckRunType {
  """Every check run available."""
  ALL

  """The latest check run."""
  LATEST
}

enum GitHubCheckStatusState {
  """The check suite or run has been queued."""
  QUEUED

  """The check suite or run is in progress."""
  IN_PROGRESS

  """The check suite or run has been completed."""
  COMPLETED

  """The check suite or run is in waiting state."""
  WAITING

  """The check suite or run has been requested."""
  REQUESTED
}

"""The filters that are available when fetching check runs."""
input GitHubCheckRunFilter {
  """Filters the check runs by this type."""
  checkType: GitHubCheckRunType

  """Filters the check runs created by this application ID."""
  appId: Int

  """Filters the check runs by this name."""
  checkName: String

  """Filters the check runs by this status."""
  status: GitHubCheckStatusState
}

"""An edge in a connection."""
type GitHubCheckRunEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubCheckRun
}

"""The connection type for CheckRun."""
type GitHubCheckRunConnection {
  """A list of edges."""
  edges: [GitHubCheckRunEdge]

  """A list of nodes."""
  nodes: [GitHubCheckRun]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A check suite."""
type GitHubCheckSuite implements OneGraphNode & GitHubNode {
  """The GitHub App which created this check suite."""
  app: GitHubApp

  """The name of the branch for this check suite."""
  branch: GitHubRef

  """The check runs associated with a check suite."""
  checkRuns(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filters the check runs by this type."""
    filterBy: GitHubCheckRunFilter
  ): GitHubCheckRunConnection

  """The commit for this check suite"""
  commit: GitHubCommit!

  """The conclusion of this check suite."""
  conclusion: GitHubCheckConclusionState

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """Identifies the primary key from the database."""
  databaseId: Int

  """"""
  id: ID!

  """A list of open pull requests matching the check suite."""
  matchingPullRequests(
    """A list of states to filter the pull requests by."""
    states: [GitHubPullRequestState!]

    """A list of label names to filter the pull requests by."""
    labels: [String!]

    """The head ref name to filter the pull requests by."""
    headRefName: String

    """The base ref name to filter the pull requests by."""
    baseRefName: String

    """Ordering options for pull requests returned from the connection."""
    orderBy: GitHubIssueOrder

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubPullRequestConnection

  """The push that triggered this check suite."""
  push: GitHubPush

  """The repository associated with this check suite."""
  repository: GitHubRepository!

  """The HTTP path for this check suite"""
  resourcePath: GitHubURI!

  """The status of this check suite."""
  status: GitHubCheckStatusState!

  """Identifies the date and time when the object was last updated."""
  updatedAt: GitHubDateTime!

  """The HTTP URL for this check suite"""
  url: GitHubURI!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""A character position in a check annotation."""
type GitHubCheckAnnotationPosition {
  """Column number (1 indexed)."""
  column: Int

  """Line number (1 indexed)."""
  line: Int!
}

"""An inclusive pair of positions for a check annotation."""
type GitHubCheckAnnotationSpan {
  """End position (inclusive)."""
  end: GitHubCheckAnnotationPosition!

  """Start position (inclusive)."""
  start: GitHubCheckAnnotationPosition!
}

enum GitHubCheckAnnotationLevel {
  """An annotation indicating an inescapable error."""
  FAILURE

  """An annotation indicating some information."""
  NOTICE

  """An annotation indicating an ignorable error."""
  WARNING
}

"""A single check annotation."""
type GitHubCheckAnnotation {
  """The annotation's severity level."""
  annotationLevel: GitHubCheckAnnotationLevel

  """The path to the file that this annotation was made on."""
  blobUrl: GitHubURI!

  """Identifies the primary key from the database."""
  databaseId: Int

  """The position of this annotation."""
  location: GitHubCheckAnnotationSpan!

  """The annotation's message."""
  message: String!

  """The path that this annotation was made on."""
  path: String!

  """Additional information about the annotation."""
  rawDetails: String

  """The annotation's title"""
  title: String
}

"""An edge in a connection."""
type GitHubCheckAnnotationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubCheckAnnotation
}

"""The connection type for CheckAnnotation."""
type GitHubCheckAnnotationConnection {
  """A list of edges."""
  edges: [GitHubCheckAnnotationEdge]

  """A list of nodes."""
  nodes: [GitHubCheckAnnotation]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A check run."""
type GitHubCheckRun implements OneGraphNode & GitHubNode & GitHubRequirableByPullRequest & GitHubUniformResourceLocatable {
  """The check run's annotations"""
  annotations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubCheckAnnotationConnection

  """The check suite that this run is a part of."""
  checkSuite: GitHubCheckSuite!

  """Identifies the date and time when the check run was completed."""
  completedAt: GitHubDateTime

  """The conclusion of the check run."""
  conclusion: GitHubCheckConclusionState

  """Identifies the primary key from the database."""
  databaseId: Int

  """
  The URL from which to find full details of the check run on the integrator's site.
  """
  detailsUrl: GitHubURI

  """A reference for the check run on the integrator's system."""
  externalId: String

  """"""
  id: ID!

  """
  Whether this is required to pass before merging for a specific pull request.
  """
  isRequired(
    """The id of the pull request this is required for"""
    pullRequestId: ID

    """The number of the pull request this is required for"""
    pullRequestNumber: Int
  ): Boolean!

  """The name of the check for this check run."""
  name: String!

  """The permalink to the check run summary."""
  permalink: GitHubURI!

  """The repository associated with this check run."""
  repository: GitHubRepository!

  """The HTTP path for this check run."""
  resourcePath: GitHubURI!

  """Identifies the date and time when the check run was started."""
  startedAt: GitHubDateTime

  """The current status of the check run."""
  status: GitHubCheckStatusState!

  """A string representing the check run's summary"""
  summary: String

  """A string representing the check run's text"""
  text: String

  """A string representing the check run"""
  title: String

  """The HTTP URL for this check run."""
  url: GitHubURI!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Represents a type that can be retrieved by a URL."""
interface GitHubUniformResourceLocatable {
  """The HTML path to this resource."""
  resourcePath: GitHubURI!

  """The URL to this resource."""
  url: GitHubURI!
}

"""Represents a 'convert_to_draft' event on a given pull request."""
type GitHubConvertToDraftEvent implements OneGraphNode & GitHubNode & GitHubUniformResourceLocatable {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """"""
  id: ID!

  """PullRequest referenced by event."""
  pullRequest: GitHubPullRequest!

  """The HTTP path for this convert to draft event."""
  resourcePath: GitHubURI!

  """The HTTP URL for this convert to draft event."""
  url: GitHubURI!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Any referencable object"""
union GitHubReferencedSubject = GitHubIssue | GitHubPullRequest

"""Represents a 'connected' event on a given issue or pull request."""
type GitHubConnectedEvent implements OneGraphNode & GitHubNode {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """"""
  id: ID!

  """Reference originated in a different repository."""
  isCrossRepository: Boolean!

  """Issue or pull request that made the reference."""
  source: GitHubReferencedSubject!

  """Issue or pull request which was connected."""
  subject: GitHubReferencedSubject!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Represents a 'base_ref_force_pushed' event on a given pull request."""
type GitHubBaseRefForcePushedEvent implements OneGraphNode & GitHubNode {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """Identifies the after commit SHA for the 'base_ref_force_pushed' event."""
  afterCommit: GitHubCommit

  """
  Identifies the before commit SHA for the 'base_ref_force_pushed' event.
  """
  beforeCommit: GitHubCommit

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """"""
  id: ID!

  """PullRequest referenced by event."""
  pullRequest: GitHubPullRequest!

  """
  Identifies the fully qualified ref name for the 'base_ref_force_pushed' event.
  """
  ref: GitHubRef
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Represents a 'base_ref_deleted' event on a given pull request."""
type GitHubBaseRefDeletedEvent implements OneGraphNode & GitHubNode {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """
  Identifies the name of the Ref associated with the `base_ref_deleted` event.
  """
  baseRefName: String

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """"""
  id: ID!

  """PullRequest referenced by event."""
  pullRequest: GitHubPullRequest
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""
Represents a 'base_ref_changed' event on a given issue or pull request.
"""
type GitHubBaseRefChangedEvent implements OneGraphNode & GitHubNode {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """
  Identifies the name of the base ref for the pull request after it was changed.
  """
  currentRefName: String!

  """Identifies the primary key from the database."""
  databaseId: Int

  """"""
  id: ID!

  """
  Identifies the name of the base ref for the pull request before it was changed.
  """
  previousRefName: String!

  """PullRequest referenced by event."""
  pullRequest: GitHubPullRequest!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""
Represents a 'automatic_base_change_succeeded' event on a given pull request.
"""
type GitHubAutomaticBaseChangeSucceededEvent implements OneGraphNode & GitHubNode {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """"""
  id: ID!

  """The new base for this PR"""
  newBase: String!

  """The old base for this PR"""
  oldBase: String!

  """PullRequest referenced by event."""
  pullRequest: GitHubPullRequest!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""
Represents a 'automatic_base_change_failed' event on a given pull request.
"""
type GitHubAutomaticBaseChangeFailedEvent implements OneGraphNode & GitHubNode {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """"""
  id: ID!

  """The new base for this PR"""
  newBase: String!

  """The old base for this PR"""
  oldBase: String!

  """PullRequest referenced by event."""
  pullRequest: GitHubPullRequest!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Represents a 'auto_squash_enabled' event on a given pull request."""
type GitHubAutoSquashEnabledEvent implements OneGraphNode & GitHubNode {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """The user who enabled auto-merge (squash) for this Pull Request"""
  enabler: GitHubUser

  """"""
  id: ID!

  """PullRequest referenced by event."""
  pullRequest: GitHubPullRequest
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Represents a 'auto_rebase_enabled' event on a given pull request."""
type GitHubAutoRebaseEnabledEvent implements OneGraphNode & GitHubNode {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """The user who enabled auto-merge (rebase) for this Pull Request"""
  enabler: GitHubUser

  """"""
  id: ID!

  """PullRequest referenced by event."""
  pullRequest: GitHubPullRequest
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Represents a 'auto_merge_enabled' event on a given pull request."""
type GitHubAutoMergeEnabledEvent implements OneGraphNode & GitHubNode {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """The user who enabled auto-merge for this Pull Request"""
  enabler: GitHubUser

  """"""
  id: ID!

  """PullRequest referenced by event."""
  pullRequest: GitHubPullRequest
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Represents a 'auto_merge_disabled' event on a given pull request."""
type GitHubAutoMergeDisabledEvent implements OneGraphNode & GitHubNode {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """The user who disabled auto-merge for this Pull Request"""
  disabler: GitHubUser

  """"""
  id: ID!

  """PullRequest referenced by event"""
  pullRequest: GitHubPullRequest

  """The reason auto-merge was disabled"""
  reason: String

  """The reason_code relating to why auto-merge was disabled"""
  reasonCode: String
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An item in a pull request timeline"""
union GitHubPullRequestTimelineItems = GitHubAddedToProjectEvent | GitHubAssignedEvent | GitHubAutoMergeDisabledEvent | GitHubAutoMergeEnabledEvent | GitHubAutoRebaseEnabledEvent | GitHubAutoSquashEnabledEvent | GitHubAutomaticBaseChangeFailedEvent | GitHubAutomaticBaseChangeSucceededEvent | GitHubBaseRefChangedEvent | GitHubBaseRefDeletedEvent | GitHubBaseRefForcePushedEvent | GitHubClosedEvent | GitHubCommentDeletedEvent | GitHubConnectedEvent | GitHubConvertToDraftEvent | GitHubConvertedNoteToIssueEvent | GitHubCrossReferencedEvent | GitHubDemilestonedEvent | GitHubDeployedEvent | GitHubDeploymentEnvironmentChangedEvent | GitHubDisconnectedEvent | GitHubHeadRefDeletedEvent | GitHubHeadRefForcePushedEvent | GitHubHeadRefRestoredEvent | GitHubIssueComment | GitHubLabeledEvent | GitHubLockedEvent | GitHubMarkedAsDuplicateEvent | GitHubMentionedEvent | GitHubMergedEvent | GitHubMilestonedEvent | GitHubMovedColumnsInProjectEvent | GitHubPinnedEvent | GitHubPullRequestCommit | GitHubPullRequestCommitCommentThread | GitHubPullRequestReview | GitHubPullRequestReviewThread | GitHubPullRequestRevisionMarker | GitHubReadyForReviewEvent | GitHubReferencedEvent | GitHubRemovedFromProjectEvent | GitHubRenamedTitleEvent | GitHubReopenedEvent | GitHubReviewDismissedEvent | GitHubReviewRequestRemovedEvent | GitHubReviewRequestedEvent | GitHubSubscribedEvent | GitHubTransferredEvent | GitHubUnassignedEvent | GitHubUnlabeledEvent | GitHubUnlockedEvent | GitHubUnmarkedAsDuplicateEvent | GitHubUnpinnedEvent | GitHubUnsubscribedEvent | GitHubUserBlockedEvent

"""Represents a 'comment_deleted' event on a given issue or pull request."""
type GitHubCommentDeletedEvent implements OneGraphNode & GitHubNode {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """Identifies the primary key from the database."""
  databaseId: Int

  """The user who authored the deleted comment."""
  deletedCommentAuthor: GitHubActor

  """"""
  id: ID!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An item in an issue timeline"""
union GitHubIssueTimelineItems = GitHubAddedToProjectEvent | GitHubAssignedEvent | GitHubClosedEvent | GitHubCommentDeletedEvent | GitHubConnectedEvent | GitHubConvertedNoteToIssueEvent | GitHubCrossReferencedEvent | GitHubDemilestonedEvent | GitHubDisconnectedEvent | GitHubIssueComment | GitHubLabeledEvent | GitHubLockedEvent | GitHubMarkedAsDuplicateEvent | GitHubMentionedEvent | GitHubMilestonedEvent | GitHubMovedColumnsInProjectEvent | GitHubPinnedEvent | GitHubReferencedEvent | GitHubRemovedFromProjectEvent | GitHubRenamedTitleEvent | GitHubReopenedEvent | GitHubSubscribedEvent | GitHubTransferredEvent | GitHubUnassignedEvent | GitHubUnlabeledEvent | GitHubUnlockedEvent | GitHubUnmarkedAsDuplicateEvent | GitHubUnpinnedEvent | GitHubUnsubscribedEvent | GitHubUserBlockedEvent

"""The object which triggered a `ClosedEvent`."""
union GitHubCloser = GitHubCommit | GitHubPullRequest

"""Represents a 'closed' event on any `Closable`."""
type GitHubClosedEvent implements OneGraphNode & GitHubNode & GitHubUniformResourceLocatable {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """Object that was closed."""
  closable: GitHubClosable!

  """Object which triggered the creation of this event."""
  closer: GitHubCloser

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """"""
  id: ID!

  """The HTTP path for this closed event."""
  resourcePath: GitHubURI!

  """The HTTP URL for this closed event."""
  url: GitHubURI!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An item in an issue timeline"""
union GitHubIssueTimelineItem = GitHubAssignedEvent | GitHubClosedEvent | GitHubCommit | GitHubCrossReferencedEvent | GitHubDemilestonedEvent | GitHubIssueComment | GitHubLabeledEvent | GitHubLockedEvent | GitHubMilestonedEvent | GitHubReferencedEvent | GitHubRenamedTitleEvent | GitHubReopenedEvent | GitHubSubscribedEvent | GitHubTransferredEvent | GitHubUnassignedEvent | GitHubUnlabeledEvent | GitHubUnlockedEvent | GitHubUnsubscribedEvent | GitHubUserBlockedEvent

"""An object that can have users assigned to it."""
interface GitHubAssignable {
  """A list of Users assigned to this object."""
  assignees(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubUserConnection!
}

"""Represents an 'assigned' event on any assignable object."""
type GitHubAssignedEvent implements OneGraphNode & GitHubNode {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """Identifies the assignable associated with the event."""
  assignable: GitHubAssignable!

  """Identifies the user or mannequin that was assigned."""
  assignee: GitHubAssignee

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """"""
  id: ID!

  """Identifies the user who was assigned."""
  user: GitHubUser @deprecated(reason: "Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.")
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An item in a pull request timeline"""
union GitHubPullRequestTimelineItem = GitHubAssignedEvent | GitHubBaseRefDeletedEvent | GitHubBaseRefForcePushedEvent | GitHubClosedEvent | GitHubCommit | GitHubCommitCommentThread | GitHubCrossReferencedEvent | GitHubDemilestonedEvent | GitHubDeployedEvent | GitHubDeploymentEnvironmentChangedEvent | GitHubHeadRefDeletedEvent | GitHubHeadRefForcePushedEvent | GitHubHeadRefRestoredEvent | GitHubIssueComment | GitHubLabeledEvent | GitHubLockedEvent | GitHubMergedEvent | GitHubMilestonedEvent | GitHubPullRequestReview | GitHubPullRequestReviewComment | GitHubPullRequestReviewThread | GitHubReferencedEvent | GitHubRenamedTitleEvent | GitHubReopenedEvent | GitHubReviewDismissedEvent | GitHubReviewRequestRemovedEvent | GitHubReviewRequestedEvent | GitHubSubscribedEvent | GitHubUnassignedEvent | GitHubUnlabeledEvent | GitHubUnlockedEvent | GitHubUnsubscribedEvent | GitHubUserBlockedEvent

"""Entities that can be minimized."""
interface GitHubMinimizable {
  """Returns whether or not a comment has been minimized."""
  isMinimized: Boolean!

  """Returns why the comment was minimized."""
  minimizedReason: String

  """Check if the current viewer can minimize this object."""
  viewerCanMinimize: Boolean!
}

enum GitHubPullRequestReviewCommentState {
  """A comment that is part of a pending review"""
  PENDING

  """A comment that is part of a submitted review"""
  SUBMITTED
}

"""A review comment associated with a given repository pull request."""
type GitHubPullRequestReviewComment implements OneGraphNode & GitHubComment & GitHubDeletable & GitHubMinimizable & GitHubNode & GitHubReactable & GitHubRepositoryNode & GitHubUpdatable & GitHubUpdatableComment {
  """The actor who authored the comment."""
  author: GitHubActor

  """Author's association with the subject of the comment."""
  authorAssociation: GitHubCommentAuthorAssociation!

  """The comment body of this review comment."""
  body: String!

  """The body rendered to HTML."""
  bodyHTML: GitHubHTML!

  """The comment body of this review comment rendered as plain text."""
  bodyText: String!

  """Identifies the commit associated with the comment."""
  commit: GitHubCommit

  """Identifies when the comment was created."""
  createdAt: GitHubDateTime!

  """Check if this comment was created via an email reply."""
  createdViaEmail: Boolean!

  """Identifies the primary key from the database."""
  databaseId: Int

  """The diff hunk to which the comment applies."""
  diffHunk: String!

  """Identifies when the comment was created in a draft state."""
  draftedAt: GitHubDateTime!

  """The actor who edited the comment."""
  editor: GitHubActor

  """"""
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """Returns whether or not a comment has been minimized."""
  isMinimized: Boolean!

  """The moment the editor made the last edit"""
  lastEditedAt: GitHubDateTime

  """Returns why the comment was minimized."""
  minimizedReason: String

  """Identifies the original commit associated with the comment."""
  originalCommit: GitHubCommit

  """The original line index in the diff to which the comment applies."""
  originalPosition: Int!

  """Identifies when the comment body is outdated"""
  outdated: Boolean!

  """The path to which the comment applies."""
  path: String!

  """The line index in the diff to which the comment applies."""
  position: Int

  """Identifies when the comment was published at."""
  publishedAt: GitHubDateTime

  """The pull request associated with this review comment."""
  pullRequest: GitHubPullRequest!

  """The pull request review associated with this review comment."""
  pullRequestReview: GitHubPullRequestReview

  """A list of reactions grouped by content left on the subject."""
  reactionGroups: [GitHubReactionGroup!]

  """A list of Reactions left on the Issue."""
  reactions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Allows filtering Reactions by emoji."""
    content: GitHubReactionContent

    """Allows specifying the order in which reactions are returned."""
    orderBy: GitHubReactionOrder
  ): GitHubReactionConnection!

  """The comment this is a reply to."""
  replyTo: GitHubPullRequestReviewComment

  """The repository associated with this node."""
  repository: GitHubRepository!

  """The HTTP path permalink for this review comment."""
  resourcePath: GitHubURI!

  """Identifies the state of the comment."""
  state: GitHubPullRequestReviewCommentState!

  """Identifies when the comment was last updated."""
  updatedAt: GitHubDateTime!

  """The HTTP URL permalink for this review comment."""
  url: GitHubURI!

  """A list of edits to this content."""
  userContentEdits(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubUserContentEditConnection

  """Check if the current viewer can delete this object."""
  viewerCanDelete: Boolean!

  """Check if the current viewer can minimize this object."""
  viewerCanMinimize: Boolean!

  """Can user react to this subject"""
  viewerCanReact: Boolean!

  """Check if the current viewer can update this object."""
  viewerCanUpdate: Boolean!

  """Reasons why the current viewer can not update this comment."""
  viewerCannotUpdateReasons: [GitHubCommentCannotUpdateReason!]!

  """Did the viewer author this comment."""
  viewerDidAuthor: Boolean!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An edge in a connection."""
type GitHubPullRequestReviewCommentEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubPullRequestReviewComment
}

"""The connection type for PullRequestReviewComment."""
type GitHubPullRequestReviewCommentConnection {
  """A list of edges."""
  edges: [GitHubPullRequestReviewCommentEdge]

  """A list of nodes."""
  nodes: [GitHubPullRequestReviewComment]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A review object for a given pull request."""
type GitHubPullRequestReview implements OneGraphNode & GitHubComment & GitHubDeletable & GitHubNode & GitHubReactable & GitHubRepositoryNode & GitHubUpdatable & GitHubUpdatableComment {
  """The actor who authored the comment."""
  author: GitHubActor

  """Author's association with the subject of the comment."""
  authorAssociation: GitHubCommentAuthorAssociation!

  """
  Indicates whether the author of this review has push access to the repository.
  """
  authorCanPushToRepository: Boolean!

  """Identifies the pull request review body."""
  body: String!

  """The body rendered to HTML."""
  bodyHTML: GitHubHTML!

  """The body of this review rendered as plain text."""
  bodyText: String!

  """A list of review comments for the current pull request review."""
  comments(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubPullRequestReviewCommentConnection!

  """Identifies the commit associated with this pull request review."""
  commit: GitHubCommit

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """Check if this comment was created via an email reply."""
  createdViaEmail: Boolean!

  """Identifies the primary key from the database."""
  databaseId: Int

  """The actor who edited the comment."""
  editor: GitHubActor

  """"""
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """The moment the editor made the last edit"""
  lastEditedAt: GitHubDateTime

  """A list of teams that this review was made on behalf of."""
  onBehalfOf(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubTeamConnection!

  """Identifies when the comment was published at."""
  publishedAt: GitHubDateTime

  """Identifies the pull request associated with this pull request review."""
  pullRequest: GitHubPullRequest!

  """A list of reactions grouped by content left on the subject."""
  reactionGroups: [GitHubReactionGroup!]

  """A list of Reactions left on the Issue."""
  reactions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Allows filtering Reactions by emoji."""
    content: GitHubReactionContent

    """Allows specifying the order in which reactions are returned."""
    orderBy: GitHubReactionOrder
  ): GitHubReactionConnection!

  """The repository associated with this node."""
  repository: GitHubRepository!

  """The HTTP path permalink for this PullRequestReview."""
  resourcePath: GitHubURI!

  """Identifies the current state of the pull request review."""
  state: GitHubPullRequestReviewState!

  """Identifies when the Pull Request Review was submitted"""
  submittedAt: GitHubDateTime

  """Identifies the date and time when the object was last updated."""
  updatedAt: GitHubDateTime!

  """The HTTP URL permalink for this PullRequestReview."""
  url: GitHubURI!

  """A list of edits to this content."""
  userContentEdits(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubUserContentEditConnection

  """Check if the current viewer can delete this object."""
  viewerCanDelete: Boolean!

  """Can user react to this subject"""
  viewerCanReact: Boolean!

  """Check if the current viewer can update this object."""
  viewerCanUpdate: Boolean!

  """Reasons why the current viewer can not update this comment."""
  viewerCannotUpdateReasons: [GitHubCommentCannotUpdateReason!]!

  """Did the viewer author this comment."""
  viewerDidAuthor: Boolean!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Entities that can be updated."""
interface GitHubUpdatable {
  """Check if the current viewer can update this object."""
  viewerCanUpdate: Boolean!
}

enum GitHubProjectState {
  """The project is open."""
  OPEN

  """The project is closed."""
  CLOSED
}

"""Project progress stats."""
type GitHubProjectProgress {
  """The number of done cards."""
  doneCount: Int!

  """The percentage of done cards."""
  donePercentage: Float!

  """
  Whether progress tracking is enabled and cards with purpose exist for this project
  """
  enabled: Boolean!

  """The number of in-progress cards."""
  inProgressCount: Int!

  """The percentage of in-progress cards."""
  inProgressPercentage: Float!

  """The number of to do cards."""
  todoCount: Int!

  """The percentage of to do cards."""
  todoPercentage: Float!
}

"""Represents an owner of a Project."""
interface GitHubProjectOwner {
  """"""
  id: ID!

  """Find project by number."""
  project(
    """The project number to find."""
    number: Int!
  ): GitHubProject

  """A list of projects under the owner."""
  projects(
    """Ordering options for projects returned from the connection"""
    orderBy: GitHubProjectOrder

    """Query to search projects by, currently only searching by name."""
    search: String

    """A list of states to filter the projects by."""
    states: [GitHubProjectState!]

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubProjectConnection!

  """The HTTP path listing owners projects"""
  projectsResourcePath: GitHubURI!

  """The HTTP URL listing owners projects"""
  projectsUrl: GitHubURI!

  """Can the current viewer create new projects on this owner."""
  viewerCanCreateProjects: Boolean!
}

enum GitHubProjectColumnPurpose {
  """The column contains cards still to be worked on"""
  TODO

  """The column contains cards which are currently being worked on"""
  IN_PROGRESS

  """The column contains cards which are complete"""
  DONE
}

enum GitHubProjectCardArchivedState {
  """A project card that is archived"""
  ARCHIVED

  """A project card that is not archived"""
  NOT_ARCHIVED
}

enum GitHubProjectCardState {
  """The card has content only."""
  CONTENT_ONLY

  """The card has a note only."""
  NOTE_ONLY

  """The card is redacted."""
  REDACTED
}

"""Types that can be inside Project Cards."""
union GitHubProjectCardItem = GitHubIssue | GitHubPullRequest

"""A card in a project."""
type GitHubProjectCard implements OneGraphNode & GitHubNode {
  """
  The project column this card is associated under. A card may only belong to one
  project column at a time. The column field will be null if the card is created
  in a pending state and has yet to be associated with a column. Once cards are
  associated with a column, they will not become pending in the future.
  
  """
  column: GitHubProjectColumn

  """The card content item"""
  content: GitHubProjectCardItem

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """The actor who created this card"""
  creator: GitHubActor

  """Identifies the primary key from the database."""
  databaseId: Int

  """"""
  id: ID!

  """Whether the card is archived"""
  isArchived: Boolean!

  """The card note"""
  note: String

  """The project that contains this card."""
  project: GitHubProject!

  """The HTTP path for this card"""
  resourcePath: GitHubURI!

  """The state of ProjectCard"""
  state: GitHubProjectCardState

  """Identifies the date and time when the object was last updated."""
  updatedAt: GitHubDateTime!

  """The HTTP URL for this card"""
  url: GitHubURI!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An edge in a connection."""
type GitHubProjectCardEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubProjectCard
}

"""The connection type for ProjectCard."""
type GitHubProjectCardConnection {
  """A list of edges."""
  edges: [GitHubProjectCardEdge]

  """A list of nodes."""
  nodes: [GitHubProjectCard]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A column inside a project."""
type GitHubProjectColumn implements OneGraphNode & GitHubNode {
  """List of cards in the column"""
  cards(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """A list of archived states to filter the cards by"""
    archivedStates: [GitHubProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]
  ): GitHubProjectCardConnection!

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """Identifies the primary key from the database."""
  databaseId: Int

  """"""
  id: ID!

  """The project column's name."""
  name: String!

  """The project that contains this column."""
  project: GitHubProject!

  """The semantic purpose of the column"""
  purpose: GitHubProjectColumnPurpose

  """The HTTP path for this project column"""
  resourcePath: GitHubURI!

  """Identifies the date and time when the object was last updated."""
  updatedAt: GitHubDateTime!

  """The HTTP URL for this project column"""
  url: GitHubURI!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An edge in a connection."""
type GitHubProjectColumnEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubProjectColumn
}

"""The connection type for ProjectColumn."""
type GitHubProjectColumnConnection {
  """A list of edges."""
  edges: [GitHubProjectColumnEdge]

  """A list of nodes."""
  nodes: [GitHubProjectColumn]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""
Projects manage issues, pull requests and notes within a project owner.
"""
type GitHubProject implements OneGraphNode & GitHubClosable & GitHubNode & GitHubUpdatable {
  """The project's description body."""
  body: String

  """The projects description body rendered to HTML."""
  bodyHTML: GitHubHTML!

  """
  `true` if the object is closed (definition of closed may depend on type)
  """
  closed: Boolean!

  """Identifies the date and time when the object was closed."""
  closedAt: GitHubDateTime

  """List of columns in the project"""
  columns(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubProjectColumnConnection!

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """The actor who originally created the project."""
  creator: GitHubActor

  """Identifies the primary key from the database."""
  databaseId: Int

  """"""
  id: ID!

  """The project's name."""
  name: String!

  """The project's number."""
  number: Int!

  """
  The project's owner. Currently limited to repositories, organizations, and users.
  """
  owner: GitHubProjectOwner!

  """List of pending cards in this project"""
  pendingCards(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """A list of archived states to filter the cards by"""
    archivedStates: [GitHubProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]
  ): GitHubProjectCardConnection!

  """Project progress details."""
  progress: GitHubProjectProgress!

  """The HTTP path for this project"""
  resourcePath: GitHubURI!

  """Whether the project is open or closed."""
  state: GitHubProjectState!

  """Identifies the date and time when the object was last updated."""
  updatedAt: GitHubDateTime!

  """The HTTP URL for this project"""
  url: GitHubURI!

  """Check if the current viewer can update this object."""
  viewerCanUpdate: Boolean!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An object that can be closed"""
interface GitHubClosable {
  """
  `true` if the object is closed (definition of closed may depend on type)
  """
  closed: Boolean!

  """Identifies the date and time when the object was closed."""
  closedAt: GitHubDateTime
}

enum GitHubMilestoneState {
  """A milestone that is still open."""
  OPEN

  """A milestone that has been closed."""
  CLOSED
}

"""Represents a Milestone object on a given repository."""
type GitHubMilestone implements OneGraphNode & GitHubClosable & GitHubNode & GitHubUniformResourceLocatable {
  """
  `true` if the object is closed (definition of closed may depend on type)
  """
  closed: Boolean!

  """Identifies the date and time when the object was closed."""
  closedAt: GitHubDateTime

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """Identifies the actor who created the milestone."""
  creator: GitHubActor

  """Identifies the description of the milestone."""
  description: String

  """Identifies the due date of the milestone."""
  dueOn: GitHubDateTime

  """"""
  id: ID!

  """A list of issues associated with the milestone."""
  issues(
    """Ordering options for issues returned from the connection."""
    orderBy: GitHubIssueOrder

    """A list of label names to filter the pull requests by."""
    labels: [String!]

    """A list of states to filter the issues by."""
    states: [GitHubIssueState!]

    """Filtering options for issues returned from the connection."""
    filterBy: GitHubIssueFilters

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubIssueConnection!

  """Identifies the number of the milestone."""
  number: Int!

  """Identifies the percentage complete for the milestone"""
  progressPercentage: Float!

  """A list of pull requests associated with the milestone."""
  pullRequests(
    """A list of states to filter the pull requests by."""
    states: [GitHubPullRequestState!]

    """A list of label names to filter the pull requests by."""
    labels: [String!]

    """The head ref name to filter the pull requests by."""
    headRefName: String

    """The base ref name to filter the pull requests by."""
    baseRefName: String

    """Ordering options for pull requests returned from the connection."""
    orderBy: GitHubIssueOrder

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubPullRequestConnection!

  """The repository associated with this milestone."""
  repository: GitHubRepository!

  """The HTTP path for this milestone"""
  resourcePath: GitHubURI!

  """Identifies the state of the milestone."""
  state: GitHubMilestoneState!

  """Identifies the title of the milestone."""
  title: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: GitHubDateTime!

  """The HTTP URL for this milestone"""
  url: GitHubURI!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

enum GitHubLabelOrderField {
  """Order labels by name """
  NAME

  """Order labels by creation time"""
  CREATED_AT
}

"""Ways in which lists of labels can be ordered upon return."""
input GitHubLabelOrder {
  """The field in which to order labels by."""
  field: GitHubLabelOrderField!

  """The direction in which to order labels by the specified field."""
  direction: GitHubOrderDirection!
}

enum GitHubIssueState {
  """An issue that is still open"""
  OPEN

  """An issue that has been closed"""
  CLOSED
}

"""Ways in which to filter lists of issues."""
input GitHubIssueFilters {
  """
  List issues assigned to given name. Pass in `null` for issues with no assigned user, and `*` for issues assigned to any user.
  """
  assignee: String

  """List issues created by given name."""
  createdBy: String

  """List issues where the list of label names exist on the issue."""
  labels: [String!]

  """List issues where the given name is mentioned in the issue."""
  mentioned: String

  """
  List issues by given milestone argument. If an string representation of an integer is passed, it should refer to a milestone by its number field. Pass in `null` for issues with no milestone, and `*` for issues that are assigned to any milestone.
  """
  milestone: String

  """List issues that have been updated at or after the given date."""
  since: GitHubDateTime

  """List issues filtered by the list of states given."""
  states: [GitHubIssueState!]

  """List issues subscribed to by viewer."""
  viewerSubscribed: Boolean = false
}

"""An edge in a connection."""
type GitHubIssueEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubIssue
}

"""The connection type for Issue."""
type GitHubIssueConnection {
  """A list of edges."""
  edges: [GitHubIssueEdge]

  """A list of nodes."""
  nodes: [GitHubIssue]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A label for categorizing Issues or Milestones with a given Repository."""
type GitHubLabel implements OneGraphNode & GitHubNode {
  """Identifies the label color."""
  color: String!

  """Identifies the date and time when the label was created."""
  createdAt: GitHubDateTime

  """A brief description of this label."""
  description: String

  """"""
  id: ID!

  """Indicates whether or not this is a default label."""
  isDefault: Boolean!

  """A list of issues associated with this label."""
  issues(
    """Ordering options for issues returned from the connection."""
    orderBy: GitHubIssueOrder

    """A list of label names to filter the pull requests by."""
    labels: [String!]

    """A list of states to filter the issues by."""
    states: [GitHubIssueState!]

    """Filtering options for issues returned from the connection."""
    filterBy: GitHubIssueFilters

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubIssueConnection!

  """Identifies the label name."""
  name: String!

  """A list of pull requests associated with this label."""
  pullRequests(
    """A list of states to filter the pull requests by."""
    states: [GitHubPullRequestState!]

    """A list of label names to filter the pull requests by."""
    labels: [String!]

    """The head ref name to filter the pull requests by."""
    headRefName: String

    """The base ref name to filter the pull requests by."""
    baseRefName: String

    """Ordering options for pull requests returned from the connection."""
    orderBy: GitHubIssueOrder

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubPullRequestConnection!

  """The repository associated with this label."""
  repository: GitHubRepository!

  """The HTTP path for this label."""
  resourcePath: GitHubURI!

  """Identifies the date and time when the label was last updated."""
  updatedAt: GitHubDateTime

  """The HTTP URL for this label."""
  url: GitHubURI!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An edge in a connection."""
type GitHubLabelEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubLabel
}

"""The connection type for Label."""
type GitHubLabelConnection {
  """A list of edges."""
  edges: [GitHubLabelEdge]

  """A list of nodes."""
  nodes: [GitHubLabel]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""
A hovercard context with a message describing how the viewer is related.
"""
type GitHubViewerHovercardContext implements GitHubHovercardContext {
  """A string describing this context"""
  message: String!

  """An octicon to accompany this context"""
  octicon: String!

  """Identifies the user who is related to this context."""
  viewer: GitHubUser!
}

enum GitHubPullRequestReviewDecision {
  """Changes have been requested on the pull request."""
  CHANGES_REQUESTED

  """The pull request has received an approving review."""
  APPROVED

  """A review is required before the pull request can be merged."""
  REVIEW_REQUIRED
}

"""
A hovercard context with a message describing the current code review state of the pull
request.

"""
type GitHubReviewStatusHovercardContext implements GitHubHovercardContext {
  """A string describing this context"""
  message: String!

  """An octicon to accompany this context"""
  octicon: String!

  """The current status of the pull request with respect to code review."""
  reviewDecision: GitHubPullRequestReviewDecision
}

"""An edge in a connection."""
type GitHubOrganizationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubOrganization
}

"""The connection type for Organization."""
type GitHubOrganizationConnection {
  """A list of edges."""
  edges: [GitHubOrganizationEdge]

  """A list of nodes."""
  nodes: [GitHubOrganization]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An organization list hovercard context"""
type GitHubOrganizationsHovercardContext implements GitHubHovercardContext {
  """A string describing this context"""
  message: String!

  """An octicon to accompany this context"""
  octicon: String!

  """Organizations this user is a member of that are relevant"""
  relevantOrganizations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubOrganizationConnection!

  """The total number of organizations this user is in"""
  totalOrganizationCount: Int!
}

"""An organization teams hovercard context"""
type GitHubOrganizationTeamsHovercardContext implements GitHubHovercardContext {
  """A string describing this context"""
  message: String!

  """An octicon to accompany this context"""
  octicon: String!

  """Teams in this organization the user is a member of that are relevant"""
  relevantTeams(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubTeamConnection!

  """The path for the full team list for this user"""
  teamsResourcePath: GitHubURI!

  """The URL for the full team list for this user"""
  teamsUrl: GitHubURI!

  """The total number of teams the user is on in the organization"""
  totalTeamCount: Int!
}

"""A generic hovercard context with a message and icon"""
type GitHubGenericHovercardContext implements GitHubHovercardContext {
  """A string describing this context"""
  message: String!

  """An octicon to accompany this context"""
  octicon: String!
}

"""An individual line of a hovercard"""
interface GitHubHovercardContext {
  """A string describing this context"""
  message: String!

  """An octicon to accompany this context"""
  octicon: String!
}

"""Detail needed to display a hovercard for a user"""
type GitHubHovercard {
  """Each of the contexts for this hovercard"""
  contexts: [GitHubHovercardContext!]!
}

enum GitHubIssueCommentOrderField {
  """Order issue comments by update time"""
  UPDATED_AT
}

"""Ways in which lists of issue comments can be ordered upon return."""
input GitHubIssueCommentOrder {
  """The field in which to order issue comments by."""
  field: GitHubIssueCommentOrderField!

  """The direction in which to order issue comments by the specified field."""
  direction: GitHubOrderDirection!
}

"""An edge in a connection."""
type GitHubIssueCommentEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubIssueComment
}

"""The connection type for IssueComment."""
type GitHubIssueCommentConnection {
  """A list of edges."""
  edges: [GitHubIssueCommentEdge]

  """A list of nodes."""
  nodes: [GitHubIssueComment]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""
An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
"""
type GitHubIssue implements OneGraphNode & GitHubAssignable & GitHubClosable & GitHubComment & GitHubLabelable & GitHubLockable & GitHubNode & GitHubReactable & GitHubRepositoryNode & GitHubSubscribable & GitHubUniformResourceLocatable & GitHubUpdatable & GitHubUpdatableComment {
  """Reason that the conversation was locked."""
  activeLockReason: GitHubLockReason

  """A list of Users assigned to this object."""
  assignees(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubUserConnection!

  """The actor who authored the comment."""
  author: GitHubActor

  """Author's association with the subject of the comment."""
  authorAssociation: GitHubCommentAuthorAssociation!

  """Identifies the body of the issue."""
  body: String!

  """The body rendered to HTML."""
  bodyHTML: GitHubHTML!

  """The http path for this issue body"""
  bodyResourcePath: GitHubURI!

  """Identifies the body of the issue rendered to text."""
  bodyText: String!

  """The http URL for this issue body"""
  bodyUrl: GitHubURI!

  """
  `true` if the object is closed (definition of closed may depend on type)
  """
  closed: Boolean!

  """Identifies the date and time when the object was closed."""
  closedAt: GitHubDateTime

  """A list of comments associated with the Issue."""
  comments(
    """Ordering options for issue comments returned from the connection."""
    orderBy: GitHubIssueCommentOrder

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubIssueCommentConnection!

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """Check if this comment was created via an email reply."""
  createdViaEmail: Boolean!

  """Identifies the primary key from the database."""
  databaseId: Int

  """The actor who edited the comment."""
  editor: GitHubActor

  """The hovercard information for this issue"""
  hovercard(
    """Whether or not to include notification contexts"""
    includeNotificationContexts: Boolean = true
  ): GitHubHovercard!

  """"""
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """
  Indicates whether or not this issue is currently pinned to the repository issues list
  """
  isPinned: Boolean

  """Is this issue read by the viewer"""
  isReadByViewer: Boolean

  """A list of labels associated with the object."""
  labels(
    """Ordering options for labels returned from the connection."""
    orderBy: GitHubLabelOrder = {field: CREATED_AT, direction: ASC}

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubLabelConnection

  """The moment the editor made the last edit"""
  lastEditedAt: GitHubDateTime

  """`true` if the object is locked"""
  locked: Boolean!

  """Identifies the milestone associated with the issue."""
  milestone: GitHubMilestone

  """Identifies the issue number."""
  number: Int!

  """A list of Users that are participating in the Issue conversation."""
  participants(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubUserConnection!

  """List of project cards associated with this issue."""
  projectCards(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """A list of archived states to filter the cards by"""
    archivedStates: [GitHubProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]
  ): GitHubProjectCardConnection!

  """Identifies when the comment was published at."""
  publishedAt: GitHubDateTime

  """A list of reactions grouped by content left on the subject."""
  reactionGroups: [GitHubReactionGroup!]

  """A list of Reactions left on the Issue."""
  reactions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Allows filtering Reactions by emoji."""
    content: GitHubReactionContent

    """Allows specifying the order in which reactions are returned."""
    orderBy: GitHubReactionOrder
  ): GitHubReactionConnection!

  """The repository associated with this node."""
  repository: GitHubRepository!

  """The HTTP path for this issue"""
  resourcePath: GitHubURI!

  """Identifies the state of the issue."""
  state: GitHubIssueState!

  """A list of events, comments, commits, etc. associated with the issue."""
  timeline(
    """Allows filtering timeline events by a `since` timestamp."""
    since: GitHubDateTime

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubIssueTimelineConnection! @deprecated(reason: "`timeline` will be removed Use Issue.timelineItems instead. Removal on 2020-10-01 UTC.")

  """A list of events, comments, commits, etc. associated with the issue."""
  timelineItems(
    """Filter timeline items by a `since` timestamp."""
    since: GitHubDateTime

    """Skips the first _n_ elements in the list."""
    skip: Int

    """Filter timeline items by type."""
    itemTypes: [GitHubIssueTimelineItemsItemType!]

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubIssueTimelineItemsConnection!

  """Identifies the issue title."""
  title: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: GitHubDateTime!

  """The HTTP URL for this issue"""
  url: GitHubURI!

  """A list of edits to this content."""
  userContentEdits(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubUserContentEditConnection

  """Can user react to this subject"""
  viewerCanReact: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!

  """Check if the current viewer can update this object."""
  viewerCanUpdate: Boolean!

  """Reasons why the current viewer can not update this comment."""
  viewerCannotUpdateReasons: [GitHubCommentCannotUpdateReason!]!

  """Did the viewer author this comment."""
  viewerDidAuthor: Boolean!

  """
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  """
  viewerSubscription: GitHubSubscriptionState
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Represents a comment on an Issue."""
type GitHubIssueComment implements OneGraphNode & GitHubComment & GitHubDeletable & GitHubMinimizable & GitHubNode & GitHubReactable & GitHubRepositoryNode & GitHubUpdatable & GitHubUpdatableComment {
  """The actor who authored the comment."""
  author: GitHubActor

  """Author's association with the subject of the comment."""
  authorAssociation: GitHubCommentAuthorAssociation!

  """The body as Markdown."""
  body: String!

  """The body rendered to HTML."""
  bodyHTML: GitHubHTML!

  """The body rendered to text."""
  bodyText: String!

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """Check if this comment was created via an email reply."""
  createdViaEmail: Boolean!

  """Identifies the primary key from the database."""
  databaseId: Int

  """The actor who edited the comment."""
  editor: GitHubActor

  """"""
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """Returns whether or not a comment has been minimized."""
  isMinimized: Boolean!

  """Identifies the issue associated with the comment."""
  issue: GitHubIssue!

  """The moment the editor made the last edit"""
  lastEditedAt: GitHubDateTime

  """Returns why the comment was minimized."""
  minimizedReason: String

  """Identifies when the comment was published at."""
  publishedAt: GitHubDateTime

  """
  Returns the pull request associated with the comment, if this comment was made on a
  pull request.
  
  """
  pullRequest: GitHubPullRequest

  """A list of reactions grouped by content left on the subject."""
  reactionGroups: [GitHubReactionGroup!]

  """A list of Reactions left on the Issue."""
  reactions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Allows filtering Reactions by emoji."""
    content: GitHubReactionContent

    """Allows specifying the order in which reactions are returned."""
    orderBy: GitHubReactionOrder
  ): GitHubReactionConnection!

  """The repository associated with this node."""
  repository: GitHubRepository!

  """The HTTP path for this issue comment"""
  resourcePath: GitHubURI!

  """Identifies the date and time when the object was last updated."""
  updatedAt: GitHubDateTime!

  """The HTTP URL for this issue comment"""
  url: GitHubURI!

  """A list of edits to this content."""
  userContentEdits(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubUserContentEditConnection

  """Check if the current viewer can delete this object."""
  viewerCanDelete: Boolean!

  """Check if the current viewer can minimize this object."""
  viewerCanMinimize: Boolean!

  """Can user react to this subject"""
  viewerCanReact: Boolean!

  """Check if the current viewer can update this object."""
  viewerCanUpdate: Boolean!

  """Reasons why the current viewer can not update this comment."""
  viewerCannotUpdateReasons: [GitHubCommentCannotUpdateReason!]!

  """Did the viewer author this comment."""
  viewerDidAuthor: Boolean!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Entities that can be deleted."""
interface GitHubDeletable {
  """Check if the current viewer can delete this object."""
  viewerCanDelete: Boolean!
}

"""An edge in a connection."""
type GitHubDiscussionCommentEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubDiscussionComment
}

"""The connection type for DiscussionComment."""
type GitHubDiscussionCommentConnection {
  """A list of edges."""
  edges: [GitHubDiscussionCommentEdge]

  """A list of nodes."""
  nodes: [GitHubDiscussionComment]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

enum GitHubReactionOrderField {
  """Allows ordering a list of reactions by when they were created."""
  CREATED_AT
}

"""Ways in which lists of reactions can be ordered upon return."""
input GitHubReactionOrder {
  """The field in which to order reactions by."""
  field: GitHubReactionOrderField!

  """The direction in which to order reactions by the specified field."""
  direction: GitHubOrderDirection!
}

"""An emoji reaction to a particular piece of content."""
type GitHubReaction implements OneGraphNode & GitHubNode {
  """Identifies the emoji reaction."""
  content: GitHubReactionContent!

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """Identifies the primary key from the database."""
  databaseId: Int

  """"""
  id: ID!

  """The reactable piece of content"""
  reactable: GitHubReactable!

  """Identifies the user who created this reaction."""
  user: GitHubUser
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An edge in a connection."""
type GitHubReactionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubReaction
}

"""A list of reactions that have been left on the subject."""
type GitHubReactionConnection {
  """A list of edges."""
  edges: [GitHubReactionEdge]

  """A list of nodes."""
  nodes: [GitHubReaction]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!

  """
  Whether or not the authenticated user has left a reaction on the subject.
  """
  viewerHasReacted: Boolean!
}

"""A comment on a discussion."""
type GitHubDiscussionComment implements OneGraphNode & GitHubComment & GitHubDeletable & GitHubMinimizable & GitHubNode & GitHubReactable & GitHubUpdatable & GitHubUpdatableComment & GitHubVotable {
  """The actor who authored the comment."""
  author: GitHubActor

  """Author's association with the subject of the comment."""
  authorAssociation: GitHubCommentAuthorAssociation!

  """The body as Markdown."""
  body: String!

  """The body rendered to HTML."""
  bodyHTML: GitHubHTML!

  """The body rendered to text."""
  bodyText: String!

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """Check if this comment was created via an email reply."""
  createdViaEmail: Boolean!

  """Identifies the primary key from the database."""
  databaseId: Int

  """The time when this replied-to comment was deleted"""
  deletedAt: GitHubDateTime

  """The discussion this comment was created in"""
  discussion: GitHubDiscussion

  """The actor who edited the comment."""
  editor: GitHubActor

  """"""
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """Has this comment been chosen as the answer of its discussion?"""
  isAnswer: Boolean!

  """Returns whether or not a comment has been minimized."""
  isMinimized: Boolean!

  """The moment the editor made the last edit"""
  lastEditedAt: GitHubDateTime

  """Returns why the comment was minimized."""
  minimizedReason: String

  """Identifies when the comment was published at."""
  publishedAt: GitHubDateTime

  """A list of reactions grouped by content left on the subject."""
  reactionGroups: [GitHubReactionGroup!]

  """A list of Reactions left on the Issue."""
  reactions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Allows filtering Reactions by emoji."""
    content: GitHubReactionContent

    """Allows specifying the order in which reactions are returned."""
    orderBy: GitHubReactionOrder
  ): GitHubReactionConnection!

  """The threaded replies to this comment."""
  replies(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubDiscussionCommentConnection!

  """The discussion comment this comment is a reply to"""
  replyTo: GitHubDiscussionComment

  """The path for this discussion comment."""
  resourcePath: GitHubURI!

  """Identifies the date and time when the object was last updated."""
  updatedAt: GitHubDateTime!

  """Number of upvotes that this subject has received."""
  upvoteCount: Int!

  """The URL for this discussion comment."""
  url: GitHubURI!

  """A list of edits to this content."""
  userContentEdits(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubUserContentEditConnection

  """Check if the current viewer can delete this object."""
  viewerCanDelete: Boolean!

  """Can the current user mark this comment as an answer?"""
  viewerCanMarkAsAnswer: Boolean!

  """Check if the current viewer can minimize this object."""
  viewerCanMinimize: Boolean!

  """Can user react to this subject"""
  viewerCanReact: Boolean!

  """Can the current user unmark this comment as an answer?"""
  viewerCanUnmarkAsAnswer: Boolean!

  """Check if the current viewer can update this object."""
  viewerCanUpdate: Boolean!

  """
  Whether or not the current user can add or remove an upvote on this subject.
  """
  viewerCanUpvote: Boolean!

  """Reasons why the current viewer can not update this comment."""
  viewerCannotUpdateReasons: [GitHubCommentCannotUpdateReason!]!

  """Did the viewer author this comment."""
  viewerDidAuthor: Boolean!

  """Whether or not the current user has already upvoted this subject."""
  viewerHasUpvoted: Boolean!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""A discussion in a repository."""
type GitHubDiscussion implements OneGraphNode & GitHubComment & GitHubDeletable & GitHubLockable & GitHubNode & GitHubReactable & GitHubRepositoryNode & GitHubSubscribable & GitHubUpdatable & GitHubVotable {
  """Reason that the conversation was locked."""
  activeLockReason: GitHubLockReason

  """The comment chosen as this discussion's answer, if any."""
  answer: GitHubDiscussionComment

  """The time when a user chose this discussion's answer, if answered."""
  answerChosenAt: GitHubDateTime

  """The user who chose this discussion's answer, if answered."""
  answerChosenBy: GitHubActor

  """The actor who authored the comment."""
  author: GitHubActor

  """Author's association with the subject of the comment."""
  authorAssociation: GitHubCommentAuthorAssociation!

  """The main text of the discussion post."""
  body: String!

  """The body rendered to HTML."""
  bodyHTML: GitHubHTML!

  """The body rendered to text."""
  bodyText: String!

  """The category for this discussion."""
  category: GitHubDiscussionCategory!

  """The replies to the discussion."""
  comments(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubDiscussionCommentConnection!

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """Check if this comment was created via an email reply."""
  createdViaEmail: Boolean!

  """Identifies the primary key from the database."""
  databaseId: Int

  """The actor who edited the comment."""
  editor: GitHubActor

  """"""
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """The moment the editor made the last edit"""
  lastEditedAt: GitHubDateTime

  """`true` if the object is locked"""
  locked: Boolean!

  """The number identifying this discussion within the repository."""
  number: Int!

  """Identifies when the comment was published at."""
  publishedAt: GitHubDateTime

  """A list of reactions grouped by content left on the subject."""
  reactionGroups: [GitHubReactionGroup!]

  """A list of Reactions left on the Issue."""
  reactions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Allows filtering Reactions by emoji."""
    content: GitHubReactionContent

    """Allows specifying the order in which reactions are returned."""
    orderBy: GitHubReactionOrder
  ): GitHubReactionConnection!

  """The repository associated with this node."""
  repository: GitHubRepository!

  """The path for this discussion."""
  resourcePath: GitHubURI!

  """The title of this discussion."""
  title: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: GitHubDateTime!

  """Number of upvotes that this subject has received."""
  upvoteCount: Int!

  """The URL for this discussion."""
  url: GitHubURI!

  """A list of edits to this content."""
  userContentEdits(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubUserContentEditConnection

  """Check if the current viewer can delete this object."""
  viewerCanDelete: Boolean!

  """Can user react to this subject"""
  viewerCanReact: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!

  """Check if the current viewer can update this object."""
  viewerCanUpdate: Boolean!

  """
  Whether or not the current user can add or remove an upvote on this subject.
  """
  viewerCanUpvote: Boolean!

  """Did the viewer author this comment."""
  viewerDidAuthor: Boolean!

  """Whether or not the current user has already upvoted this subject."""
  viewerHasUpvoted: Boolean!

  """
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  """
  viewerSubscription: GitHubSubscriptionState
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Represents a comment."""
interface GitHubComment {
  """The actor who authored the comment."""
  author: GitHubActor

  """Author's association with the subject of the comment."""
  authorAssociation: GitHubCommentAuthorAssociation!

  """The body as Markdown."""
  body: String!

  """The body rendered to HTML."""
  bodyHTML: GitHubHTML!

  """The body rendered to text."""
  bodyText: String!

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """Check if this comment was created via an email reply."""
  createdViaEmail: Boolean!

  """The actor who edited the comment."""
  editor: GitHubActor

  """"""
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """The moment the editor made the last edit"""
  lastEditedAt: GitHubDateTime

  """Identifies when the comment was published at."""
  publishedAt: GitHubDateTime

  """Identifies the date and time when the object was last updated."""
  updatedAt: GitHubDateTime!

  """A list of edits to this content."""
  userContentEdits(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubUserContentEditConnection

  """Did the viewer author this comment."""
  viewerDidAuthor: Boolean!
}

enum GitHubCommentCannotUpdateReason {
  """Unable to create comment because repository is archived."""
  ARCHIVED

  """
  You must be the author or have write access to this repository to update this comment.
  """
  INSUFFICIENT_ACCESS

  """Unable to create comment because issue is locked."""
  LOCKED

  """You must be logged in to update this comment."""
  LOGIN_REQUIRED

  """Repository is under maintenance."""
  MAINTENANCE

  """At least one email address must be verified to update this comment."""
  VERIFIED_EMAIL_REQUIRED

  """You cannot update this comment"""
  DENIED
}

"""An edit on user content"""
type GitHubUserContentEdit implements OneGraphNode & GitHubNode {
  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """Identifies the date and time when the object was deleted."""
  deletedAt: GitHubDateTime

  """The actor who deleted this content"""
  deletedBy: GitHubActor

  """A summary of the changes for this edit"""
  diff: String

  """When this content was edited"""
  editedAt: GitHubDateTime!

  """The actor who edited this content"""
  editor: GitHubActor

  """"""
  id: ID!

  """Identifies the date and time when the object was last updated."""
  updatedAt: GitHubDateTime!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An edge in a connection."""
type GitHubUserContentEditEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubUserContentEdit
}

"""A list of edits to content."""
type GitHubUserContentEditConnection {
  """A list of edges."""
  edges: [GitHubUserContentEditEdge]

  """A list of nodes."""
  nodes: [GitHubUserContentEdit]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Represents a comment on an Gist."""
type GitHubGistComment implements OneGraphNode & GitHubComment & GitHubDeletable & GitHubMinimizable & GitHubNode & GitHubUpdatable & GitHubUpdatableComment {
  """The actor who authored the comment."""
  author: GitHubActor

  """Author's association with the gist."""
  authorAssociation: GitHubCommentAuthorAssociation!

  """Identifies the comment body."""
  body: String!

  """The body rendered to HTML."""
  bodyHTML: GitHubHTML!

  """The body rendered to text."""
  bodyText: String!

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """Check if this comment was created via an email reply."""
  createdViaEmail: Boolean!

  """Identifies the primary key from the database."""
  databaseId: Int

  """The actor who edited the comment."""
  editor: GitHubActor

  """The associated gist."""
  gist: GitHubGist!

  """"""
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """Returns whether or not a comment has been minimized."""
  isMinimized: Boolean!

  """The moment the editor made the last edit"""
  lastEditedAt: GitHubDateTime

  """Returns why the comment was minimized."""
  minimizedReason: String

  """Identifies when the comment was published at."""
  publishedAt: GitHubDateTime

  """Identifies the date and time when the object was last updated."""
  updatedAt: GitHubDateTime!

  """A list of edits to this content."""
  userContentEdits(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubUserContentEditConnection

  """Check if the current viewer can delete this object."""
  viewerCanDelete: Boolean!

  """Check if the current viewer can minimize this object."""
  viewerCanMinimize: Boolean!

  """Check if the current viewer can update this object."""
  viewerCanUpdate: Boolean!

  """Reasons why the current viewer can not update this comment."""
  viewerCannotUpdateReasons: [GitHubCommentCannotUpdateReason!]!

  """Did the viewer author this comment."""
  viewerDidAuthor: Boolean!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An edge in a connection."""
type GitHubGistCommentEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubGistComment
}

"""The connection type for GistComment."""
type GitHubGistCommentConnection {
  """A list of edges."""
  edges: [GitHubGistCommentEdge]

  """A list of nodes."""
  nodes: [GitHubGistComment]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A Gist."""
type GitHubGist implements OneGraphNode & GitHubNode & GitHubStarrable & GitHubUniformResourceLocatable {
  """A list of comments associated with the gist"""
  comments(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubGistCommentConnection!

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """The gist description."""
  description: String

  """The files in this gist."""
  files(
    """The maximum number of files to return."""
    limit: Int = 10

    """The oid of the files to return"""
    oid: GitHubGitObjectID
  ): [GitHubGistFile]

  """A list of forks associated with the gist"""
  forks(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for gists returned from the connection"""
    orderBy: GitHubGistOrder
  ): GitHubGistConnection!

  """"""
  id: ID!

  """Identifies if the gist is a fork."""
  isFork: Boolean!

  """Whether the gist is public or not."""
  isPublic: Boolean!

  """The gist name."""
  name: String!

  """The gist owner."""
  owner: GitHubRepositoryOwner

  """Identifies when the gist was last pushed to."""
  pushedAt: GitHubDateTime

  """The HTML path to this resource."""
  resourcePath: GitHubURI!

  """
  Returns a count of how many stargazers there are on this object
  
  """
  stargazerCount: Int!

  """A list of users who have starred this starrable."""
  stargazers(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Order for connection"""
    orderBy: GitHubStarOrder
  ): GitHubStargazerConnection!

  """Identifies the date and time when the object was last updated."""
  updatedAt: GitHubDateTime!

  """The HTTP URL for this Gist."""
  url: GitHubURI!

  """
  Returns a boolean indicating whether the viewing user has starred this starrable.
  """
  viewerHasStarred: Boolean!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Things that can be starred."""
interface GitHubStarrable {
  """"""
  id: ID!

  """
  Returns a count of how many stargazers there are on this object
  
  """
  stargazerCount: Int!

  """A list of users who have starred this starrable."""
  stargazers(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Order for connection"""
    orderBy: GitHubStarOrder
  ): GitHubStargazerConnection!

  """
  Returns a boolean indicating whether the viewing user has starred this starrable.
  """
  viewerHasStarred: Boolean!
}

enum GitHubStarOrderField {
  """Allows ordering a list of stars by when they were created."""
  STARRED_AT
}

"""Ways in which star connections can be ordered."""
input GitHubStarOrder {
  """The field in which to order nodes by."""
  field: GitHubStarOrderField!

  """The direction in which to order nodes."""
  direction: GitHubOrderDirection!
}

"""Represents a user that's starred a repository."""
type GitHubStargazerEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """"""
  node: GitHubUser!

  """Identifies when the item was starred."""
  starredAt: GitHubDateTime!
}

"""The connection type for User."""
type GitHubStargazerConnection {
  """A list of edges."""
  edges: [GitHubStargazerEdge]

  """A list of nodes."""
  nodes: [GitHubUser]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A topic aggregates entities that are related to a subject."""
type GitHubTopic implements OneGraphNode & GitHubNode & GitHubStarrable {
  """"""
  id: ID!

  """The topic's name."""
  name: String!

  """
  A list of related topics, including aliases of this topic, sorted with the most relevant
  first. Returns up to 10 Topics.
  
  """
  relatedTopics(
    """How many topics to return."""
    first: Int = 3
  ): [GitHubTopic!]!

  """
  Returns a count of how many stargazers there are on this object
  
  """
  stargazerCount: Int!

  """A list of users who have starred this starrable."""
  stargazers(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Order for connection"""
    orderBy: GitHubStarOrder
  ): GitHubStargazerConnection!

  """
  Returns a boolean indicating whether the viewing user has starred this starrable.
  """
  viewerHasStarred: Boolean!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Audit log entry for a repo.add_topic event."""
type GitHubRepoAddTopicAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOrganizationAuditEntryData & GitHubRepositoryAuditEntryData & GitHubTopicAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """"""
  id: ID!

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The repository associated with the action"""
  repository: GitHubRepository

  """The name of the repository"""
  repositoryName: String

  """The HTTP path for the repository"""
  repositoryResourcePath: GitHubURI

  """The HTTP URL for the repository"""
  repositoryUrl: GitHubURI

  """The name of the topic added to the repository"""
  topic: GitHubTopic

  """The name of the topic added to the repository"""
  topicName: String

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

enum GitHubRepoAddMemberAuditEntryVisibility {
  """The repository is visible only to users in the same business."""
  INTERNAL

  """The repository is visible only to those with explicit access."""
  PRIVATE

  """The repository is visible to everyone."""
  PUBLIC
}

"""Audit log entry for a repo.add_member event."""
type GitHubRepoAddMemberAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOrganizationAuditEntryData & GitHubRepositoryAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """"""
  id: ID!

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The repository associated with the action"""
  repository: GitHubRepository

  """The name of the repository"""
  repositoryName: String

  """The HTTP path for the repository"""
  repositoryResourcePath: GitHubURI

  """The HTTP URL for the repository"""
  repositoryUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI

  """The visibility of the repository"""
  visibility: GitHubRepoAddMemberAuditEntryVisibility
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

enum GitHubRepoAccessAuditEntryVisibility {
  """The repository is visible only to users in the same business."""
  INTERNAL

  """The repository is visible only to those with explicit access."""
  PRIVATE

  """The repository is visible to everyone."""
  PUBLIC
}

"""Audit log entry for a repo.access event."""
type GitHubRepoAccessAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOrganizationAuditEntryData & GitHubRepositoryAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """"""
  id: ID!

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The repository associated with the action"""
  repository: GitHubRepository

  """The name of the repository"""
  repositoryName: String

  """The HTTP path for the repository"""
  repositoryResourcePath: GitHubURI

  """The HTTP URL for the repository"""
  repositoryUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI

  """The visibility of the repository"""
  visibility: GitHubRepoAccessAuditEntryVisibility
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Audit log entry for a private_repository_forking.enable event."""
type GitHubPrivateRepositoryForkingEnableAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubEnterpriseAuditEntryData & GitHubNode & GitHubOrganizationAuditEntryData & GitHubRepositoryAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """The HTTP path for this enterprise."""
  enterpriseResourcePath: GitHubURI

  """The slug of the enterprise."""
  enterpriseSlug: String

  """The HTTP URL for this enterprise."""
  enterpriseUrl: GitHubURI

  """"""
  id: ID!

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The repository associated with the action"""
  repository: GitHubRepository

  """The name of the repository"""
  repositoryName: String

  """The HTTP path for the repository"""
  repositoryResourcePath: GitHubURI

  """The HTTP URL for the repository"""
  repositoryUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Audit log entry for a private_repository_forking.disable event."""
type GitHubPrivateRepositoryForkingDisableAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubEnterpriseAuditEntryData & GitHubNode & GitHubOrganizationAuditEntryData & GitHubRepositoryAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """The HTTP path for this enterprise."""
  enterpriseResourcePath: GitHubURI

  """The slug of the enterprise."""
  enterpriseSlug: String

  """The HTTP URL for this enterprise."""
  enterpriseUrl: GitHubURI

  """"""
  id: ID!

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The repository associated with the action"""
  repository: GitHubRepository

  """The name of the repository"""
  repositoryName: String

  """The HTTP path for the repository"""
  repositoryResourcePath: GitHubURI

  """The HTTP URL for the repository"""
  repositoryUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Metadata for an audit entry with action repo.*"""
interface GitHubRepositoryAuditEntryData {
  """The repository associated with the action"""
  repository: GitHubRepository

  """The name of the repository"""
  repositoryName: String

  """The HTTP path for the repository"""
  repositoryResourcePath: GitHubURI

  """The HTTP URL for the repository"""
  repositoryUrl: GitHubURI
}

"""Metadata for a repository membership for org.restore_member actions"""
type GitHubOrgRestoreMemberMembershipRepositoryAuditEntryData implements GitHubRepositoryAuditEntryData {
  """The repository associated with the action"""
  repository: GitHubRepository

  """The name of the repository"""
  repositoryName: String

  """The HTTP path for the repository"""
  repositoryResourcePath: GitHubURI

  """The HTTP URL for the repository"""
  repositoryUrl: GitHubURI
}

"""Metadata for an organization membership for org.restore_member actions"""
type GitHubOrgRestoreMemberMembershipOrganizationAuditEntryData implements GitHubOrganizationAuditEntryData {
  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI
}

"""Types of memberships that can be restored for an Organization member."""
union GitHubOrgRestoreMemberAuditEntryMembership = GitHubOrgRestoreMemberMembershipOrganizationAuditEntryData | GitHubOrgRestoreMemberMembershipRepositoryAuditEntryData | GitHubOrgRestoreMemberMembershipTeamAuditEntryData

"""Audit log entry for a org.restore_member event."""
type GitHubOrgRestoreMemberAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOrganizationAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """"""
  id: ID!

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The number of custom email routings for the restored member."""
  restoredCustomEmailRoutingsCount: Int

  """The number of issue assignments for the restored member."""
  restoredIssueAssignmentsCount: Int

  """Restored organization membership objects."""
  restoredMemberships: [GitHubOrgRestoreMemberAuditEntryMembership!]

  """The number of restored memberships."""
  restoredMembershipsCount: Int

  """The number of repositories of the restored member."""
  restoredRepositoriesCount: Int

  """The number of starred repositories for the restored member."""
  restoredRepositoryStarsCount: Int

  """The number of watched repositories for the restored member."""
  restoredRepositoryWatchesCount: Int

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

enum GitHubOrgRemoveOutsideCollaboratorAuditEntryReason {
  """
  The organization required 2FA of its billing managers and this user did not have 2FA enabled.
  """
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE

  """SAML external identity missing"""
  SAML_EXTERNAL_IDENTITY_MISSING
}

enum GitHubOrgRemoveOutsideCollaboratorAuditEntryMembershipType {
  """
  An outside collaborator is a person who isn't explicitly a member of the Organization, but who has Read, Write, or Admin permissions to one or more repositories in the organization.
  """
  OUTSIDE_COLLABORATOR

  """
  An unaffiliated collaborator is a person who is not a member of the Organization and does not have access to any repositories in the organization.
  """
  UNAFFILIATED

  """
  A billing manager is a user who manages the billing settings for the Organization, such as updating payment information.
  """
  BILLING_MANAGER
}

"""Audit log entry for a org.remove_outside_collaborator event."""
type GitHubOrgRemoveOutsideCollaboratorAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOrganizationAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """"""
  id: ID!

  """
  The types of membership the outside collaborator has with the organization.
  """
  membershipTypes: [GitHubOrgRemoveOutsideCollaboratorAuditEntryMembershipType!]

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """
  The reason for the outside collaborator being removed from the Organization.
  """
  reason: GitHubOrgRemoveOutsideCollaboratorAuditEntryReason

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

enum GitHubOrgRemoveMemberAuditEntryReason {
  """
  The organization required 2FA of its billing managers and this user did not have 2FA enabled.
  """
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE

  """SAML external identity missing"""
  SAML_EXTERNAL_IDENTITY_MISSING

  """SAML SSO enforcement requires an external identity"""
  SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY

  """User account has been deleted"""
  USER_ACCOUNT_DELETED

  """User was removed from organization during account recovery"""
  TWO_FACTOR_ACCOUNT_RECOVERY
}

enum GitHubOrgRemoveMemberAuditEntryMembershipType {
  """A direct member is a user that is a member of the Organization."""
  DIRECT_MEMBER

  """
  Organization administrators have full access and can change several settings, including the names of repositories that belong to the Organization and Owners team membership. In addition, organization admins can delete the organization and all of its repositories.
  """
  ADMIN

  """
  A billing manager is a user who manages the billing settings for the Organization, such as updating payment information.
  """
  BILLING_MANAGER

  """
  An unaffiliated collaborator is a person who is not a member of the Organization and does not have access to any repositories in the Organization.
  """
  UNAFFILIATED

  """
  An outside collaborator is a person who isn't explicitly a member of the Organization, but who has Read, Write, or Admin permissions to one or more repositories in the organization.
  """
  OUTSIDE_COLLABORATOR
}

"""Audit log entry for a org.remove_member event."""
type GitHubOrgRemoveMemberAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOrganizationAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """"""
  id: ID!

  """The types of membership the member has with the organization."""
  membershipTypes: [GitHubOrgRemoveMemberAuditEntryMembershipType!]

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The reason for the member being removed."""
  reason: GitHubOrgRemoveMemberAuditEntryReason

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

enum GitHubOrgRemoveBillingManagerAuditEntryReason {
  """
  The organization required 2FA of its billing managers and this user did not have 2FA enabled.
  """
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE

  """SAML external identity missing"""
  SAML_EXTERNAL_IDENTITY_MISSING

  """SAML SSO enforcement requires an external identity"""
  SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY
}

"""Audit log entry for a org.remove_billing_manager event."""
type GitHubOrgRemoveBillingManagerAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOrganizationAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """"""
  id: ID!

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The reason for the billing manager being removed."""
  reason: GitHubOrgRemoveBillingManagerAuditEntryReason

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Audit log entry for a org.invite_to_business event."""
type GitHubOrgInviteToBusinessAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubEnterpriseAuditEntryData & GitHubNode & GitHubOrganizationAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """The HTTP path for this enterprise."""
  enterpriseResourcePath: GitHubURI

  """The slug of the enterprise."""
  enterpriseSlug: String

  """The HTTP URL for this enterprise."""
  enterpriseUrl: GitHubURI

  """"""
  id: ID!

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

enum GitHubOrganizationInvitationRole {
  """The user is invited to be a direct member of the organization."""
  DIRECT_MEMBER

  """The user is invited to be an admin of the organization."""
  ADMIN

  """The user is invited to be a billing manager of the organization."""
  BILLING_MANAGER

  """The user's previous role will be reinstated."""
  REINSTATE
}

enum GitHubOrganizationInvitationType {
  """The invitation was to an existing user."""
  USER

  """The invitation was to an email address."""
  EMAIL
}

"""An Invitation for a user to an organization."""
type GitHubOrganizationInvitation implements OneGraphNode & GitHubNode {
  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """The email address of the user invited to the organization."""
  email: String

  """"""
  id: ID!

  """The type of invitation that was sent (e.g. email, user)."""
  invitationType: GitHubOrganizationInvitationType!

  """The user who was invited to the organization."""
  invitee: GitHubUser

  """The user who created the invitation."""
  inviter: GitHubUser!

  """The organization the invite is for"""
  organization: GitHubOrganization!

  """The user's pending role in the organization (e.g. member, owner)."""
  role: GitHubOrganizationInvitationRole!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Audit log entry for a org.invite_member event."""
type GitHubOrgInviteMemberAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOrganizationAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """The email address of the organization invitation."""
  email: String

  """"""
  id: ID!

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The organization invitation."""
  organizationInvitation: GitHubOrganizationInvitation

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Audit log entry for a org.enable_two_factor_requirement event."""
type GitHubOrgEnableTwoFactorRequirementAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOrganizationAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """"""
  id: ID!

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Audit log entry for a org.enable_saml event."""
type GitHubOrgEnableSamlAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOrganizationAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """The SAML provider's digest algorithm URL."""
  digestMethodUrl: GitHubURI

  """"""
  id: ID!

  """The SAML provider's issuer URL."""
  issuerUrl: GitHubURI

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The SAML provider's signature algorithm URL."""
  signatureMethodUrl: GitHubURI

  """The SAML provider's single sign-on URL."""
  singleSignOnUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Audit log entry for a org.enable_oauth_app_restrictions event."""
type GitHubOrgEnableOauthAppRestrictionsAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOrganizationAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """"""
  id: ID!

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Audit log entry for a org.disable_two_factor_requirement event."""
type GitHubOrgDisableTwoFactorRequirementAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOrganizationAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """"""
  id: ID!

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Audit log entry for a org.disable_saml event."""
type GitHubOrgDisableSamlAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOrganizationAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """The SAML provider's digest algorithm URL."""
  digestMethodUrl: GitHubURI

  """"""
  id: ID!

  """The SAML provider's issuer URL."""
  issuerUrl: GitHubURI

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The SAML provider's signature algorithm URL."""
  signatureMethodUrl: GitHubURI

  """The SAML provider's single sign-on URL."""
  singleSignOnUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Audit log entry for a org.disable_oauth_app_restrictions event."""
type GitHubOrgDisableOauthAppRestrictionsAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOrganizationAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """"""
  id: ID!

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

enum GitHubOrgCreateAuditEntryBillingPlan {
  """Free Plan"""
  FREE

  """Team Plan"""
  BUSINESS

  """Enterprise Cloud Plan"""
  BUSINESS_PLUS

  """Legacy Unlimited Plan"""
  UNLIMITED

  """Tiered Per Seat Plan"""
  TIERED_PER_SEAT
}

"""Audit log entry for a org.create event."""
type GitHubOrgCreateAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOrganizationAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The billing plan for the Organization."""
  billingPlan: GitHubOrgCreateAuditEntryBillingPlan

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """"""
  id: ID!

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Audit log entry for a org.config.enable_collaborators_only event."""
type GitHubOrgConfigEnableCollaboratorsOnlyAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOrganizationAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """"""
  id: ID!

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Audit log entry for a org.config.disable_collaborators_only event."""
type GitHubOrgConfigDisableCollaboratorsOnlyAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOrganizationAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """"""
  id: ID!

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Audit log entry for a org.block_user"""
type GitHubOrgBlockUserAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOrganizationAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The blocked user."""
  blockedUser: GitHubUser

  """The username of the blocked user."""
  blockedUserName: String

  """The HTTP path for the blocked user."""
  blockedUserResourcePath: GitHubURI

  """The HTTP URL for the blocked user."""
  blockedUserUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """"""
  id: ID!

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

enum GitHubOrgAddMemberAuditEntryPermission {
  """Can read and clone repositories."""
  READ

  """Can read, clone, push, and add collaborators to repositories."""
  ADMIN
}

"""Audit log entry for a org.add_member"""
type GitHubOrgAddMemberAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOrganizationAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """"""
  id: ID!

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The permission level of the member added to the organization."""
  permission: GitHubOrgAddMemberAuditEntryPermission

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Audit log entry for a org.add_billing_manager"""
type GitHubOrgAddBillingManagerAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOrganizationAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """"""
  id: ID!

  """
  The email address used to invite a billing manager for the organization.
  """
  invitationEmail: String

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Audit log entry for a org.oauth_app_access_requested event."""
type GitHubOrgOauthAppAccessRequestedAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOauthApplicationAuditEntryData & GitHubOrganizationAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """"""
  id: ID!

  """The name of the OAuth Application."""
  oauthApplicationName: String

  """The HTTP path for the OAuth Application"""
  oauthApplicationResourcePath: GitHubURI

  """The HTTP URL for the OAuth Application"""
  oauthApplicationUrl: GitHubURI

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Audit log entry for a org.oauth_app_access_denied event."""
type GitHubOrgOauthAppAccessDeniedAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOauthApplicationAuditEntryData & GitHubOrganizationAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """"""
  id: ID!

  """The name of the OAuth Application."""
  oauthApplicationName: String

  """The HTTP path for the OAuth Application"""
  oauthApplicationResourcePath: GitHubURI

  """The HTTP URL for the OAuth Application"""
  oauthApplicationUrl: GitHubURI

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Audit log entry for a org.oauth_app_access_approved event."""
type GitHubOrgOauthAppAccessApprovedAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOauthApplicationAuditEntryData & GitHubOrganizationAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """"""
  id: ID!

  """The name of the OAuth Application."""
  oauthApplicationName: String

  """The HTTP path for the OAuth Application"""
  oauthApplicationResourcePath: GitHubURI

  """The HTTP URL for the OAuth Application"""
  oauthApplicationUrl: GitHubURI

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Metadata for an audit entry with action oauth_application.*"""
interface GitHubOauthApplicationAuditEntryData {
  """The name of the OAuth Application."""
  oauthApplicationName: String

  """The HTTP path for the OAuth Application"""
  oauthApplicationResourcePath: GitHubURI

  """The HTTP URL for the OAuth Application"""
  oauthApplicationUrl: GitHubURI
}

enum GitHubOauthApplicationCreateAuditEntryState {
  """The OAuth Application was active and allowed to have OAuth Accesses."""
  ACTIVE

  """
  The OAuth Application was suspended from generating OAuth Accesses due to abuse or security concerns.
  """
  SUSPENDED

  """The OAuth Application was in the process of being deleted."""
  PENDING_DELETION
}

"""Audit log entry for a oauth_application.create event."""
type GitHubOauthApplicationCreateAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubNode & GitHubOauthApplicationAuditEntryData & GitHubOrganizationAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The application URL of the OAuth Application."""
  applicationUrl: GitHubURI

  """The callback URL of the OAuth Application."""
  callbackUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """"""
  id: ID!

  """The name of the OAuth Application."""
  oauthApplicationName: String

  """The HTTP path for the OAuth Application"""
  oauthApplicationResourcePath: GitHubURI

  """The HTTP URL for the OAuth Application"""
  oauthApplicationUrl: GitHubURI

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The rate limit of the OAuth Application."""
  rateLimit: Int

  """The state of the OAuth Application."""
  state: GitHubOauthApplicationCreateAuditEntryState

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Metadata for an audit entry with action org.*"""
interface GitHubOrganizationAuditEntryData {
  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI
}

"""Audit log entry for a members_can_delete_repos.enable event."""
type GitHubMembersCanDeleteReposEnableAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubEnterpriseAuditEntryData & GitHubNode & GitHubOrganizationAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """The HTTP path for this enterprise."""
  enterpriseResourcePath: GitHubURI

  """The slug of the enterprise."""
  enterpriseSlug: String

  """The HTTP URL for this enterprise."""
  enterpriseUrl: GitHubURI

  """"""
  id: ID!

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Metadata for an audit entry containing enterprise account information."""
interface GitHubEnterpriseAuditEntryData {
  """The HTTP path for this enterprise."""
  enterpriseResourcePath: GitHubURI

  """The slug of the enterprise."""
  enterpriseSlug: String

  """The HTTP URL for this enterprise."""
  enterpriseUrl: GitHubURI
}

"""Audit log entry for a members_can_delete_repos.disable event."""
type GitHubMembersCanDeleteReposDisableAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubEnterpriseAuditEntryData & GitHubNode & GitHubOrganizationAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """The HTTP path for this enterprise."""
  enterpriseResourcePath: GitHubURI

  """The slug of the enterprise."""
  enterpriseSlug: String

  """The HTTP URL for this enterprise."""
  enterpriseUrl: GitHubURI

  """"""
  id: ID!

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An entry in the audit log."""
interface GitHubAuditEntry {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
}

enum GitHubOperationType {
  """An existing resource was accessed"""
  ACCESS

  """A resource performed an authentication event"""
  AUTHENTICATION

  """A new resource was created"""
  CREATE

  """An existing resource was modified"""
  MODIFY

  """An existing resource was removed"""
  REMOVE

  """An existing resource was restored"""
  RESTORE

  """An existing resource was transferred between multiple resources"""
  TRANSFER
}

"""An ISO-8601 encoded UTC date string with millisecond precision."""
scalar GitHubPreciseDateTime

"""Location information for an actor"""
type GitHubActorLocation {
  """City"""
  city: String

  """Country name"""
  country: String

  """Country code"""
  countryCode: String

  """Region name"""
  region: String

  """Region or state code"""
  regionCode: String
}

"""Types that can initiate an audit log event."""
union GitHubAuditEntryActor = GitHubBot | GitHubOrganization | GitHubUser

"""Audit log entry for a members_can_delete_repos.clear event."""
type GitHubMembersCanDeleteReposClearAuditEntry implements OneGraphNode & GitHubAuditEntry & GitHubEnterpriseAuditEntryData & GitHubNode & GitHubOrganizationAuditEntryData {
  """The action name"""
  action: String!

  """The user who initiated the action"""
  actor: GitHubAuditEntryActor

  """The IP address of the actor"""
  actorIp: String

  """A readable representation of the actor's location"""
  actorLocation: GitHubActorLocation

  """The username of the user who initiated the action"""
  actorLogin: String

  """The HTTP path for the actor."""
  actorResourcePath: GitHubURI

  """The HTTP URL for the actor."""
  actorUrl: GitHubURI

  """The time the action was initiated"""
  createdAt: GitHubPreciseDateTime!

  """The HTTP path for this enterprise."""
  enterpriseResourcePath: GitHubURI

  """The slug of the enterprise."""
  enterpriseSlug: String

  """The HTTP URL for this enterprise."""
  enterpriseUrl: GitHubURI

  """"""
  id: ID!

  """The corresponding operation type for the action"""
  operationType: GitHubOperationType

  """The Organization associated with the Audit Entry."""
  organization: GitHubOrganization

  """The name of the Organization."""
  organizationName: String

  """The HTTP path for the organization"""
  organizationResourcePath: GitHubURI

  """The HTTP URL for the organization"""
  organizationUrl: GitHubURI

  """The user affected by the action"""
  user: GitHubUser

  """
  For actions involving two users, the actor is the initiator and the user is the affected user.
  """
  userLogin: String

  """The HTTP path for the user."""
  userResourcePath: GitHubURI

  """The HTTP URL for the user."""
  userUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An audit entry in an organization audit log."""
union GitHubOrganizationAuditEntry = GitHubMembersCanDeleteReposClearAuditEntry | GitHubMembersCanDeleteReposDisableAuditEntry | GitHubMembersCanDeleteReposEnableAuditEntry | GitHubOauthApplicationCreateAuditEntry | GitHubOrgAddBillingManagerAuditEntry | GitHubOrgAddMemberAuditEntry | GitHubOrgBlockUserAuditEntry | GitHubOrgConfigDisableCollaboratorsOnlyAuditEntry | GitHubOrgConfigEnableCollaboratorsOnlyAuditEntry | GitHubOrgCreateAuditEntry | GitHubOrgDisableOauthAppRestrictionsAuditEntry | GitHubOrgDisableSamlAuditEntry | GitHubOrgDisableTwoFactorRequirementAuditEntry | GitHubOrgEnableOauthAppRestrictionsAuditEntry | GitHubOrgEnableSamlAuditEntry | GitHubOrgEnableTwoFactorRequirementAuditEntry | GitHubOrgInviteMemberAuditEntry | GitHubOrgInviteToBusinessAuditEntry | GitHubOrgOauthAppAccessApprovedAuditEntry | GitHubOrgOauthAppAccessDeniedAuditEntry | GitHubOrgOauthAppAccessRequestedAuditEntry | GitHubOrgRemoveBillingManagerAuditEntry | GitHubOrgRemoveMemberAuditEntry | GitHubOrgRemoveOutsideCollaboratorAuditEntry | GitHubOrgRestoreMemberAuditEntry | GitHubOrgUnblockUserAuditEntry | GitHubOrgUpdateDefaultRepositoryPermissionAuditEntry | GitHubOrgUpdateMemberAuditEntry | GitHubOrgUpdateMemberRepositoryCreationPermissionAuditEntry | GitHubOrgUpdateMemberRepositoryInvitationPermissionAuditEntry | GitHubPrivateRepositoryForkingDisableAuditEntry | GitHubPrivateRepositoryForkingEnableAuditEntry | GitHubRepoAccessAuditEntry | GitHubRepoAddMemberAuditEntry | GitHubRepoAddTopicAuditEntry | GitHubRepoArchivedAuditEntry | GitHubRepoChangeMergeSettingAuditEntry | GitHubRepoConfigDisableAnonymousGitAccessAuditEntry | GitHubRepoConfigDisableCollaboratorsOnlyAuditEntry | GitHubRepoConfigDisableContributorsOnlyAuditEntry | GitHubRepoConfigDisableSockpuppetDisallowedAuditEntry | GitHubRepoConfigEnableAnonymousGitAccessAuditEntry | GitHubRepoConfigEnableCollaboratorsOnlyAuditEntry | GitHubRepoConfigEnableContributorsOnlyAuditEntry | GitHubRepoConfigEnableSockpuppetDisallowedAuditEntry | GitHubRepoConfigLockAnonymousGitAccessAuditEntry | GitHubRepoConfigUnlockAnonymousGitAccessAuditEntry | GitHubRepoCreateAuditEntry | GitHubRepoDestroyAuditEntry | GitHubRepoRemoveMemberAuditEntry | GitHubRepoRemoveTopicAuditEntry | GitHubRepositoryVisibilityChangeDisableAuditEntry | GitHubRepositoryVisibilityChangeEnableAuditEntry | GitHubTeamAddMemberAuditEntry | GitHubTeamAddRepositoryAuditEntry | GitHubTeamChangeParentTeamAuditEntry | GitHubTeamRemoveMemberAuditEntry | GitHubTeamRemoveRepositoryAuditEntry

"""An edge in a connection."""
type GitHubOrganizationAuditEntryEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubOrganizationAuditEntry
}

"""The connection type for OrganizationAuditEntry."""
type GitHubOrganizationAuditEntryConnection {
  """A list of edges."""
  edges: [GitHubOrganizationAuditEntryEdge]

  """A list of nodes."""
  nodes: [GitHubOrganizationAuditEntry]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""
An account on GitHub, with one or more owners, that has repositories, members and teams.
"""
type GitHubOrganization implements OneGraphNode & GitHubActor & GitHubMemberStatusable & GitHubNode & GitHubPackageOwner & GitHubProfileOwner & GitHubProjectOwner & GitHubRepositoryDiscussionAuthor & GitHubRepositoryDiscussionCommentAuthor & GitHubRepositoryOwner & GitHubSponsorable & GitHubUniformResourceLocatable {
  """
  Determine if this repository owner has any items that can be pinned to their profile.
  """
  anyPinnableItems(
    """Filter to only a particular kind of pinnable item."""
    type: GitHubPinnableItemType
  ): Boolean!

  """Audit log entries of the organization"""
  auditLog(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """The query string to filter audit entries"""
    query: String

    """Ordering options for the returned audit log entries."""
    orderBy: GitHubAuditLogOrder = {field: CREATED_AT, direction: DESC}
  ): GitHubOrganizationAuditEntryConnection!

  """A URL pointing to the organization's public avatar."""
  avatarUrl(
    """The size of the resulting square image."""
    size: Int
  ): GitHubURI!

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """Identifies the primary key from the database."""
  databaseId: Int

  """The organization's public profile description."""
  description: String

  """The organization's public profile description rendered to HTML."""
  descriptionHTML: String

  """A list of domains owned by the organization."""
  domains(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filter by if the domain is verified."""
    isVerified: Boolean

    """Ordering options for verifiable domains returned."""
    orderBy: GitHubVerifiableDomainOrder = {field: DOMAIN, direction: ASC}
  ): GitHubVerifiableDomainConnection

  """The organization's public email."""
  email: String

  """True if this user/organization has a GitHub Sponsors listing."""
  hasSponsorsListing: Boolean!

  """"""
  id: ID!

  """The interaction ability settings for this organization."""
  interactionAbility: GitHubRepositoryInteractionAbility

  """
  The setting value for whether the organization has an IP allow list enabled.
  """
  ipAllowListEnabledSetting: GitHubIpAllowListEnabledSettingValue!

  """
  The IP addresses that are allowed to access resources owned by the organization.
  """
  ipAllowListEntries(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for IP allow list entries returned."""
    orderBy: GitHubIpAllowListEntryOrder = {field: ALLOW_LIST_VALUE, direction: ASC}
  ): GitHubIpAllowListEntryConnection!

  """Check if the given account is sponsoring this user/organization."""
  isSponsoredBy(
    """The target account's login."""
    accountLogin: String!
  ): Boolean!

  """True if the viewer is sponsored by this user/organization."""
  isSponsoringViewer: Boolean!

  """Whether the organization has verified its profile email and website."""
  isVerified: Boolean!

  """
  Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity.
  """
  itemShowcase: GitHubProfileItemShowcase!

  """The organization's public profile location."""
  location: String

  """The organization's login name."""
  login: String!

  """
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  """
  memberStatuses(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for user statuses returned from the connection."""
    orderBy: GitHubUserStatusOrder = {field: UPDATED_AT, direction: DESC}
  ): GitHubUserStatusConnection!

  """A list of users who are members of this organization."""
  membersWithRole(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubOrganizationMemberConnection!

  """The organization's public profile name."""
  name: String

  """The HTTP path creating a new team"""
  newTeamResourcePath: GitHubURI!

  """The HTTP URL creating a new team"""
  newTeamUrl: GitHubURI!

  """
  Indicates if email notification delivery for this organization is restricted to verified domains.
  """
  notificationDeliveryRestrictionEnabledSetting: GitHubNotificationRestrictionSettingValue!

  """The billing email for the organization."""
  organizationBillingEmail: String

  """A list of packages under the owner."""
  packages(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Find packages by their names."""
    names: [String]

    """Find packages in a repository by ID."""
    repositoryId: ID

    """Filter registry package by type."""
    packageType: GitHubPackageType

    """Ordering of the returned packages."""
    orderBy: GitHubPackageOrder = {field: CREATED_AT, direction: DESC}
  ): GitHubPackageConnection!

  """A list of users who have been invited to join this organization."""
  pendingMembers(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubUserConnection!

  """
  A list of repositories and gists this profile owner can pin to their profile.
  """
  pinnableItems(
    """Filter the types of pinnable items that are returned."""
    types: [GitHubPinnableItemType!]

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubPinnableItemConnection!

  """
  A list of repositories and gists this profile owner has pinned to their profile
  """
  pinnedItems(
    """Filter the types of pinned items that are returned."""
    types: [GitHubPinnableItemType!]

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubPinnableItemConnection!

  """
  Returns how many more items this profile owner can pin to their profile.
  """
  pinnedItemsRemaining: Int!

  """Find project by number."""
  project(
    """The project number to find."""
    number: Int!
  ): GitHubProject

  """A list of projects under the owner."""
  projects(
    """Ordering options for projects returned from the connection"""
    orderBy: GitHubProjectOrder

    """Query to search projects by, currently only searching by name."""
    search: String

    """A list of states to filter the projects by."""
    states: [GitHubProjectState!]

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubProjectConnection!

  """The HTTP path listing organization's projects"""
  projectsResourcePath: GitHubURI!

  """The HTTP URL listing organization's projects"""
  projectsUrl: GitHubURI!

  """A list of repositories that the user owns."""
  repositories(
    """If non-null, filters repositories according to privacy"""
    privacy: GitHubRepositoryPrivacy

    """Ordering options for repositories returned from the connection"""
    orderBy: GitHubRepositoryOrder

    """
    Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns.
    """
    affiliations: [GitHubRepositoryAffiliation]

    """
    Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns.
    """
    ownerAffiliations: [GitHubRepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean
  ): GitHubRepositoryConnection!

  """Find Repository."""
  repository(
    """Name of Repository to find."""
    name: String!
  ): GitHubRepository

  """Discussion comments this user has authored."""
  repositoryDiscussionComments(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filter discussion comments to only those in a specific repository."""
    repositoryId: ID

    """
    Filter discussion comments to only those that were marked as the answer
    """
    onlyAnswers: Boolean = false
  ): GitHubDiscussionCommentConnection!

  """Discussions this user has started."""
  repositoryDiscussions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for discussions returned from the connection."""
    orderBy: GitHubDiscussionOrder = {field: CREATED_AT, direction: DESC}

    """Filter discussions to only those in a specific repository."""
    repositoryId: ID

    """
    Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions.
    """
    answered: Boolean
  ): GitHubDiscussionConnection!

  """
  When true the organization requires all members, billing managers, and outside collaborators to enable two-factor authentication.
  """
  requiresTwoFactorAuthentication: Boolean

  """The HTTP path for this organization."""
  resourcePath: GitHubURI!

  """The Organization's SAML identity providers"""
  samlIdentityProvider: GitHubOrganizationIdentityProvider

  """The GitHub Sponsors listing for this user or organization."""
  sponsorsListing: GitHubSponsorsListing

  """The viewer's sponsorship of this entity."""
  sponsorshipForViewerAsSponsor: GitHubSponsorship

  """This object's sponsorships as the maintainer."""
  sponsorshipsAsMaintainer(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Whether or not to include private sponsorships in the result set"""
    includePrivate: Boolean = false

    """
    Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: GitHubSponsorshipOrder
  ): GitHubSponsorshipConnection!

  """This object's sponsorships as the sponsor."""
  sponsorshipsAsSponsor(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: GitHubSponsorshipOrder
  ): GitHubSponsorshipConnection!

  """Find an organization's team by its slug."""
  team(
    """The name or slug of the team to find."""
    slug: String!
  ): GitHubTeam

  """A list of teams in this organization."""
  teams(
    """If non-null, filters teams according to privacy"""
    privacy: GitHubTeamPrivacy

    """
    If non-null, filters teams according to whether the viewer is an admin or member on team
    """
    role: GitHubTeamRole

    """If non-null, filters teams with query on team name and team slug"""
    query: String

    """User logins to filter by"""
    userLogins: [String!]

    """Ordering options for teams returned from the connection"""
    orderBy: GitHubTeamOrder

    """
    If true, filters teams that are mapped to an LDAP Group (Enterprise only)
    """
    ldapMapped: Boolean

    """If true, restrict to only root teams"""
    rootTeamsOnly: Boolean = false

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubTeamConnection!

  """The HTTP path listing organization's teams"""
  teamsResourcePath: GitHubURI!

  """The HTTP URL listing organization's teams"""
  teamsUrl: GitHubURI!

  """The organization's Twitter username."""
  twitterUsername: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: GitHubDateTime!

  """The HTTP URL for this organization."""
  url: GitHubURI!

  """Organization is adminable by the viewer."""
  viewerCanAdminister: Boolean!

  """Can the viewer pin repositories and gists to the profile?"""
  viewerCanChangePinnedItems: Boolean!

  """Can the current viewer create new projects on this owner."""
  viewerCanCreateProjects: Boolean!

  """Viewer can create repositories on this organization"""
  viewerCanCreateRepositories: Boolean!

  """Viewer can create teams on this organization."""
  viewerCanCreateTeams: Boolean!

  """Whether or not the viewer is able to sponsor this user/organization."""
  viewerCanSponsor: Boolean!

  """Viewer is an active member of this organization."""
  viewerIsAMember: Boolean!

  """True if the viewer is sponsoring this user/organization."""
  viewerIsSponsoring: Boolean!

  """The organization's public profile URL."""
  websiteUrl: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""A level of permission and source for a user's access to a repository."""
type GitHubPermissionSource {
  """The organization the repository belongs to."""
  organization: GitHubOrganization!

  """The level of access this source has granted to the user."""
  permission: GitHubDefaultRepositoryPermissionField!

  """The source of this permission."""
  source: GitHubPermissionGranter!
}

enum GitHubRepositoryPermission {
  """
  Can read, clone, and push to this repository. Can also manage issues, pull requests, and repository settings, including adding collaborators
  """
  ADMIN

  """
  Can read, clone, and push to this repository. They can also manage issues, pull requests, and some repository settings
  """
  MAINTAIN

  """
  Can read, clone, and push to this repository. Can also manage issues and pull requests
  """
  WRITE

  """
  Can read and clone this repository. Can also manage issues and pull requests
  """
  TRIAGE

  """
  Can read and clone this repository. Can also open and comment on issues and pull requests
  """
  READ
}

"""Represents a user who is a collaborator of a repository."""
type GitHubRepositoryCollaboratorEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """"""
  node: GitHubUser!

  """The permission the user has on the repository."""
  permission: GitHubRepositoryPermission!

  """A list of sources for the user's access to the repository."""
  permissionSources: [GitHubPermissionSource!]
}

"""The connection type for User."""
type GitHubRepositoryCollaboratorConnection {
  """A list of edges."""
  edges: [GitHubRepositoryCollaboratorEdge]

  """A list of nodes."""
  nodes: [GitHubUser]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""The Code of Conduct for a repository"""
type GitHubCodeOfConduct implements OneGraphNode & GitHubNode {
  """The body of the Code of Conduct"""
  body: String

  """"""
  id: ID!

  """The key for the Code of Conduct"""
  key: String!

  """The formal name of the Code of Conduct"""
  name: String!

  """The HTTP path for this Code of Conduct"""
  resourcePath: GitHubURI

  """The HTTP URL for this Code of Conduct"""
  url: GitHubURI
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Types that can be an actor."""
union GitHubReviewDismissalAllowanceActor = GitHubTeam | GitHubUser

"""
A team or user who has the ability to dismiss a review on a protected branch.
"""
type GitHubReviewDismissalAllowance implements OneGraphNode & GitHubNode {
  """The actor that can dismiss."""
  actor: GitHubReviewDismissalAllowanceActor

  """
  Identifies the branch protection rule associated with the allowed user or team.
  """
  branchProtectionRule: GitHubBranchProtectionRule

  """"""
  id: ID!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An edge in a connection."""
type GitHubReviewDismissalAllowanceEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubReviewDismissalAllowance
}

"""The connection type for ReviewDismissalAllowance."""
type GitHubReviewDismissalAllowanceConnection {
  """A list of edges."""
  edges: [GitHubReviewDismissalAllowanceEdge]

  """A list of nodes."""
  nodes: [GitHubReviewDismissalAllowance]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A team, user or app who has the ability to push to a protected branch."""
type GitHubPushAllowance implements OneGraphNode & GitHubNode {
  """The actor that can push."""
  actor: GitHubPushAllowanceActor

  """
  Identifies the branch protection rule associated with the allowed user or team.
  """
  branchProtectionRule: GitHubBranchProtectionRule

  """"""
  id: ID!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An edge in a connection."""
type GitHubPushAllowanceEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubPushAllowance
}

"""The connection type for PushAllowance."""
type GitHubPushAllowanceConnection {
  """A list of edges."""
  edges: [GitHubPushAllowanceEdge]

  """A list of nodes."""
  nodes: [GitHubPushAllowance]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type GitHubRefEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubRef
}

"""The connection type for Ref."""
type GitHubRefConnection {
  """A list of edges."""
  edges: [GitHubRefEdge]

  """A list of nodes."""
  nodes: [GitHubRef]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""
A pointer to a repository at a specific revision embedded inside another repository.
"""
type GitHubSubmodule {
  """The branch of the upstream submodule for tracking updates"""
  branch: String

  """The git URL of the submodule repository"""
  gitUrl: GitHubURI!

  """The name of the submodule in .gitmodules"""
  name: String!

  """The path in the superproject that this submodule is located in"""
  path: String!

  """
  The commit revision of the subproject repository being tracked by the submodule
  """
  subprojectCommitOid: GitHubGitObjectID
}

"""Represents a Git tree entry."""
type GitHubTreeEntry {
  """The extension of the file"""
  extension: String

  """Whether or not this tree entry is generated"""
  isGenerated: Boolean!

  """Entry file mode."""
  mode: Int!

  """Entry file name."""
  name: String!

  """Entry file object."""
  object: GitHubGitObject

  """Entry file Git object ID."""
  oid: GitHubGitObjectID!

  """The full path of the file."""
  path: String

  """The Repository the tree entry belongs to"""
  repository: GitHubRepository!

  """
  If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule
  """
  submodule: GitHubSubmodule

  """Entry file type."""
  type: String!
}

"""Represents a Git tree."""
type GitHubTree implements OneGraphNode & GitHubGitObject & GitHubNode {
  """An abbreviated version of the Git object ID"""
  abbreviatedOid: String!

  """The HTTP path for this Git object"""
  commitResourcePath: GitHubURI!

  """The HTTP URL for this Git object"""
  commitUrl: GitHubURI!

  """A list of tree entries."""
  entries: [GitHubTreeEntry!]

  """"""
  id: ID!

  """The Git object ID"""
  oid: GitHubGitObjectID!

  """The Repository the Git object belongs to"""
  repository: GitHubRepository!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""
An ISO-8601 encoded date string. Unlike the DateTime type, GitTimestamp is not converted in UTC.
"""
scalar GitHubGitTimestamp

"""Represents an actor in a Git commit (ie. an author or committer)."""
type GitHubGitActor {
  """A URL pointing to the author's public avatar."""
  avatarUrl(
    """The size of the resulting square image."""
    size: Int
  ): GitHubURI!

  """The timestamp of the Git action (authoring or committing)."""
  date: GitHubGitTimestamp

  """The email in the Git commit."""
  email: String

  """The name in the Git commit."""
  name: String

  """
  The GitHub user corresponding to the email field. Null if no such user exists.
  """
  user: GitHubUser
}

"""Represents a Git tag."""
type GitHubTag implements OneGraphNode & GitHubGitObject & GitHubNode {
  """An abbreviated version of the Git object ID"""
  abbreviatedOid: String!

  """The HTTP path for this Git object"""
  commitResourcePath: GitHubURI!

  """The HTTP URL for this Git object"""
  commitUrl: GitHubURI!

  """"""
  id: ID!

  """The Git tag message."""
  message: String

  """The Git tag name."""
  name: String!

  """The Git object ID"""
  oid: GitHubGitObjectID!

  """The Repository the Git object belongs to"""
  repository: GitHubRepository!

  """Details about the tag author."""
  tagger: GitHubGitActor

  """The Git object the tag points to."""
  target: GitHubGitObject!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""A Git object ID."""
scalar GitHubGitObjectID

"""Represents a Git blob."""
type GitHubBlob implements OneGraphNode & GitHubGitObject & GitHubNode {
  """An abbreviated version of the Git object ID"""
  abbreviatedOid: String!

  """Byte size of Blob object"""
  byteSize: Int!

  """The HTTP path for this Git object"""
  commitResourcePath: GitHubURI!

  """The HTTP URL for this Git object"""
  commitUrl: GitHubURI!

  """"""
  id: ID!

  """
  Indicates whether the Blob is binary or text. Returns null if unable to determine the encoding.
  """
  isBinary: Boolean

  """Indicates whether the contents is truncated"""
  isTruncated: Boolean!

  """The Git object ID"""
  oid: GitHubGitObjectID!

  """The Repository the Git object belongs to"""
  repository: GitHubRepository!

  """UTF8 text data or null if the Blob is binary"""
  text: String
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Represents a Git object."""
interface GitHubGitObject {
  """An abbreviated version of the Git object ID"""
  abbreviatedOid: String!

  """The HTTP path for this Git object"""
  commitResourcePath: GitHubURI!

  """The HTTP URL for this Git object"""
  commitUrl: GitHubURI!

  """"""
  id: ID!

  """The Git object ID"""
  oid: GitHubGitObjectID!

  """The Repository the Git object belongs to"""
  repository: GitHubRepository!
}

"""A ref update rules for a viewer."""
type GitHubRefUpdateRule {
  """Can this branch be deleted."""
  allowsDeletions: Boolean!

  """Are force pushes allowed on this branch."""
  allowsForcePushes: Boolean!

  """Identifies the protection rule pattern."""
  pattern: String!

  """Number of approving reviews required to update matching branches."""
  requiredApprovingReviewCount: Int

  """
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  """
  requiredStatusCheckContexts: [String]

  """Are reviews from code owners required to update matching branches."""
  requiresCodeOwnerReviews: Boolean!

  """Are merge commits prohibited from being pushed to this branch."""
  requiresLinearHistory: Boolean!

  """Are commits required to be signed."""
  requiresSignatures: Boolean!

  """Is the viewer allowed to dismiss reviews."""
  viewerAllowedToDismissReviews: Boolean!

  """Can the viewer push to the branch"""
  viewerCanPush: Boolean!
}

enum GitHubPullRequestState {
  """A pull request that is still open."""
  OPEN

  """A pull request that has been closed without being merged."""
  CLOSED

  """A pull request that has been closed by being merged."""
  MERGED
}

enum GitHubIssueOrderField {
  """Order issues by creation time"""
  CREATED_AT

  """Order issues by update time"""
  UPDATED_AT

  """Order issues by comment count"""
  COMMENTS
}

"""Ways in which lists of issues can be ordered upon return."""
input GitHubIssueOrder {
  """The field in which to order issues by."""
  field: GitHubIssueOrderField!

  """The direction in which to order issues by the specified field."""
  direction: GitHubOrderDirection!
}

"""Represents a Git reference."""
type GitHubRef implements OneGraphNode & GitHubNode {
  """A list of pull requests with this ref as the head ref."""
  associatedPullRequests(
    """A list of states to filter the pull requests by."""
    states: [GitHubPullRequestState!]

    """A list of label names to filter the pull requests by."""
    labels: [String!]

    """The head ref name to filter the pull requests by."""
    headRefName: String

    """The base ref name to filter the pull requests by."""
    baseRefName: String

    """Ordering options for pull requests returned from the connection."""
    orderBy: GitHubIssueOrder

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubPullRequestConnection!

  """Branch protection rules for this ref"""
  branchProtectionRule: GitHubBranchProtectionRule

  """"""
  id: ID!

  """The ref name."""
  name: String!

  """The ref's prefix, such as `refs/heads/` or `refs/tags/`."""
  prefix: String!

  """Branch protection rules that are viewable by non-admins"""
  refUpdateRule: GitHubRefUpdateRule

  """The repository the ref belongs to."""
  repository: GitHubRepository!

  """The object the ref points to. Returns null when object does not exist."""
  target: GitHubGitObject
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""A conflict between two branch protection rules."""
type GitHubBranchProtectionRuleConflict {
  """Identifies the branch protection rule."""
  branchProtectionRule: GitHubBranchProtectionRule

  """Identifies the conflicting branch protection rule."""
  conflictingBranchProtectionRule: GitHubBranchProtectionRule

  """Identifies the branch ref that has conflicting rules"""
  ref: GitHubRef
}

"""An edge in a connection."""
type GitHubBranchProtectionRuleConflictEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubBranchProtectionRuleConflict
}

"""The connection type for BranchProtectionRuleConflict."""
type GitHubBranchProtectionRuleConflictConnection {
  """A list of edges."""
  edges: [GitHubBranchProtectionRuleConflictEdge]

  """A list of nodes."""
  nodes: [GitHubBranchProtectionRuleConflict]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A branch protection rule."""
type GitHubBranchProtectionRule implements OneGraphNode & GitHubNode {
  """Can this branch be deleted."""
  allowsDeletions: Boolean!

  """Are force pushes allowed on this branch."""
  allowsForcePushes: Boolean!

  """
  A list of conflicts matching branches protection rule and other branch protection rules
  """
  branchProtectionRuleConflicts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubBranchProtectionRuleConflictConnection!

  """The actor who created this branch protection rule."""
  creator: GitHubActor

  """Identifies the primary key from the database."""
  databaseId: Int

  """
  Will new commits pushed to matching branches dismiss pull request review approvals.
  """
  dismissesStaleReviews: Boolean!

  """"""
  id: ID!

  """Can admins overwrite branch protection."""
  isAdminEnforced: Boolean!

  """Repository refs that are protected by this rule"""
  matchingRefs(
    """Filters refs with query on name"""
    query: String

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubRefConnection!

  """Identifies the protection rule pattern."""
  pattern: String!

  """A list push allowances for this branch protection rule."""
  pushAllowances(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubPushAllowanceConnection!

  """The repository associated with this branch protection rule."""
  repository: GitHubRepository

  """Number of approving reviews required to update matching branches."""
  requiredApprovingReviewCount: Int

  """
  List of required status check contexts that must pass for commits to be accepted to matching branches.
  """
  requiredStatusCheckContexts: [String]

  """Are approving reviews required to update matching branches."""
  requiresApprovingReviews: Boolean!

  """Are reviews from code owners required to update matching branches."""
  requiresCodeOwnerReviews: Boolean!

  """Are commits required to be signed."""
  requiresCommitSignatures: Boolean!

  """Are merge commits prohibited from being pushed to this branch."""
  requiresLinearHistory: Boolean!

  """Are status checks required to update matching branches."""
  requiresStatusChecks: Boolean!

  """Are branches required to be up to date before merging."""
  requiresStrictStatusChecks: Boolean!

  """Is pushing to matching branches restricted."""
  restrictsPushes: Boolean!

  """Is dismissal of pull request reviews restricted."""
  restrictsReviewDismissals: Boolean!

  """A list review dismissal allowances for this branch protection rule."""
  reviewDismissalAllowances(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubReviewDismissalAllowanceConnection!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An edge in a connection."""
type GitHubBranchProtectionRuleEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubBranchProtectionRule
}

"""The connection type for BranchProtectionRule."""
type GitHubBranchProtectionRuleConnection {
  """A list of edges."""
  edges: [GitHubBranchProtectionRuleEdge]

  """A list of nodes."""
  nodes: [GitHubBranchProtectionRule]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A repository contains the content for a project."""
type GitHubRepository implements OneGraphNode & GitHubNode & GitHubPackageOwner & GitHubProjectOwner & GitHubRepositoryInfo & GitHubStarrable & GitHubSubscribable & GitHubUniformResourceLocatable {
  """A list of users that can be assigned to issues in this repository."""
  assignableUsers(
    """Filters users with query on user name and login"""
    query: String

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubUserConnection!

  """A list of branch protection rules for this repository."""
  branchProtectionRules(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubBranchProtectionRuleConnection!

  """Returns the code of conduct for this repository"""
  codeOfConduct: GitHubCodeOfConduct

  """A list of collaborators associated with the repository."""
  collaborators(
    """Collaborators affiliation level with a repository."""
    affiliation: GitHubCollaboratorAffiliation

    """Filters users with query on user name and login"""
    query: String

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubRepositoryCollaboratorConnection

  """A list of commit comments associated with the repository."""
  commitComments(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubCommitCommentConnection!

  """Returns a list of contact links associated to the repository"""
  contactLinks: [GitHubRepositoryContactLink!]

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """Identifies the primary key from the database."""
  databaseId: Int

  """The Ref associated with the repository's default branch."""
  defaultBranchRef: GitHubRef

  """
  Whether or not branches are automatically deleted when merged in this repository.
  """
  deleteBranchOnMerge: Boolean!

  """A list of deploy keys that are on this repository."""
  deployKeys(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubDeployKeyConnection!

  """Deployments associated with the repository"""
  deployments(
    """Environments to list deployments for"""
    environments: [String!]

    """Ordering options for deployments returned from the connection."""
    orderBy: GitHubDeploymentOrder = {field: CREATED_AT, direction: ASC}

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubDeploymentConnection!

  """The description of the repository."""
  description: String

  """The description of the repository rendered to HTML."""
  descriptionHTML: GitHubHTML!

  """Returns a single discussion from the current repository by number."""
  discussion(
    """The number for the discussion to be returned."""
    number: Int!
  ): GitHubDiscussion

  """A list of discussion categories that are available in the repository."""
  discussionCategories(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubDiscussionCategoryConnection!

  """A list of discussions that have been opened in the repository."""
  discussions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Only include discussions that belong to the category with this ID."""
    categoryId: ID

    """Ordering options for discussions returned from the connection."""
    orderBy: GitHubDiscussionOrder = {field: UPDATED_AT, direction: DESC}
  ): GitHubDiscussionConnection!

  """The number of kilobytes this repository occupies on disk."""
  diskUsage: Int

  """
  Returns how many forks there are of this repository in the whole network.
  """
  forkCount: Int!

  """A list of direct forked repositories."""
  forks(
    """If non-null, filters repositories according to privacy"""
    privacy: GitHubRepositoryPrivacy

    """Ordering options for repositories returned from the connection"""
    orderBy: GitHubRepositoryOrder

    """
    Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns.
    """
    affiliations: [GitHubRepositoryAffiliation]

    """
    Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns.
    """
    ownerAffiliations: [GitHubRepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubRepositoryConnection!

  """The funding links for this repository"""
  fundingLinks: [GitHubFundingLink!]!

  """Indicates if the repository has issues feature enabled."""
  hasIssuesEnabled: Boolean!

  """Indicates if the repository has the Projects feature enabled."""
  hasProjectsEnabled: Boolean!

  """Indicates if the repository has wiki feature enabled."""
  hasWikiEnabled: Boolean!

  """The repository's URL."""
  homepageUrl: GitHubURI

  """"""
  id: ID!

  """The interaction ability settings for this repository."""
  interactionAbility: GitHubRepositoryInteractionAbility

  """Indicates if the repository is unmaintained."""
  isArchived: Boolean!

  """Returns true if blank issue creation is allowed"""
  isBlankIssuesEnabled: Boolean!

  """Returns whether or not this repository disabled."""
  isDisabled: Boolean!

  """Returns whether or not this repository is empty."""
  isEmpty: Boolean!

  """Identifies if the repository is a fork."""
  isFork: Boolean!

  """
  Indicates if a repository is either owned by an organization, or is a private fork of an organization repository.
  """
  isInOrganization: Boolean!

  """Indicates if the repository has been locked or not."""
  isLocked: Boolean!

  """Identifies if the repository is a mirror."""
  isMirror: Boolean!

  """Identifies if the repository is private or internal."""
  isPrivate: Boolean!

  """Returns true if this repository has a security policy"""
  isSecurityPolicyEnabled: Boolean

  """
  Identifies if the repository is a template that can be used to generate new repositories.
  """
  isTemplate: Boolean!

  """Is this repository a user configuration repository?"""
  isUserConfigurationRepository: Boolean!

  """Returns a single issue from the current repository by number."""
  issue(
    """The number for the issue to be returned."""
    number: Int!
  ): GitHubIssue

  """
  Returns a single issue-like object from the current repository by number.
  """
  issueOrPullRequest(
    """The number for the issue to be returned."""
    number: Int!
  ): GitHubIssueOrPullRequest

  """Returns a list of issue templates associated to the repository"""
  issueTemplates: [GitHubIssueTemplate!]

  """A list of issues that have been opened in the repository."""
  issues(
    """Ordering options for issues returned from the connection."""
    orderBy: GitHubIssueOrder

    """A list of label names to filter the pull requests by."""
    labels: [String!]

    """A list of states to filter the issues by."""
    states: [GitHubIssueState!]

    """Filtering options for issues returned from the connection."""
    filterBy: GitHubIssueFilters

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubIssueConnection!

  """Returns a single label by name"""
  label(
    """Label name"""
    name: String!
  ): GitHubLabel

  """A list of labels associated with the repository."""
  labels(
    """Ordering options for labels returned from the connection."""
    orderBy: GitHubLabelOrder = {field: CREATED_AT, direction: ASC}

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """If provided, searches labels by name and description."""
    query: String
  ): GitHubLabelConnection

  """
  A list containing a breakdown of the language composition of the repository.
  """
  languages(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Order for connection"""
    orderBy: GitHubLanguageOrder
  ): GitHubLanguageConnection

  """Get the latest release for the repository if one exists."""
  latestRelease: GitHubRelease

  """The license associated with the repository"""
  licenseInfo: GitHubLicense

  """The reason the repository has been locked."""
  lockReason: GitHubRepositoryLockReason

  """
  A list of Users that can be mentioned in the context of the repository.
  """
  mentionableUsers(
    """Filters users with query on user name and login"""
    query: String

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubUserConnection!

  """Whether or not PRs are merged with a merge commit on this repository."""
  mergeCommitAllowed: Boolean!

  """Returns a single milestone from the current repository by number."""
  milestone(
    """The number for the milestone to be returned."""
    number: Int!
  ): GitHubMilestone

  """A list of milestones associated with the repository."""
  milestones(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filter by the state of the milestones."""
    states: [GitHubMilestoneState!]

    """Ordering options for milestones."""
    orderBy: GitHubMilestoneOrder

    """Filters milestones with a query on the title"""
    query: String
  ): GitHubMilestoneConnection

  """The repository's original mirror URL."""
  mirrorUrl: GitHubURI

  """The name of the repository."""
  name: String!

  """The repository's name with owner."""
  nameWithOwner: String!

  """A Git object in the repository"""
  object(
    """The Git object ID"""
    oid: GitHubGitObjectID

    """A Git revision expression suitable for rev-parse"""
    expression: String
  ): GitHubGitObject

  """The image used to represent this repository in Open Graph data."""
  openGraphImageUrl: GitHubURI!

  """The User owner of the repository."""
  owner: GitHubRepositoryOwner!

  """A list of packages under the owner."""
  packages(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Find packages by their names."""
    names: [String]

    """Find packages in a repository by ID."""
    repositoryId: ID

    """Filter registry package by type."""
    packageType: GitHubPackageType

    """Ordering of the returned packages."""
    orderBy: GitHubPackageOrder = {field: CREATED_AT, direction: DESC}
  ): GitHubPackageConnection!

  """The repository parent, if this is a fork."""
  parent: GitHubRepository

  """A list of discussions that have been pinned in this repository."""
  pinnedDiscussions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubPinnedDiscussionConnection!

  """A list of pinned issues for this repository."""
  pinnedIssues(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubPinnedIssueConnection

  """The primary language of the repository's code."""
  primaryLanguage: GitHubLanguage

  """Find project by number."""
  project(
    """The project number to find."""
    number: Int!
  ): GitHubProject

  """A list of projects under the owner."""
  projects(
    """Ordering options for projects returned from the connection"""
    orderBy: GitHubProjectOrder

    """Query to search projects by, currently only searching by name."""
    search: String

    """A list of states to filter the projects by."""
    states: [GitHubProjectState!]

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubProjectConnection!

  """The HTTP path listing the repository's projects"""
  projectsResourcePath: GitHubURI!

  """The HTTP URL listing the repository's projects"""
  projectsUrl: GitHubURI!

  """Returns a single pull request from the current repository by number."""
  pullRequest(
    """The number for the pull request to be returned."""
    number: Int!
  ): GitHubPullRequest

  """A list of pull requests that have been opened in the repository."""
  pullRequests(
    """A list of states to filter the pull requests by."""
    states: [GitHubPullRequestState!]

    """A list of label names to filter the pull requests by."""
    labels: [String!]

    """The head ref name to filter the pull requests by."""
    headRefName: String

    """The base ref name to filter the pull requests by."""
    baseRefName: String

    """Ordering options for pull requests returned from the connection."""
    orderBy: GitHubIssueOrder

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubPullRequestConnection!

  """Identifies when the repository was last pushed to."""
  pushedAt: GitHubDateTime

  """Whether or not rebase-merging is enabled on this repository."""
  rebaseMergeAllowed: Boolean!

  """Fetch a given ref from the repository"""
  ref(
    """
    The ref to retrieve. Fully qualified matches are checked in order (`refs/heads/master`) before falling back onto checks for short name matches (`master`).
    """
    qualifiedName: String!
  ): GitHubRef

  """Fetch a list of refs from the repository"""
  refs(
    """Filters refs with query on name"""
    query: String

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """A ref name prefix like `refs/heads/`, `refs/tags/`, etc."""
    refPrefix: String!

    """DEPRECATED: use orderBy. The ordering direction."""
    direction: GitHubOrderDirection

    """Ordering options for refs returned from the connection."""
    orderBy: GitHubRefOrder
  ): GitHubRefConnection

  """Lookup a single release given various criteria."""
  release(
    """The name of the Tag the Release was created from"""
    tagName: String!
  ): GitHubRelease

  """List of releases which are dependent on this repository."""
  releases(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Order for connection"""
    orderBy: GitHubReleaseOrder
  ): GitHubReleaseConnection!

  """A list of applied repository-topic associations for this repository."""
  repositoryTopics(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubRepositoryTopicConnection!

  """The HTTP path for this repository"""
  resourcePath: GitHubURI!

  """The security policy URL."""
  securityPolicyUrl: GitHubURI

  """
  A description of the repository, rendered to HTML without any links in it.
  """
  shortDescriptionHTML(
    """How many characters to return."""
    limit: Int = 200
  ): GitHubHTML!

  """Whether or not squash-merging is enabled on this repository."""
  squashMergeAllowed: Boolean!

  """The SSH URL to clone this repository"""
  sshUrl: GitHubGitSSHRemote!

  """
  Returns a count of how many stargazers there are on this object
  
  """
  stargazerCount: Int!

  """A list of users who have starred this starrable."""
  stargazers(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Order for connection"""
    orderBy: GitHubStarOrder
  ): GitHubStargazerConnection!

  """
  Returns a list of all submodules in this repository parsed from the .gitmodules file as of the default branch's HEAD commit.
  """
  submodules(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubSubmoduleConnection!

  """Temporary authentication token for cloning this repository."""
  tempCloneToken: String

  """The repository from which this repository was generated, if any."""
  templateRepository: GitHubRepository

  """Identifies the date and time when the object was last updated."""
  updatedAt: GitHubDateTime!

  """The HTTP URL for this repository"""
  url: GitHubURI!

  """
  Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar.
  """
  usesCustomOpenGraphImage: Boolean!

  """Indicates whether the viewer has admin permissions on this repository."""
  viewerCanAdminister: Boolean!

  """Can the current viewer create new projects on this owner."""
  viewerCanCreateProjects: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!

  """Indicates whether the viewer can update the topics of this repository."""
  viewerCanUpdateTopics: Boolean!

  """The last commit email for the viewer."""
  viewerDefaultCommitEmail: String

  """
  The last used merge method by the viewer or the default for the repository.
  """
  viewerDefaultMergeMethod: GitHubPullRequestMergeMethod!

  """
  Returns a boolean indicating whether the viewing user has starred this starrable.
  """
  viewerHasStarred: Boolean!

  """
  The users permission level on the repository. Will return null if authenticated as an GitHub App.
  """
  viewerPermission: GitHubRepositoryPermission

  """A list of emails this viewer can commit with."""
  viewerPossibleCommitEmails: [String!]

  """
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  """
  viewerSubscription: GitHubSubscriptionState

  """A list of vulnerability alerts that are on this repository."""
  vulnerabilityAlerts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubRepositoryVulnerabilityAlertConnection

  """A list of users watching the repository."""
  watchers(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubUserConnection!

  """Whether a the current user is a collaborator on this repository"""
  viewerIsCollaborator_oneGraph: Boolean! @deprecated(reason: "*Temporary mutation until GitHub implemements their own `viewerIsCollaborator` field for a repository.*")

  """
  Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API v3 caches contributor data to improve performance.
  
  Note that GitHub identifies contributors by author email address. This field groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
  """
  contributors_oneGraph(
    """The pagination cursor used to control which results you want"""
    after: String
    includeAnonymousContributors: Boolean = false
  ): GitHubRepositoryContributorConnection! @deprecated(reason: "*Temporary mutation until GitHub implemements their own `contributors` field for a repostiory.*")
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Represents the contribution a user made by committing to a repository."""
type GitHubCreatedCommitContribution implements GitHubContribution {
  """How many commits were made on this day to this repository by the user."""
  commitCount: Int!

  """
  Whether this contribution is associated with a record you do not have access to. For
  example, your own 'first issue' contribution may have been made on a repository you can no
  longer access.
  
  """
  isRestricted: Boolean!

  """When this contribution was made."""
  occurredAt: GitHubDateTime!

  """The repository the user made a commit in."""
  repository: GitHubRepository!

  """The HTTP path for this contribution."""
  resourcePath: GitHubURI!

  """The HTTP URL for this contribution."""
  url: GitHubURI!

  """
  The user who made this contribution.
  
  """
  user: GitHubUser!
}

"""An edge in a connection."""
type GitHubCreatedCommitContributionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubCreatedCommitContribution
}

"""The connection type for CreatedCommitContribution."""
type GitHubCreatedCommitContributionConnection {
  """A list of edges."""
  edges: [GitHubCreatedCommitContributionEdge]

  """A list of nodes."""
  nodes: [GitHubCreatedCommitContribution]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """
  Identifies the total count of commits across days and repositories in the connection.
  
  """
  totalCount: Int!
}

"""This aggregates commits made by a user within one repository."""
type GitHubCommitContributionsByRepository {
  """The commit contributions, each representing a day."""
  contributions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Ordering options for commit contributions returned from the connection.
    """
    orderBy: GitHubCommitContributionOrder = {field: OCCURRED_AT, direction: DESC}
  ): GitHubCreatedCommitContributionConnection!

  """The repository in which the commits were made."""
  repository: GitHubRepository!

  """
  The HTTP path for the user's commits to the repository in this time range.
  """
  resourcePath: GitHubURI!

  """
  The HTTP URL for the user's commits to the repository in this time range.
  """
  url: GitHubURI!
}

"""
A contributions collection aggregates contributions such as opened issues and commits created by a user.
"""
type GitHubContributionsCollection {
  """Commit contributions made by the user, grouped by repository."""
  commitContributionsByRepository(
    """How many repositories should be included."""
    maxRepositories: Int = 25
  ): [GitHubCommitContributionsByRepository!]!

  """A calendar of this user's contributions on GitHub."""
  contributionCalendar: GitHubContributionCalendar!

  """
  The years the user has been making contributions with the most recent year first.
  """
  contributionYears: [Int!]!

  """
  Determine if this collection's time span ends in the current month.
  
  """
  doesEndInCurrentMonth: Boolean!

  """
  The date of the first restricted contribution the user made in this time period. Can only be non-null when the user has enabled private contribution counts.
  """
  earliestRestrictedContributionDate: GitHubDate

  """The ending date and time of this collection."""
  endedAt: GitHubDateTime!

  """
  The first issue the user opened on GitHub. This will be null if that issue was opened outside the collection's time range and ignoreTimeRange is false. If the issue is not visible but the user has opted to show private contributions, a RestrictedContribution will be returned.
  """
  firstIssueContribution: GitHubCreatedIssueOrRestrictedContribution

  """
  The first pull request the user opened on GitHub. This will be null if that pull request was opened outside the collection's time range and ignoreTimeRange is not true. If the pull request is not visible but the user has opted to show private contributions, a RestrictedContribution will be returned.
  """
  firstPullRequestContribution: GitHubCreatedPullRequestOrRestrictedContribution

  """
  The first repository the user created on GitHub. This will be null if that first repository was created outside the collection's time range and ignoreTimeRange is false. If the repository is not visible, then a RestrictedContribution is returned.
  """
  firstRepositoryContribution: GitHubCreatedRepositoryOrRestrictedContribution

  """
  Does the user have any more activity in the timeline that occurred prior to the collection's time range?
  """
  hasActivityInThePast: Boolean!

  """Determine if there are any contributions in this collection."""
  hasAnyContributions: Boolean!

  """
  Determine if the user made any contributions in this time frame whose details are not visible because they were made in a private repository. Can only be true if the user enabled private contribution counts.
  """
  hasAnyRestrictedContributions: Boolean!

  """Whether or not the collector's time span is all within the same day."""
  isSingleDay: Boolean!

  """A list of issues the user opened."""
  issueContributions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Should the user's first issue ever be excluded from the result."""
    excludeFirst: Boolean = false

    """Should the user's most commented issue be excluded from the result."""
    excludePopular: Boolean = false

    """Ordering options for contributions returned from the connection."""
    orderBy: GitHubContributionOrder = {direction: DESC}
  ): GitHubCreatedIssueContributionConnection!

  """Issue contributions made by the user, grouped by repository."""
  issueContributionsByRepository(
    """How many repositories should be included."""
    maxRepositories: Int = 25

    """Should the user's first issue ever be excluded from the result."""
    excludeFirst: Boolean = false

    """Should the user's most commented issue be excluded from the result."""
    excludePopular: Boolean = false
  ): [GitHubIssueContributionsByRepository!]!

  """
  When the user signed up for GitHub. This will be null if that sign up date falls outside the collection's time range and ignoreTimeRange is false.
  """
  joinedGitHubContribution: GitHubJoinedGitHubContribution

  """
  The date of the most recent restricted contribution the user made in this time period. Can only be non-null when the user has enabled private contribution counts.
  """
  latestRestrictedContributionDate: GitHubDate

  """
  When this collection's time range does not include any activity from the user, use this
  to get a different collection from an earlier time range that does have activity.
  
  """
  mostRecentCollectionWithActivity: GitHubContributionsCollection

  """
  Returns a different contributions collection from an earlier time range than this one
  that does not have any contributions.
  
  """
  mostRecentCollectionWithoutActivity: GitHubContributionsCollection

  """
  The issue the user opened on GitHub that received the most comments in the specified
  time frame.
  
  """
  popularIssueContribution: GitHubCreatedIssueContribution

  """
  The pull request the user opened on GitHub that received the most comments in the
  specified time frame.
  
  """
  popularPullRequestContribution: GitHubCreatedPullRequestContribution

  """Pull request contributions made by the user."""
  pullRequestContributions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Should the user's first pull request ever be excluded from the result."""
    excludeFirst: Boolean = false

    """
    Should the user's most commented pull request be excluded from the result.
    """
    excludePopular: Boolean = false

    """Ordering options for contributions returned from the connection."""
    orderBy: GitHubContributionOrder = {direction: DESC}
  ): GitHubCreatedPullRequestContributionConnection!

  """Pull request contributions made by the user, grouped by repository."""
  pullRequestContributionsByRepository(
    """How many repositories should be included."""
    maxRepositories: Int = 25

    """Should the user's first pull request ever be excluded from the result."""
    excludeFirst: Boolean = false

    """
    Should the user's most commented pull request be excluded from the result.
    """
    excludePopular: Boolean = false
  ): [GitHubPullRequestContributionsByRepository!]!

  """Pull request review contributions made by the user."""
  pullRequestReviewContributions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for contributions returned from the connection."""
    orderBy: GitHubContributionOrder = {direction: DESC}
  ): GitHubCreatedPullRequestReviewContributionConnection!

  """
  Pull request review contributions made by the user, grouped by repository.
  """
  pullRequestReviewContributionsByRepository(
    """How many repositories should be included."""
    maxRepositories: Int = 25
  ): [GitHubPullRequestReviewContributionsByRepository!]!

  """
  A list of repositories owned by the user that the user created in this time range.
  """
  repositoryContributions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Should the user's first repository ever be excluded from the result."""
    excludeFirst: Boolean = false

    """Ordering options for contributions returned from the connection."""
    orderBy: GitHubContributionOrder = {direction: DESC}
  ): GitHubCreatedRepositoryContributionConnection!

  """
  A count of contributions made by the user that the viewer cannot access. Only non-zero when the user has chosen to share their private contribution counts.
  """
  restrictedContributionsCount: Int!

  """The beginning date and time of this collection."""
  startedAt: GitHubDateTime!

  """How many commits were made by the user in this time span."""
  totalCommitContributions: Int!

  """How many issues the user opened."""
  totalIssueContributions(
    """Should the user's first issue ever be excluded from this count."""
    excludeFirst: Boolean = false

    """Should the user's most commented issue be excluded from this count."""
    excludePopular: Boolean = false
  ): Int!

  """How many pull requests the user opened."""
  totalPullRequestContributions(
    """Should the user's first pull request ever be excluded from this count."""
    excludeFirst: Boolean = false

    """
    Should the user's most commented pull request be excluded from this count.
    """
    excludePopular: Boolean = false
  ): Int!

  """How many pull request reviews the user left."""
  totalPullRequestReviewContributions: Int!

  """How many different repositories the user committed to."""
  totalRepositoriesWithContributedCommits: Int!

  """How many different repositories the user opened issues in."""
  totalRepositoriesWithContributedIssues(
    """Should the user's first issue ever be excluded from this count."""
    excludeFirst: Boolean = false

    """Should the user's most commented issue be excluded from this count."""
    excludePopular: Boolean = false
  ): Int!

  """How many different repositories the user left pull request reviews in."""
  totalRepositoriesWithContributedPullRequestReviews: Int!

  """How many different repositories the user opened pull requests in."""
  totalRepositoriesWithContributedPullRequests(
    """Should the user's first pull request ever be excluded from this count."""
    excludeFirst: Boolean = false

    """
    Should the user's most commented pull request be excluded from this count.
    """
    excludePopular: Boolean = false
  ): Int!

  """How many repositories the user created."""
  totalRepositoryContributions(
    """Should the user's first repository ever be excluded from this count."""
    excludeFirst: Boolean = false
  ): Int!

  """The user who made the contributions in this collection."""
  user: GitHubUser!
}

"""An edge in a connection."""
type GitHubCommitCommentEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubCommitComment
}

"""The connection type for CommitComment."""
type GitHubCommitCommentConnection {
  """A list of edges."""
  edges: [GitHubCommitCommentEdge]

  """A list of nodes."""
  nodes: [GitHubCommitComment]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

enum GitHubPinnableItemType {
  """A repository."""
  REPOSITORY

  """A gist."""
  GIST

  """An issue."""
  ISSUE

  """A project."""
  PROJECT

  """A pull request."""
  PULL_REQUEST

  """A user."""
  USER

  """An organization."""
  ORGANIZATION

  """A team."""
  TEAM
}

"""
A user is an individual's account on GitHub that owns repositories and can make new content.
"""
type GitHubUser implements OneGraphNode & GitHubActor & GitHubNode & GitHubPackageOwner & GitHubProfileOwner & GitHubProjectOwner & GitHubRepositoryDiscussionAuthor & GitHubRepositoryDiscussionCommentAuthor & GitHubRepositoryOwner & GitHubSponsorable & GitHubUniformResourceLocatable {
  """
  Determine if this repository owner has any items that can be pinned to their profile.
  """
  anyPinnableItems(
    """Filter to only a particular kind of pinnable item."""
    type: GitHubPinnableItemType
  ): Boolean!

  """A URL pointing to the user's public avatar."""
  avatarUrl(
    """The size of the resulting square image."""
    size: Int
  ): GitHubURI!

  """The user's public profile bio."""
  bio: String

  """The user's public profile bio as HTML."""
  bioHTML: GitHubHTML!

  """A list of commit comments made by this user."""
  commitComments(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubCommitCommentConnection!

  """The user's public profile company."""
  company: String

  """The user's public profile company as HTML."""
  companyHTML: GitHubHTML!

  """
  The collection of contributions this user has made to different repositories.
  """
  contributionsCollection(
    """The ID of the organization used to filter contributions."""
    organizationID: ID

    """
    Only contributions made at this time or later will be counted. If omitted, defaults to a year ago.
    """
    from: GitHubDateTime

    """
    Only contributions made before and up to and including this time will be counted. If omitted, defaults to the current time.
    """
    to: GitHubDateTime
  ): GitHubContributionsCollection!

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """Identifies the primary key from the database."""
  databaseId: Int

  """The user's publicly visible profile email."""
  email: String!

  """A list of users the given user is followed by."""
  followers(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubFollowerConnection!

  """A list of users the given user is following."""
  following(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubFollowingConnection!

  """Find gist by repo name."""
  gist(
    """The gist name to find."""
    name: String!
  ): GitHubGist

  """A list of gist comments made by this user."""
  gistComments(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubGistCommentConnection!

  """A list of the Gists the user has created."""
  gists(
    """Filters Gists according to privacy."""
    privacy: GitHubGistPrivacy

    """Ordering options for gists returned from the connection"""
    orderBy: GitHubGistOrder

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubGistConnection!

  """True if this user/organization has a GitHub Sponsors listing."""
  hasSponsorsListing: Boolean!

  """The hovercard information for this user in a given context"""
  hovercard(
    """The ID of the subject to get the hovercard in the context of"""
    primarySubjectId: ID
  ): GitHubHovercard!

  """"""
  id: ID!

  """The interaction ability settings for this user."""
  interactionAbility: GitHubRepositoryInteractionAbility

  """
  Whether or not this user is a participant in the GitHub Security Bug Bounty.
  """
  isBountyHunter: Boolean!

  """
  Whether or not this user is a participant in the GitHub Campus Experts Program.
  """
  isCampusExpert: Boolean!

  """Whether or not this user is a GitHub Developer Program member."""
  isDeveloperProgramMember: Boolean!

  """Whether or not this user is a GitHub employee."""
  isEmployee: Boolean!

  """Whether or not this user is a member of the GitHub Stars Program."""
  isGitHubStar: Boolean!

  """Whether or not the user has marked themselves as for hire."""
  isHireable: Boolean!

  """Whether or not this user is a site administrator."""
  isSiteAdmin: Boolean!

  """Check if the given account is sponsoring this user/organization."""
  isSponsoredBy(
    """The target account's login."""
    accountLogin: String!
  ): Boolean!

  """True if the viewer is sponsored by this user/organization."""
  isSponsoringViewer: Boolean!

  """Whether or not this user is the viewing user."""
  isViewer: Boolean!

  """A list of issue comments made by this user."""
  issueComments(
    """Ordering options for issue comments returned from the connection."""
    orderBy: GitHubIssueCommentOrder

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubIssueCommentConnection!

  """A list of issues associated with this user."""
  issues(
    """Ordering options for issues returned from the connection."""
    orderBy: GitHubIssueOrder

    """A list of label names to filter the pull requests by."""
    labels: [String!]

    """A list of states to filter the issues by."""
    states: [GitHubIssueState!]

    """Filtering options for issues returned from the connection."""
    filterBy: GitHubIssueFilters

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubIssueConnection!

  """
  Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity.
  """
  itemShowcase: GitHubProfileItemShowcase!

  """The user's public profile location."""
  location: String

  """The username used to login."""
  login: String!

  """The user's public profile name."""
  name: String

  """Find an organization by its login that the user belongs to."""
  organization(
    """The login of the organization to find."""
    login: String!
  ): GitHubOrganization

  """
  Verified email addresses that match verified domains for a specified organization the user is a member of.
  """
  organizationVerifiedDomainEmails(
    """The login of the organization to match verified domains from."""
    login: String!
  ): [String!]!

  """A list of organizations the user belongs to."""
  organizations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubOrganizationConnection!

  """A list of packages under the owner."""
  packages(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Find packages by their names."""
    names: [String]

    """Find packages in a repository by ID."""
    repositoryId: ID

    """Filter registry package by type."""
    packageType: GitHubPackageType

    """Ordering of the returned packages."""
    orderBy: GitHubPackageOrder = {field: CREATED_AT, direction: DESC}
  ): GitHubPackageConnection!

  """
  A list of repositories and gists this profile owner can pin to their profile.
  """
  pinnableItems(
    """Filter the types of pinnable items that are returned."""
    types: [GitHubPinnableItemType!]

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubPinnableItemConnection!

  """
  A list of repositories and gists this profile owner has pinned to their profile
  """
  pinnedItems(
    """Filter the types of pinned items that are returned."""
    types: [GitHubPinnableItemType!]

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubPinnableItemConnection!

  """
  Returns how many more items this profile owner can pin to their profile.
  """
  pinnedItemsRemaining: Int!

  """Find project by number."""
  project(
    """The project number to find."""
    number: Int!
  ): GitHubProject

  """A list of projects under the owner."""
  projects(
    """Ordering options for projects returned from the connection"""
    orderBy: GitHubProjectOrder

    """Query to search projects by, currently only searching by name."""
    search: String

    """A list of states to filter the projects by."""
    states: [GitHubProjectState!]

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubProjectConnection!

  """The HTTP path listing user's projects"""
  projectsResourcePath: GitHubURI!

  """The HTTP URL listing user's projects"""
  projectsUrl: GitHubURI!

  """A list of public keys associated with this user."""
  publicKeys(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubPublicKeyConnection!

  """A list of pull requests associated with this user."""
  pullRequests(
    """A list of states to filter the pull requests by."""
    states: [GitHubPullRequestState!]

    """A list of label names to filter the pull requests by."""
    labels: [String!]

    """The head ref name to filter the pull requests by."""
    headRefName: String

    """The base ref name to filter the pull requests by."""
    baseRefName: String

    """Ordering options for pull requests returned from the connection."""
    orderBy: GitHubIssueOrder

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubPullRequestConnection!

  """A list of repositories that the user owns."""
  repositories(
    """If non-null, filters repositories according to privacy"""
    privacy: GitHubRepositoryPrivacy

    """Ordering options for repositories returned from the connection"""
    orderBy: GitHubRepositoryOrder

    """
    Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns.
    """
    affiliations: [GitHubRepositoryAffiliation]

    """
    Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns.
    """
    ownerAffiliations: [GitHubRepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean
  ): GitHubRepositoryConnection!

  """A list of repositories that the user recently contributed to."""
  repositoriesContributedTo(
    """If non-null, filters repositories according to privacy"""
    privacy: GitHubRepositoryPrivacy

    """Ordering options for repositories returned from the connection"""
    orderBy: GitHubRepositoryOrder

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """If true, include user repositories"""
    includeUserRepositories: Boolean

    """
    If non-null, include only the specified types of contributions. The GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]
    """
    contributionTypes: [GitHubRepositoryContributionType]

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubRepositoryConnection!

  """Find Repository."""
  repository(
    """Name of Repository to find."""
    name: String!
  ): GitHubRepository

  """Discussion comments this user has authored."""
  repositoryDiscussionComments(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filter discussion comments to only those in a specific repository."""
    repositoryId: ID

    """
    Filter discussion comments to only those that were marked as the answer
    """
    onlyAnswers: Boolean = false
  ): GitHubDiscussionCommentConnection!

  """Discussions this user has started."""
  repositoryDiscussions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for discussions returned from the connection."""
    orderBy: GitHubDiscussionOrder = {field: CREATED_AT, direction: DESC}

    """Filter discussions to only those in a specific repository."""
    repositoryId: ID

    """
    Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions.
    """
    answered: Boolean
  ): GitHubDiscussionConnection!

  """The HTTP path for this user"""
  resourcePath: GitHubURI!

  """Replies this user has saved"""
  savedReplies(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """The field to order saved replies by."""
    orderBy: GitHubSavedReplyOrder = {field: UPDATED_AT, direction: DESC}
  ): GitHubSavedReplyConnection

  """The GitHub Sponsors listing for this user or organization."""
  sponsorsListing: GitHubSponsorsListing

  """The viewer's sponsorship of this entity."""
  sponsorshipForViewerAsSponsor: GitHubSponsorship

  """This object's sponsorships as the maintainer."""
  sponsorshipsAsMaintainer(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Whether or not to include private sponsorships in the result set"""
    includePrivate: Boolean = false

    """
    Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: GitHubSponsorshipOrder
  ): GitHubSponsorshipConnection!

  """This object's sponsorships as the sponsor."""
  sponsorshipsAsSponsor(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer.
    """
    orderBy: GitHubSponsorshipOrder
  ): GitHubSponsorshipConnection!

  """Repositories the user has starred."""
  starredRepositories(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Filters starred repositories to only return repositories owned by the viewer.
    """
    ownedByViewer: Boolean

    """Order for connection"""
    orderBy: GitHubStarOrder
  ): GitHubStarredRepositoryConnection!

  """The user's description of what they're currently doing."""
  status: GitHubUserStatus

  """
  Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created
  
  """
  topRepositories(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for repositories returned from the connection"""
    orderBy: GitHubRepositoryOrder!

    """How far back in time to fetch contributed repositories"""
    since: GitHubDateTime
  ): GitHubRepositoryConnection!

  """The user's Twitter username."""
  twitterUsername: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: GitHubDateTime!

  """The HTTP URL for this user"""
  url: GitHubURI!

  """Can the viewer pin repositories and gists to the profile?"""
  viewerCanChangePinnedItems: Boolean!

  """Can the current viewer create new projects on this owner."""
  viewerCanCreateProjects: Boolean!

  """Whether or not the viewer is able to follow the user."""
  viewerCanFollow: Boolean!

  """Whether or not the viewer is able to sponsor this user/organization."""
  viewerCanSponsor: Boolean!

  """Whether or not this user is followed by the viewer."""
  viewerIsFollowing: Boolean!

  """True if the viewer is sponsoring this user/organization."""
  viewerIsSponsoring: Boolean!

  """A list of repositories the given user is watching."""
  watching(
    """If non-null, filters repositories according to privacy"""
    privacy: GitHubRepositoryPrivacy

    """Ordering options for repositories returned from the connection"""
    orderBy: GitHubRepositoryOrder

    """
    Affiliation options for repositories returned from the connection. If none specified, the results will include repositories for which the current viewer is an owner or collaborator, or member.
    """
    affiliations: [GitHubRepositoryAffiliation]

    """
    Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns.
    """
    ownerAffiliations: [GitHubRepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubRepositoryConnection!

  """A URL pointing to the user's public website/blog."""
  websiteUrl: GitHubURI

  """
  If this GitHubUser is the currently logged in viewer, this field will contain a list of emails belonging to this GitHub user.
  
  See the [email address endpoint documentation](https://developer.github.com/v3/users/emails/#list-email-addresses-for-a-user) for more details.
  """
  emailsIfIsViewer_oneGraph(
    """
    Only include the GitHub has considers to be the primary email for this user
    """
    onlyPrimary: Boolean = false

    """Only include emails that GitHub has verified belong to this user"""
    onlyVerified: Boolean = false
  ): [GitHubUserEmail_oneGraph!] @deprecated(reason: "*Temporary field until GitHub implemements their own `emailsIfIsViewer` field for a user.*")
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Represents a user."""
type GitHubUserEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubUser
}

"""The connection type for User."""
type GitHubUserConnection {
  """A list of edges."""
  edges: [GitHubUserEdge]

  """A list of nodes."""
  nodes: [GitHubUser]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

enum GitHubLockReason {
  """
  The issue or pull request was locked because the conversation was off-topic.
  """
  OFF_TOPIC

  """
  The issue or pull request was locked because the conversation was too heated.
  """
  TOO_HEATED

  """
  The issue or pull request was locked because the conversation was resolved.
  """
  RESOLVED

  """
  The issue or pull request was locked because the conversation was spam.
  """
  SPAM
}

"""A repository pull request."""
type GitHubPullRequest implements OneGraphNode & GitHubAssignable & GitHubClosable & GitHubComment & GitHubLabelable & GitHubLockable & GitHubNode & GitHubReactable & GitHubRepositoryNode & GitHubSubscribable & GitHubUniformResourceLocatable & GitHubUpdatable & GitHubUpdatableComment {
  """Reason that the conversation was locked."""
  activeLockReason: GitHubLockReason

  """The number of additions in this pull request."""
  additions: Int!

  """A list of Users assigned to this object."""
  assignees(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubUserConnection!

  """The actor who authored the comment."""
  author: GitHubActor

  """Author's association with the subject of the comment."""
  authorAssociation: GitHubCommentAuthorAssociation!

  """
  Returns the auto-merge request object if one exists for this pull request.
  """
  autoMergeRequest: GitHubAutoMergeRequest

  """Identifies the base Ref associated with the pull request."""
  baseRef: GitHubRef

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitHubGitObjectID!

  """The repository associated with this pull request's base Ref."""
  baseRepository: GitHubRepository

  """The body as Markdown."""
  body: String!

  """The body rendered to HTML."""
  bodyHTML: GitHubHTML!

  """The body rendered to text."""
  bodyText: String!

  """The number of changed files in this pull request."""
  changedFiles: Int!

  """The HTTP path for the checks of this pull request."""
  checksResourcePath: GitHubURI!

  """The HTTP URL for the checks of this pull request."""
  checksUrl: GitHubURI!

  """`true` if the pull request is closed"""
  closed: Boolean!

  """Identifies the date and time when the object was closed."""
  closedAt: GitHubDateTime

  """A list of comments associated with the pull request."""
  comments(
    """Ordering options for issue comments returned from the connection."""
    orderBy: GitHubIssueCommentOrder

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubIssueCommentConnection!

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubPullRequestCommitConnection!

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """Check if this comment was created via an email reply."""
  createdViaEmail: Boolean!

  """Identifies the primary key from the database."""
  databaseId: Int

  """The number of deletions in this pull request."""
  deletions: Int!

  """The actor who edited this pull request's body."""
  editor: GitHubActor

  """Lists the files changed within this pull request."""
  files(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubPullRequestChangedFileConnection

  """Identifies the head Ref associated with the pull request."""
  headRef: GitHubRef

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitHubGitObjectID!

  """The repository associated with this pull request's head Ref."""
  headRepository: GitHubRepository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: GitHubRepositoryOwner

  """The hovercard information for this issue"""
  hovercard(
    """Whether or not to include notification contexts"""
    includeNotificationContexts: Boolean = true
  ): GitHubHovercard!

  """"""
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """The head and base repositories are different."""
  isCrossRepository: Boolean!

  """Identifies if the pull request is a draft."""
  isDraft: Boolean!

  """Is this pull request read by the viewer"""
  isReadByViewer: Boolean

  """A list of labels associated with the object."""
  labels(
    """Ordering options for labels returned from the connection."""
    orderBy: GitHubLabelOrder = {field: CREATED_AT, direction: ASC}

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubLabelConnection

  """The moment the editor made the last edit"""
  lastEditedAt: GitHubDateTime

  """A list of latest reviews per user associated with the pull request."""
  latestOpinionatedReviews(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Only return reviews from user who have write access to the repository"""
    writersOnly: Boolean = false
  ): GitHubPullRequestReviewConnection

  """
  A list of latest reviews per user associated with the pull request that are not also pending review.
  """
  latestReviews(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubPullRequestReviewConnection

  """`true` if the pull request is locked"""
  locked: Boolean!

  """Indicates whether maintainers can modify the pull request."""
  maintainerCanModify: Boolean!

  """The commit that was created when this pull request was merged."""
  mergeCommit: GitHubCommit

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: GitHubMergeableState!

  """Whether or not the pull request was merged."""
  merged: Boolean!

  """The date and time that the pull request was merged."""
  mergedAt: GitHubDateTime

  """The actor who merged the pull request."""
  mergedBy: GitHubActor

  """Identifies the milestone associated with the pull request."""
  milestone: GitHubMilestone

  """Identifies the pull request number."""
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubUserConnection!

  """The permalink to the pull request."""
  permalink: GitHubURI!

  """
  The commit that GitHub automatically generated to test if this pull request could be merged. This field will not return a value if the pull request is merged, or if the test merge commit is still being generated. See the `mergeable` field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: GitHubCommit

  """List of project cards associated with this pull request."""
  projectCards(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """A list of archived states to filter the cards by"""
    archivedStates: [GitHubProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]
  ): GitHubProjectCardConnection!

  """Identifies when the comment was published at."""
  publishedAt: GitHubDateTime

  """A list of reactions grouped by content left on the subject."""
  reactionGroups: [GitHubReactionGroup!]

  """A list of Reactions left on the Issue."""
  reactions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Allows filtering Reactions by emoji."""
    content: GitHubReactionContent

    """Allows specifying the order in which reactions are returned."""
    orderBy: GitHubReactionOrder
  ): GitHubReactionConnection!

  """The repository associated with this node."""
  repository: GitHubRepository!

  """The HTTP path for this pull request."""
  resourcePath: GitHubURI!

  """The HTTP path for reverting this pull request."""
  revertResourcePath: GitHubURI!

  """The HTTP URL for reverting this pull request."""
  revertUrl: GitHubURI!

  """The current status of this pull request with respect to code review."""
  reviewDecision: GitHubPullRequestReviewDecision

  """A list of review requests associated with the pull request."""
  reviewRequests(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubReviewRequestConnection

  """The list of all review threads for this pull request."""
  reviewThreads(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubPullRequestReviewThreadConnection!

  """A list of reviews associated with the pull request."""
  reviews(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """A list of states to filter the reviews."""
    states: [GitHubPullRequestReviewState!]

    """Filter by author of the review."""
    author: String
  ): GitHubPullRequestReviewConnection

  """Identifies the state of the pull request."""
  state: GitHubPullRequestState!

  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [GitHubSuggestedReviewer]!

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """Allows filtering timeline events by a `since` timestamp."""
    since: GitHubDateTime

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubPullRequestTimelineConnection! @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timelineItems(
    """Filter timeline items by a `since` timestamp."""
    since: GitHubDateTime

    """Skips the first _n_ elements in the list."""
    skip: Int

    """Filter timeline items by type."""
    itemTypes: [GitHubPullRequestTimelineItemsItemType!]

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubPullRequestTimelineItemsConnection!

  """Identifies the pull request title."""
  title: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: GitHubDateTime!

  """The HTTP URL for this pull request."""
  url: GitHubURI!

  """A list of edits to this content."""
  userContentEdits(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubUserContentEditConnection

  """Whether or not the viewer can apply suggestion."""
  viewerCanApplySuggestion: Boolean!

  """Check if the viewer can restore the deleted head ref."""
  viewerCanDeleteHeadRef: Boolean!

  """Whether or not the viewer can disable auto-merge"""
  viewerCanDisableAutoMerge: Boolean!

  """Whether or not the viewer can enable auto-merge"""
  viewerCanEnableAutoMerge: Boolean!

  """Can user react to this subject"""
  viewerCanReact: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!

  """Check if the current viewer can update this object."""
  viewerCanUpdate: Boolean!

  """Reasons why the current viewer can not update this comment."""
  viewerCannotUpdateReasons: [GitHubCommentCannotUpdateReason!]!

  """Did the viewer author this comment."""
  viewerDidAuthor: Boolean!

  """The latest review given from the viewer."""
  viewerLatestReview: GitHubPullRequestReview

  """
  The person who has requested the viewer for review on this pull request.
  """
  viewerLatestReviewRequest: GitHubReviewRequest

  """The merge body text for the viewer and method."""
  viewerMergeBodyText(
    """The merge method for the message."""
    mergeType: GitHubPullRequestMergeMethod
  ): String!

  """The merge headline text for the viewer and method."""
  viewerMergeHeadlineText(
    """The merge method for the message."""
    mergeType: GitHubPullRequestMergeMethod
  ): String!

  """
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  """
  viewerSubscription: GitHubSubscriptionState
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An edge in a connection."""
type GitHubPullRequestEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubPullRequest
}

"""The connection type for PullRequest."""
type GitHubPullRequestConnection {
  """A list of edges."""
  edges: [GitHubPullRequestEdge]

  """A list of nodes."""
  nodes: [GitHubPullRequest]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Represents a Git commit."""
type GitHubCommit implements OneGraphNode & GitHubGitObject & GitHubNode & GitHubSubscribable & GitHubUniformResourceLocatable {
  """An abbreviated version of the Git object ID"""
  abbreviatedOid: String!

  """The number of additions in this commit."""
  additions: Int!

  """
  The merged Pull Request that introduced the commit to the repository. If the commit is not present in the default branch, additionally returns open Pull Requests associated with the commit
  """
  associatedPullRequests(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for pull requests."""
    orderBy: GitHubPullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): GitHubPullRequestConnection

  """Authorship details of the commit."""
  author: GitHubGitActor

  """Check if the committer and the author match."""
  authoredByCommitter: Boolean!

  """The datetime when this commit was authored."""
  authoredDate: GitHubDateTime!

  """
  The list of authors for this commit based on the git author and the Co-authored-by
  message trailer. The git author will always be first.
  
  """
  authors(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubGitActorConnection!

  """Fetches `git blame` information."""
  blame(
    """The file whose Git blame information you want."""
    path: String!
  ): GitHubBlame!

  """The number of changed files in this commit."""
  changedFiles: Int!

  """The check suites associated with a commit."""
  checkSuites(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filters the check suites by this type."""
    filterBy: GitHubCheckSuiteFilter
  ): GitHubCheckSuiteConnection

  """Comments made on the commit."""
  comments(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubCommitCommentConnection!

  """The HTTP path for this Git object"""
  commitResourcePath: GitHubURI!

  """The HTTP URL for this Git object"""
  commitUrl: GitHubURI!

  """The datetime when this commit was committed."""
  committedDate: GitHubDateTime!

  """Check if committed via GitHub web UI."""
  committedViaWeb: Boolean!

  """Committer details of the commit."""
  committer: GitHubGitActor

  """The number of deletions in this commit."""
  deletions: Int!

  """The deployments associated with a commit."""
  deployments(
    """Environments to list deployments for"""
    environments: [String!]

    """Ordering options for deployments returned from the connection."""
    orderBy: GitHubDeploymentOrder = {field: CREATED_AT, direction: ASC}

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubDeploymentConnection

  """The tree entry representing the file located at the given path."""
  file(
    """The path for the file"""
    path: String!
  ): GitHubTreeEntry

  """
  The linear commit history starting from (and including) this commit, in the same order as `git log`.
  """
  history(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    If non-null, filters history to only show commits touching files under this path.
    """
    path: String

    """
    If non-null, filters history to only show commits with matching authorship.
    """
    author: GitHubCommitAuthor

    """Allows specifying a beginning time or date for fetching commits."""
    since: GitHubGitTimestamp

    """Allows specifying an ending time or date for fetching commits."""
    until: GitHubGitTimestamp
  ): GitHubCommitHistoryConnection!

  """"""
  id: ID!

  """The Git commit message"""
  message: String!

  """The Git commit message body"""
  messageBody: String!

  """The commit message body rendered to HTML."""
  messageBodyHTML: GitHubHTML!

  """The Git commit message headline"""
  messageHeadline: String!

  """The commit message headline rendered to HTML."""
  messageHeadlineHTML: GitHubHTML!

  """The Git object ID"""
  oid: GitHubGitObjectID!

  """The organization this commit was made on behalf of."""
  onBehalfOf: GitHubOrganization

  """The parents of a commit."""
  parents(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubCommitConnection!

  """The datetime when this commit was pushed."""
  pushedDate: GitHubDateTime

  """The Repository this commit belongs to"""
  repository: GitHubRepository!

  """The HTTP path for this commit"""
  resourcePath: GitHubURI!

  """Commit signing information, if present."""
  signature: GitHubGitSignature

  """Status information for this commit"""
  status: GitHubStatus

  """Check and Status rollup information for this commit."""
  statusCheckRollup: GitHubStatusCheckRollup

  """
  Returns a list of all submodules in this repository as of this Commit parsed from the .gitmodules file.
  """
  submodules(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubSubmoduleConnection!

  """
  Returns a URL to download a tarball archive for a repository.
  Note: For private repositories, these links are temporary and expire after five minutes.
  """
  tarballUrl: GitHubURI!

  """Commit's root Tree"""
  tree: GitHubTree!

  """The HTTP path for the tree of this commit"""
  treeResourcePath: GitHubURI!

  """The HTTP URL for the tree of this commit"""
  treeUrl: GitHubURI!

  """The HTTP URL for this commit"""
  url: GitHubURI!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!

  """
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  """
  viewerSubscription: GitHubSubscriptionState

  """
  Returns a URL to download a zipball archive for a repository.
  Note: For private repositories, these links are temporary and expire after five minutes.
  """
  zipballUrl: GitHubURI!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Represents a comment on a given Commit."""
type GitHubCommitComment implements OneGraphNode & GitHubComment & GitHubDeletable & GitHubMinimizable & GitHubNode & GitHubReactable & GitHubRepositoryNode & GitHubUpdatable & GitHubUpdatableComment {
  """The actor who authored the comment."""
  author: GitHubActor

  """Author's association with the subject of the comment."""
  authorAssociation: GitHubCommentAuthorAssociation!

  """Identifies the comment body."""
  body: String!

  """The body rendered to HTML."""
  bodyHTML: GitHubHTML!

  """The body rendered to text."""
  bodyText: String!

  """
  Identifies the commit associated with the comment, if the commit exists.
  """
  commit: GitHubCommit

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """Check if this comment was created via an email reply."""
  createdViaEmail: Boolean!

  """Identifies the primary key from the database."""
  databaseId: Int

  """The actor who edited the comment."""
  editor: GitHubActor

  """"""
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """Returns whether or not a comment has been minimized."""
  isMinimized: Boolean!

  """The moment the editor made the last edit"""
  lastEditedAt: GitHubDateTime

  """Returns why the comment was minimized."""
  minimizedReason: String

  """Identifies the file path associated with the comment."""
  path: String

  """Identifies the line position associated with the comment."""
  position: Int

  """Identifies when the comment was published at."""
  publishedAt: GitHubDateTime

  """A list of reactions grouped by content left on the subject."""
  reactionGroups: [GitHubReactionGroup!]

  """A list of Reactions left on the Issue."""
  reactions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Allows filtering Reactions by emoji."""
    content: GitHubReactionContent

    """Allows specifying the order in which reactions are returned."""
    orderBy: GitHubReactionOrder
  ): GitHubReactionConnection!

  """The repository associated with this node."""
  repository: GitHubRepository!

  """The HTTP path permalink for this commit comment."""
  resourcePath: GitHubURI!

  """Identifies the date and time when the object was last updated."""
  updatedAt: GitHubDateTime!

  """The HTTP URL permalink for this commit comment."""
  url: GitHubURI!

  """A list of edits to this content."""
  userContentEdits(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubUserContentEditConnection

  """Check if the current viewer can delete this object."""
  viewerCanDelete: Boolean!

  """Check if the current viewer can minimize this object."""
  viewerCanMinimize: Boolean!

  """Can user react to this subject"""
  viewerCanReact: Boolean!

  """Check if the current viewer can update this object."""
  viewerCanUpdate: Boolean!

  """Reasons why the current viewer can not update this comment."""
  viewerCannotUpdateReasons: [GitHubCommentCannotUpdateReason!]!

  """Did the viewer author this comment."""
  viewerDidAuthor: Boolean!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Represents a subject that can be reacted on."""
interface GitHubReactable {
  """Identifies the primary key from the database."""
  databaseId: Int

  """"""
  id: ID!

  """A list of reactions grouped by content left on the subject."""
  reactionGroups: [GitHubReactionGroup!]

  """A list of Reactions left on the Issue."""
  reactions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Allows filtering Reactions by emoji."""
    content: GitHubReactionContent

    """Allows specifying the order in which reactions are returned."""
    orderBy: GitHubReactionOrder
  ): GitHubReactionConnection!

  """Can user react to this subject"""
  viewerCanReact: Boolean!
}

enum GitHubReactionContent {
  """Represents the `:+1:` emoji."""
  THUMBS_UP

  """Represents the `:-1:` emoji."""
  THUMBS_DOWN

  """Represents the `:laugh:` emoji."""
  LAUGH

  """Represents the `:hooray:` emoji."""
  HOORAY

  """Represents the `:confused:` emoji."""
  CONFUSED

  """Represents the `:heart:` emoji."""
  HEART

  """Represents the `:rocket:` emoji."""
  ROCKET

  """Represents the `:eyes:` emoji."""
  EYES
}

"""A group of emoji reactions to a particular piece of content."""
type GitHubReactionGroup {
  """Identifies the emoji reaction."""
  content: GitHubReactionContent!

  """Identifies when the reaction was created."""
  createdAt: GitHubDateTime

  """The subject that was reacted to."""
  subject: GitHubReactable!

  """
  Users who have reacted to the reaction subject with the emotion represented by this reaction group
  """
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubReactingUserConnection!

  """
  Whether or not the authenticated user has left a reaction on the subject.
  """
  viewerHasReacted: Boolean!
}

"""A comment on a team discussion."""
type GitHubTeamDiscussionComment implements OneGraphNode & GitHubComment & GitHubDeletable & GitHubNode & GitHubReactable & GitHubUniformResourceLocatable & GitHubUpdatable & GitHubUpdatableComment {
  """The actor who authored the comment."""
  author: GitHubActor

  """Author's association with the comment's team."""
  authorAssociation: GitHubCommentAuthorAssociation!

  """The body as Markdown."""
  body: String!

  """The body rendered to HTML."""
  bodyHTML: GitHubHTML!

  """The body rendered to text."""
  bodyText: String!

  """The current version of the body content."""
  bodyVersion: String!

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """Check if this comment was created via an email reply."""
  createdViaEmail: Boolean!

  """Identifies the primary key from the database."""
  databaseId: Int

  """The discussion this comment is about."""
  discussion: GitHubTeamDiscussion!

  """The actor who edited the comment."""
  editor: GitHubActor

  """"""
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """The moment the editor made the last edit"""
  lastEditedAt: GitHubDateTime

  """Identifies the comment number."""
  number: Int!

  """Identifies when the comment was published at."""
  publishedAt: GitHubDateTime

  """A list of reactions grouped by content left on the subject."""
  reactionGroups: [GitHubReactionGroup!]

  """A list of Reactions left on the Issue."""
  reactions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Allows filtering Reactions by emoji."""
    content: GitHubReactionContent

    """Allows specifying the order in which reactions are returned."""
    orderBy: GitHubReactionOrder
  ): GitHubReactionConnection!

  """The HTTP path for this comment"""
  resourcePath: GitHubURI!

  """Identifies the date and time when the object was last updated."""
  updatedAt: GitHubDateTime!

  """The HTTP URL for this comment"""
  url: GitHubURI!

  """A list of edits to this content."""
  userContentEdits(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubUserContentEditConnection

  """Check if the current viewer can delete this object."""
  viewerCanDelete: Boolean!

  """Can user react to this subject"""
  viewerCanReact: Boolean!

  """Check if the current viewer can update this object."""
  viewerCanUpdate: Boolean!

  """Reasons why the current viewer can not update this comment."""
  viewerCannotUpdateReasons: [GitHubCommentCannotUpdateReason!]!

  """Did the viewer author this comment."""
  viewerDidAuthor: Boolean!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An edge in a connection."""
type GitHubTeamDiscussionCommentEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubTeamDiscussionComment
}

"""The connection type for TeamDiscussionComment."""
type GitHubTeamDiscussionCommentConnection {
  """A list of edges."""
  edges: [GitHubTeamDiscussionCommentEdge]

  """A list of nodes."""
  nodes: [GitHubTeamDiscussionComment]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A string containing HTML code."""
scalar GitHubHTML

enum GitHubCommentAuthorAssociation {
  """Author is a member of the organization that owns the repository."""
  MEMBER

  """Author is the owner of the repository."""
  OWNER

  """Author is a placeholder for an unclaimed user."""
  MANNEQUIN

  """Author has been invited to collaborate on the repository."""
  COLLABORATOR

  """Author has previously committed to the repository."""
  CONTRIBUTOR

  """Author has not previously committed to the repository."""
  FIRST_TIME_CONTRIBUTOR

  """Author has not previously committed to GitHub."""
  FIRST_TIMER

  """Author has no association with the repository."""
  NONE
}

"""A team discussion."""
type GitHubTeamDiscussion implements OneGraphNode & GitHubComment & GitHubDeletable & GitHubNode & GitHubReactable & GitHubSubscribable & GitHubUniformResourceLocatable & GitHubUpdatable & GitHubUpdatableComment {
  """The actor who authored the comment."""
  author: GitHubActor

  """Author's association with the discussion's team."""
  authorAssociation: GitHubCommentAuthorAssociation!

  """The body as Markdown."""
  body: String!

  """The body rendered to HTML."""
  bodyHTML: GitHubHTML!

  """The body rendered to text."""
  bodyText: String!

  """Identifies the discussion body hash."""
  bodyVersion: String!

  """A list of comments on this discussion."""
  comments(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Order for connection"""
    orderBy: GitHubTeamDiscussionCommentOrder

    """
    When provided, filters the connection such that results begin with the comment with this number.
    """
    fromComment: Int
  ): GitHubTeamDiscussionCommentConnection!

  """The HTTP path for discussion comments"""
  commentsResourcePath: GitHubURI!

  """The HTTP URL for discussion comments"""
  commentsUrl: GitHubURI!

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """Check if this comment was created via an email reply."""
  createdViaEmail: Boolean!

  """Identifies the primary key from the database."""
  databaseId: Int

  """The actor who edited the comment."""
  editor: GitHubActor

  """"""
  id: ID!

  """
  Check if this comment was edited and includes an edit with the creation data
  """
  includesCreatedEdit: Boolean!

  """Whether or not the discussion is pinned."""
  isPinned: Boolean!

  """
  Whether or not the discussion is only visible to team members and org admins.
  """
  isPrivate: Boolean!

  """The moment the editor made the last edit"""
  lastEditedAt: GitHubDateTime

  """Identifies the discussion within its team."""
  number: Int!

  """Identifies when the comment was published at."""
  publishedAt: GitHubDateTime

  """A list of reactions grouped by content left on the subject."""
  reactionGroups: [GitHubReactionGroup!]

  """A list of Reactions left on the Issue."""
  reactions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Allows filtering Reactions by emoji."""
    content: GitHubReactionContent

    """Allows specifying the order in which reactions are returned."""
    orderBy: GitHubReactionOrder
  ): GitHubReactionConnection!

  """The HTTP path for this discussion"""
  resourcePath: GitHubURI!

  """The team that defines the context of this discussion."""
  team: GitHubTeam!

  """The title of the discussion"""
  title: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: GitHubDateTime!

  """The HTTP URL for this discussion"""
  url: GitHubURI!

  """A list of edits to this content."""
  userContentEdits(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubUserContentEditConnection

  """Check if the current viewer can delete this object."""
  viewerCanDelete: Boolean!

  """Whether or not the current viewer can pin this discussion."""
  viewerCanPin: Boolean!

  """Can user react to this subject"""
  viewerCanReact: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!

  """Check if the current viewer can update this object."""
  viewerCanUpdate: Boolean!

  """Reasons why the current viewer can not update this comment."""
  viewerCannotUpdateReasons: [GitHubCommentCannotUpdateReason!]!

  """Did the viewer author this comment."""
  viewerDidAuthor: Boolean!

  """
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  """
  viewerSubscription: GitHubSubscriptionState
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

enum GitHubTeamOrderField {
  """Allows ordering a list of teams by name."""
  NAME
}

enum GitHubOrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC

  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}

"""Ways in which team connections can be ordered."""
input GitHubTeamOrder {
  """The field in which to order nodes by."""
  field: GitHubTeamOrderField!

  """The direction in which to order nodes."""
  direction: GitHubOrderDirection!
}

"""Information about pagination in a connection."""
type GitHubPageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""An edge in a connection."""
type GitHubTeamEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GitHubTeam
}

"""The connection type for Team."""
type GitHubTeamConnection {
  """A list of edges."""
  edges: [GitHubTeamEdge]

  """A list of nodes."""
  nodes: [GitHubTeam]

  """Information to aid in pagination."""
  pageInfo: GitHubPageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A team of users in an organization."""
type GitHubTeam implements OneGraphNode & GitHubMemberStatusable & GitHubNode & GitHubSubscribable {
  """A list of teams that are ancestors of this team."""
  ancestors(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubTeamConnection!

  """A URL pointing to the team's avatar."""
  avatarUrl(
    """The size in pixels of the resulting square image."""
    size: Int = 400
  ): GitHubURI

  """List of child teams belonging to this team"""
  childTeams(
    """Order for connection"""
    orderBy: GitHubTeamOrder

    """User logins to filter by"""
    userLogins: [String!]

    """Whether to list immediate child teams or all descendant child teams."""
    immediateOnly: Boolean = true

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubTeamConnection!

  """The slug corresponding to the organization and team."""
  combinedSlug: String!

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """Identifies the primary key from the database."""
  databaseId: Int

  """The description of the team."""
  description: String

  """Find a team discussion by its number."""
  discussion(
    """The sequence number of the discussion to find."""
    number: Int!
  ): GitHubTeamDiscussion

  """A list of team discussions."""
  discussions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    If provided, filters discussions according to whether or not they are pinned.
    """
    isPinned: Boolean

    """Order for connection"""
    orderBy: GitHubTeamDiscussionOrder
  ): GitHubTeamDiscussionConnection!

  """The HTTP path for team discussions"""
  discussionsResourcePath: GitHubURI!

  """The HTTP URL for team discussions"""
  discussionsUrl: GitHubURI!

  """The HTTP path for editing this team"""
  editTeamResourcePath: GitHubURI!

  """The HTTP URL for editing this team"""
  editTeamUrl: GitHubURI!

  """"""
  id: ID!

  """A list of pending invitations for users to this team"""
  invitations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GitHubOrganizationInvitationConnection

  """
  Get the status messages members of this entity have set that are either public or visible only to the organization.
  """
  memberStatuses(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for user statuses returned from the connection."""
    orderBy: GitHubUserStatusOrder = {field: UPDATED_AT, direction: DESC}
  ): GitHubUserStatusConnection!

  """A list of users who are members of this team."""
  members(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """The search string to look for."""
    query: String

    """Filter by membership type"""
    membership: GitHubTeamMembershipType = ALL

    """Filter by team member role"""
    role: GitHubTeamMemberRole

    """Order for the connection."""
    orderBy: GitHubTeamMemberOrder
  ): GitHubTeamMemberConnection!

  """The HTTP path for the team' members"""
  membersResourcePath: GitHubURI!

  """The HTTP URL for the team' members"""
  membersUrl: GitHubURI!

  """The name of the team."""
  name: String!

  """The HTTP path creating a new team"""
  newTeamResourcePath: GitHubURI!

  """The HTTP URL creating a new team"""
  newTeamUrl: GitHubURI!

  """The organization that owns this team."""
  organization: GitHubOrganization!

  """The parent team of the team."""
  parentTeam: GitHubTeam

  """The level of privacy the team has."""
  privacy: GitHubTeamPrivacy!

  """A list of repositories this team has access to."""
  repositories(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """The search string to look for."""
    query: String

    """Order for the connection."""
    orderBy: GitHubTeamRepositoryOrder
  ): GitHubTeamRepositoryConnection!

  """The HTTP path for this team's repositories"""
  repositoriesResourcePath: GitHubURI!

  """The HTTP URL for this team's repositories"""
  repositoriesUrl: GitHubURI!

  """The HTTP path for this team"""
  resourcePath: GitHubURI!

  """The slug corresponding to the team."""
  slug: String!

  """The HTTP path for this team's teams"""
  teamsResourcePath: GitHubURI!

  """The HTTP URL for this team's teams"""
  teamsUrl: GitHubURI!

  """Identifies the date and time when the object was last updated."""
  updatedAt: GitHubDateTime!

  """The HTTP URL for this team"""
  url: GitHubURI!

  """Team is adminable by the viewer."""
  viewerCanAdminister: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!

  """
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  """
  viewerSubscription: GitHubSubscriptionState
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Types that can be an actor."""
union GitHubPushAllowanceActor = GitHubApp | GitHubTeam | GitHubUser

"""A GitHub App."""
type GitHubApp implements OneGraphNode & GitHubNode {
  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """Identifies the primary key from the database."""
  databaseId: Int

  """The description of the app."""
  description: String

  """"""
  id: ID!

  """The hex color code, without the leading '#', for the logo background."""
  logoBackgroundColor: String!

  """A URL pointing to the app's logo."""
  logoUrl(
    """The size of the resulting image."""
    size: Int
  ): GitHubURI!

  """The name of the app."""
  name: String!

  """A slug based on the name of the app for use in URLs."""
  slug: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: GitHubDateTime!

  """The URL to the app's homepage."""
  url: GitHubURI!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An object with an ID."""
interface GitHubNode {
  """ID of the object."""
  id: ID!
}

"""A placeholder user for attribution of imported data on GitHub."""
type GitHubMannequin implements OneGraphNode & GitHubActor & GitHubNode & GitHubUniformResourceLocatable {
  """A URL pointing to the GitHub App's public avatar."""
  avatarUrl(
    """The size of the resulting square image."""
    size: Int
  ): GitHubURI!

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """Identifies the primary key from the database."""
  databaseId: Int

  """The mannequin's email on the source instance."""
  email: String

  """"""
  id: ID!

  """The username of the actor."""
  login: String!

  """The HTML path to this resource."""
  resourcePath: GitHubURI!

  """Identifies the date and time when the object was last updated."""
  updatedAt: GitHubDateTime!

  """The URL to this resource."""
  url: GitHubURI!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Types that can be assigned to issues."""
union GitHubAssignee = GitHubBot | GitHubMannequin | GitHubOrganization | GitHubUser

"""Filter linked nodes by __typename."""
input OneGraphLinkedNodesTypenameFilter {
  """
  Checks for linked nodes where the __typename is in the list of the provided values.
  """
  in: [String!]

  """
  Checks for linked nodes where the __typename is equal to the provided value.
  """
  equalTo: String
}

"""Services supported by OneGraph."""
enum OneGraphServiceEnumArg {
  ADROLL
  ASANA
  BOX
  CONTENTFUL
  DEV_TO
  DOCUSIGN
  DRIBBBLE
  DROPBOX
  EGGHEADIO
  EVENTIL
  FACEBOOK
  FIREBASE
  GITHUB
  GMAIL
  GONG
  GOOGLE
  GOOGLE_ADS
  GOOGLE_ANALYTICS
  GOOGLE_CALENDAR
  GOOGLE_COMPUTE
  GOOGLE_DOCS
  GOOGLE_SEARCH_CONSOLE
  GOOGLE_TRANSLATE
  HUBSPOT
  INTERCOM
  MAILCHIMP
  MEETUP
  NETLIFY
  NOTION
  OUTREACH
  PRODUCT_HUNT
  QUICKBOOKS
  SALESFORCE
  SANITY
  SLACK
  SPOTIFY
  STRIPE
  TRELLO
  TWILIO
  TWITTER
  TWITCH_TV
  YNAB
  YOUTUBE
  ZEIT
  ZENDESK
  AIRTABLE
  APOLLO
  BREX
  BUNDLEPHOBIA
  CHARGEBEE
  CLEARBIT
  CLOUDFLARE
  CRUNCHBASE
  DESCURI
  FEDEX
  GOOGLE_MAPS
  GRAPHCMS
  IMMIGRATION_GRAPH
  LOGDNA
  MIXPANEL
  MUX
  NPM
  ONEGRAPH
  ORBIT
  OPEN_COLLECTIVE
  RSS
  UPS
  USPS
  WORDPRESS
}

"""Filter linked nodes by service."""
input OneGraphLinkedNodesServiceFilter {
  """
  Checks for linked nodes where the service is in the list of the provided values.
  """
  in: [OneGraphServiceEnumArg!]

  """
  Checks for linked nodes where the service is equal to the provided value.
  """
  equalTo: OneGraphServiceEnumArg
}

input OneGraphLinkedNodesConnectionFilter {
  """Filter connections by their GraphQL __typename"""
  typename: OneGraphLinkedNodesTypenameFilter

  """Filter connections by service"""
  service: OneGraphLinkedNodesServiceFilter
}

"""An ISO-8601 encoded UTC date string."""
scalar GitHubDateTime

"""An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string."""
scalar GitHubURI

"""A special type of user which takes actions on behalf of GitHub Apps."""
type GitHubBot implements OneGraphNode & GitHubActor & GitHubNode & GitHubUniformResourceLocatable {
  """A URL pointing to the GitHub App's public avatar."""
  avatarUrl(
    """The size of the resulting square image."""
    size: Int
  ): GitHubURI!

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """Identifies the primary key from the database."""
  databaseId: Int

  """"""
  id: ID!

  """The username of the actor."""
  login: String!

  """The HTTP path for this bot"""
  resourcePath: GitHubURI!

  """Identifies the date and time when the object was last updated."""
  updatedAt: GitHubDateTime!

  """The HTTP URL for this bot"""
  url: GitHubURI!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""
Represents an object which can take actions on GitHub. Typically a User or Bot.
"""
interface GitHubActor {
  """A URL pointing to the actor's public avatar."""
  avatarUrl(
    """The size of the resulting square image."""
    size: Int
  ): GitHubURI!

  """The username of the actor."""
  login: String!

  """The HTTP path for this actor."""
  resourcePath: GitHubURI!

  """The HTTP URL for this actor."""
  url: GitHubURI!
}

"""
Represents a 'added_to_project' event on a given issue or pull request.
"""
type GitHubAddedToProjectEvent implements OneGraphNode & GitHubNode {
  """Identifies the actor who performed the event."""
  actor: GitHubActor

  """Identifies the date and time when the object was created."""
  createdAt: GitHubDateTime!

  """Identifies the primary key from the database."""
  databaseId: Int

  """"""
  id: ID!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""An object with a globally unique id across all of OneGraph"""
interface OneGraphNode {
  """The id of the object."""
  oneGraphId: ID!

  """List of OneGraphNodes that are linked from this node."""
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!
}

"""List of OneGraphNodes that are linked from this node."""
type OneGraphLinkedNodesConnection {
  """List of OneGraphNodes that are linked from this node."""
  nodes: [OneGraphNode!]!
}

"""The style for the logo svg."""
enum OneGraphAppLogoStyleEnum {
  DEFAULT
  ROUNDED_RECTANGLE
}

"""An OAuth scope that the service supports."""
type OneGraphServiceScope {
  category: String
  scope: String!
  display: String!
  isDefault: Boolean!
  isRequired: Boolean!
  description: String!
  title: String
}

"""Information about a service that OneGraph supports."""
type OneGraphServiceInfo implements OneGraphNode {
  service: OneGraphServiceEnum!
  friendlyServiceName: String!

  """
  Service string that can be provided in the URL when going through the oauth flow.
  """
  slug: String!
  supportsOauthLogin: Boolean!
  supportsCustomServiceAuth: Boolean!
  supportsCustomRedirectUri: Boolean!
  supportsTestFlow: Boolean!
  availableScopes: [OneGraphServiceScope!]

  """A short-lived svg image url of the logo for the service. May be null."""
  logoUrl(style: OneGraphAppLogoStyleEnum = DEFAULT): String

  """Whether Netlify API Authentication is enabled for this service"""
  netlifyApiAuthenticationEnabled: Boolean!

  """Whether Netlify Graph is enabled for this service"""
  netlifyGraphEnabled: Boolean!

  """
  The prefix that all GraphQL types addded by this service will have, e.g. `GitHub`.
  """
  typePrefix: String!
  oneGraphLinkedNodes(
    """Filter the connected nodes that are returned by service or typename."""
    filter: OneGraphLinkedNodesConnectionFilter
  ): OneGraphLinkedNodesConnection!

  """Unique id across all of OneGraph"""
  oneGraphId: ID!
}

"""Services supported by OneGraph."""
enum OneGraphServiceEnum {
  ADROLL
  ASANA
  BOX
  CONTENTFUL
  DEV_TO
  DOCUSIGN
  DRIBBBLE
  DROPBOX
  EGGHEADIO
  EVENTIL
  FACEBOOK
  FIREBASE
  GITHUB
  GMAIL
  GONG
  GOOGLE
  GOOGLE_ADS
  GOOGLE_ANALYTICS
  GOOGLE_CALENDAR
  GOOGLE_COMPUTE
  GOOGLE_DOCS
  GOOGLE_SEARCH_CONSOLE
  GOOGLE_TRANSLATE
  HUBSPOT
  INTERCOM
  MAILCHIMP
  MEETUP
  NETLIFY
  NOTION
  OUTREACH
  PRODUCT_HUNT
  QUICKBOOKS
  SALESFORCE
  SANITY
  SLACK
  SPOTIFY
  STRIPE
  TRELLO
  TWILIO
  TWITTER
  TWITCH_TV
  YNAB
  YOUTUBE
  ZEIT
  ZENDESK
  AIRTABLE
  APOLLO
  BREX
  BUNDLEPHOBIA
  CHARGEBEE
  CLEARBIT
  CLOUDFLARE
  CRUNCHBASE
  DESCURI
  FEDEX
  GOOGLE_MAPS
  GRAPHCMS
  IMMIGRATION_GRAPH
  LOGDNA
  MIXPANEL
  MUX
  NPM
  ONEGRAPH
  ORBIT
  OPEN_COLLECTIVE
  RSS
  UPS
  USPS
  WORDPRESS
}

"""Information about a service."""
type OneGraphServiceMetadata {
  service: OneGraphServiceEnum!
  friendlyServiceName: String!
  isLoggedIn: Boolean!
  usedTestFlow: Boolean!
  foreignUserId: String

  """
  Bearer token that can be used to query the underlying API directly. This field will always be null unless the OneGraph App has enabled sharing tokens for its custom OAuth client.
  """
  bearerToken: String
  serviceInfo: OneGraphServiceInfo!

  """
  The scopes that the user granted for this service. This is a best estimate of the scopes that were granted. Most services do not have a way to query the scopes on an auth, and some services do not return information about the scopes that were granted in the auth flow.
  """
  grantedScopes: [OneGraphServiceMetadataGrantedScope!]
}

"""Information about OneGraph services"""
type OneGraphServicesMetadata {
  loggedInServices: [OneGraphServiceMetadata!]!
  adroll: OneGraphServiceMetadata!
  asana: OneGraphServiceMetadata!
  box: OneGraphServiceMetadata!
  contentful: OneGraphServiceMetadata!
  devTo: OneGraphServiceMetadata!
  docusign: OneGraphServiceMetadata!
  dribbble: OneGraphServiceMetadata!
  dropbox: OneGraphServiceMetadata!
  eggheadio: OneGraphServiceMetadata!
  eventil: OneGraphServiceMetadata!
  facebookBusiness: OneGraphServiceMetadata!
  firebase: OneGraphServiceMetadata!
  gitHub: OneGraphServiceMetadata!
  gmail: OneGraphServiceMetadata!
  gong: OneGraphServiceMetadata!
  google: OneGraphServiceMetadata!
  googleAds: OneGraphServiceMetadata!
  googleAnalytics: OneGraphServiceMetadata!
  googleCalendar: OneGraphServiceMetadata!
  googleCompute: OneGraphServiceMetadata!
  googleDocs: OneGraphServiceMetadata!
  googleSearchConsole: OneGraphServiceMetadata!
  googleTranslate: OneGraphServiceMetadata!
  hubspot: OneGraphServiceMetadata!
  intercom: OneGraphServiceMetadata!
  mailchimp: OneGraphServiceMetadata!
  meetup: OneGraphServiceMetadata!
  netlify: OneGraphServiceMetadata!
  notion: OneGraphServiceMetadata!
  outreach: OneGraphServiceMetadata!
  productHunt: OneGraphServiceMetadata!
  quickbooks: OneGraphServiceMetadata!
  salesforce: OneGraphServiceMetadata!
  sanity: OneGraphServiceMetadata!
  slack: OneGraphServiceMetadata!
  spotify: OneGraphServiceMetadata!
  stripe: OneGraphServiceMetadata!
  trello: OneGraphServiceMetadata!
  twilio: OneGraphServiceMetadata!
  twitter: OneGraphServiceMetadata!
  twitchTv: OneGraphServiceMetadata!
  ynab: OneGraphServiceMetadata!
  youTube: OneGraphServiceMetadata!
  zeit: OneGraphServiceMetadata!
  zendesk: OneGraphServiceMetadata!
  airtable: OneGraphServiceMetadata!
  apollo: OneGraphServiceMetadata!
  brex: OneGraphServiceMetadata!
  bundlephobia: OneGraphServiceMetadata!
  chargebee: OneGraphServiceMetadata!
  clearbit: OneGraphServiceMetadata!
  cloudflare: OneGraphServiceMetadata!
  crunchbase: OneGraphServiceMetadata!
  descuri: OneGraphServiceMetadata!
  fedex: OneGraphServiceMetadata!
  googleMaps: OneGraphServiceMetadata!
  graphcms: OneGraphServiceMetadata!
  immigrationGraph: OneGraphServiceMetadata!
  logdna: OneGraphServiceMetadata!
  mixpanel: OneGraphServiceMetadata!
  mux: OneGraphServiceMetadata!
  npm: OneGraphServiceMetadata!
  onegraph: OneGraphServiceMetadata!
  orbit: OneGraphServiceMetadata!
  openCollective: OneGraphServiceMetadata!
  rss: OneGraphServiceMetadata!
  ups: OneGraphServiceMetadata!
  usps: OneGraphServiceMetadata!
  wordpress: OneGraphServiceMetadata!
  facebook: OneGraphServiceMetadata! @deprecated(reason: "Use facebookBusiness.")
}

"""Currently authed user"""
type Viewer {
  """Metadata and logged-in state for all OneGraph services"""
  serviceMetadata: OneGraphServicesMetadata!
  github: GitHubUser

  """Currently logged in oneUser"""
  oneGraph: OneGraphUser
}

type Query {
  me(
    """
    Instruct OneGraph to use the auth associated with a particular user.
    
    Note that the user must have gone through the OneGraph oauth flow and logged in with an account with the userId provided in the auth. If there is no user with the account, you may get an auth/auth-missing error.
    
    The userIds for logged-in services can be found under `me.serviceMetadata.loggedInServices.foreignUserId`.
    """
    userIds: OneGraphServiceUserIds

    """Optional OAuth tokens used to execute the query"""
    auths: OneGraphServiceAuths
  ): Viewer!

  """Fetches an object given its globally unique `oneGraphId`."""
  oneGraphNode(
    """The globally unique `oneGraphId`."""
    oneGraphId: ID!

    """
    Instruct OneGraph to use the auth associated with a particular user.
    
    Note that the user must have gone through the OneGraph oauth flow and logged in with an account with the userId provided in the auth. If there is no user with the account, you may get an auth/auth-missing error.
    
    The userIds for logged-in services can be found under `me.serviceMetadata.loggedInServices.foreignUserId`.
    """
    userIds: OneGraphServiceUserIds

    """Optional OAuth tokens used to execute the query"""
    auths: OneGraphServiceAuths
  ): OneGraphNode
  oneGraph(
    """
    Instruct OneGraph to use the auth associated with a particular user.
    
    Note that the user must have gone through the OneGraph oauth flow and logged in with an account with the userId provided in the auth. If there is no user with the account, you may get an auth/auth-missing error.
    
    The userIds for logged-in services can be found under `me.serviceMetadata.loggedInServices.foreignUserId`.
    """
    userIds: OneGraphServiceUserIds

    """Optional OAuth tokens used to execute the query"""
    auths: OneGraphServiceAuths
  ): OneGraphServiceQuery!
  gitHub(
    """
    Instruct OneGraph to use the auth associated with a particular user.
    
    Note that the user must have gone through the OneGraph oauth flow and logged in with an account with the userId provided in the auth. If there is no user with the account, you may get an auth/auth-missing error.
    
    The userIds for logged-in services can be found under `me.serviceMetadata.loggedInServices.foreignUserId`.
    """
    userIds: OneGraphServiceUserIds

    """Optional OAuth tokens used to execute the query"""
    auths: OneGraphServiceAuths
  ): GitHubQuery
}