---
import { ChartTotalVisits } from '../../components/ChartTotalVisits';
import BaseLayout from '../../layouts/base.astro';
import { neon } from '@neondatabase/serverless';

export const prerender = false;

const sql = neon(import.meta.env.DATABASE_URL);

interface AnalyticsData {
  id: number;
  date: string;
  path: string;
  referrer: string;
  country: string;
  city: string;
}

interface GroupedData {
  [key: string]: { date: Date; day: string; month: string; total: number };
}

interface GroupedReferrers {
  [key: string]: { referrer: string; total: number };
}

interface GroupedPaths {
  [key: string]: { path: string; total: number };
}

interface GroupedCities {
  [key: string]: { city: string; country: string; total: number };
}

let table: AnalyticsData[] = [];

try {
  const response = await sql`
    SELECT * FROM analytics
    WHERE date >= NOW() - INTERVAL '30 days'`;

  if (!response.length) {
    throw new Error('Bad request');
  }

  table = response as AnalyticsData[];

  table = table.filter(
    (item) => item.city !== 'Mock City' && !item.referrer.includes('localhost')
  );
} catch (error) {
  console.error(error);
}

const groupByDate = (array: Array<{ date: string }>) => {
  const groupedData: GroupedData = array.reduce((acc, item) => {
    const date = new Date(item.date);
    const day = date.getDate().toString().padStart(2, '0');
    const month = new Intl.DateTimeFormat('en', { month: 'short' }).format(
      date
    );
    const key = `${day}-${month}`;

    if (!acc[key]) {
      acc[key] = {
        date: date,
        day: day,
        month: month,
        total: 0
      };
    }

    // @ts-expect-error - TS doesn't know that acc[key] exists
    acc[key].total++;

    return acc;
  }, {} as GroupedData);

  return Object.keys(groupedData).map((key) => groupedData[key]);
};

const groupByReferrer = (array: Array<{ referrer: string }>) => {
  const groupedData: GroupedReferrers = array.reduce((acc, item) => {
    const { referrer } = item;
    const url =
      referrer !== null && referrer.includes('petermekhaeil.com')
        ? 'https://petermekhaeil.com'
        : referrer;
    const key = url;

    if (!acc[key]) {
      acc[key] = {
        referrer: url,
        total: 0
      };
    }

    // @ts-expect-error - TS doesn't know that acc[key] exists
    acc[key].total++;

    return acc;
  }, {} as GroupedReferrers);

  return Object.keys(groupedData)
    .map((key) => groupedData[key])
    .filter((item) => item?.referrer !== null);
};

const groupByPath = (array: Array<{ path: string }>) => {
  const groupedData: GroupedPaths = array.reduce((acc, item) => {
    const { path } = item;
    const key = path;

    if (!acc[key]) {
      acc[key] = {
        path: path,
        total: 0
      };
    }

    // @ts-expect-error - TS doesn't know that acc[key] exists
    acc[key].total++;

    return acc;
  }, {} as GroupedPaths);

  return Object.keys(groupedData).map((key) => groupedData[key]);
};

const groupByCity = (array: Array<{ city: string; country: string }>) => {
  const groupedData: GroupedCities = array.reduce((acc, item) => {
    const { city, country } = item;
    const key = city;

    if (!acc[key]) {
      acc[key] = {
        city: city,
        country: country,
        total: 0
      };
    }

    // @ts-expect-error - TS doesn't know that acc[key] exists
    acc[key].total++;

    return acc;
  }, {} as GroupedCities);

  return Object.keys(groupedData).map((key) => groupedData[key]);
};

// https://github.com/vercel/vercel/blob/main/packages/edge/src/edge-headers.ts#L34
export const EMOJI_FLAG_UNICODE_STARTING_POSITION = 127397;

function getFlag(countryCode: string | undefined): string | undefined {
  const regex = new RegExp('^[A-Z]{2}$').test(countryCode!);
  if (!countryCode || !regex) return undefined;
  return String.fromCodePoint(
    ...countryCode
      .split('')
      .map((char) => EMOJI_FLAG_UNICODE_STARTING_POSITION + char.charCodeAt(0))
  );
}
---

<BaseLayout>
  <h1 class="mb-1 text-2xl font-bold">Analytics</h1>
  {
    table ? (
      <div class="m-auto my-8 mb-12 max-w-2xl text-sm">
        <h2 class="my-8 text-xl font-bold">Total Visits</h2>
        <ChartTotalVisits client:load data={groupByDate(table)} />

        <h2 class="my-8 text-xl font-bold">Top Referrers</h2>
        <div class="py-2 font-medium text-gray-500">
          <span class="grid grid-cols-8">
            <span class="col-span-7">Referrers</span>
            <span class="col-span-1">Count</span>
          </span>
        </div>
        <ul>
          {groupByReferrer(table)
            .filter((item) => item?.referrer !== '')
            .slice(0, 10)
            // @ts-expect-error - TS doesn't know that item is not null
            .sort((a, b) => b.total - a.total)
            .map((item) => (
              <li class="transition-[background-color] hover:bg-gray-100 active:bg-gray-200">
                <span class="grid grid-cols-8 gap-2 border-t border-gray-200 py-2">
                  <time class="col-span-7">{item?.referrer}</time>
                  <span class="col-span-1 text-gray-500">{item?.total}</span>
                </span>
              </li>
            ))}
        </ul>

        <h2 class="my-8 text-xl font-bold">Top Posts</h2>
        <div class="py-2 font-medium text-gray-500">
          <span class="grid grid-cols-8">
            <span class="col-span-7">Post</span>
            <span class="col-span-1">Count</span>
          </span>
        </div>
        <ul>
          {groupByPath(table)
            // @ts-expect-error - TS doesn't know that item is not null
            .sort((a, b) => b.total - a.total)
            .slice(0, 10)
            .map((item) => (
              <li class="transition-[background-color] hover:bg-gray-100 active:bg-gray-200">
                <a href={item?.path}>
                  <span class="grid grid-cols-8 gap-2 border-t border-gray-200 py-2">
                    <time class="col-span-7">{item?.path}</time>
                    <span class="col-span-1 text-gray-500">{item?.total}</span>
                  </span>
                </a>
              </li>
            ))}
        </ul>

        <h2 class="my-8 text-xl font-bold">Top Cities</h2>
        <div class="py-2 font-medium text-gray-500">
          <span class="grid grid-cols-8">
            <span class="col-span-7">City</span>
            <span class="col-span-1">Count</span>
          </span>
        </div>
        <ul>
          {groupByCity(table)
            // @ts-expect-error - TS doesn't know that item is not null
            .sort((a, b) => b.total - a.total)
            .slice(0, 10)
            .map((item) => (
              <li class="transition-[background-color] hover:bg-gray-100 active:bg-gray-200">
                <span class="grid grid-cols-8 gap-2 border-t border-gray-200 py-2">
                  <time class="col-span-7">
                    {getFlag(item?.country)} {item?.city ?? item?.country}
                  </time>
                  <span class="col-span-1 text-gray-500">{item?.total}</span>
                </span>
              </li>
            ))}
        </ul>
      </div>
    ) : null
  }
</BaseLayout>
